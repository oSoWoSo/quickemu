name: "Test all 💿️"

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'
  push:
    #branches:
      #- '**'
    paths:
      - .github/workflows/dynamo.yml
      - actions/**

  #pull_request:
    #branches:
      #- '**'
    #paths:
      #- actions/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-matrix:
    name: "💿️ Matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "💿️ Matrix"
        id: set-matrix
        run: |
          FILES=$(find actions/ -maxdepth 1 -type f -printf "%f\n" | sort)
          MATRIX="{\"include\": ["
          for file in $FILES; do
            MATRIX+="{\"file\": \"$file\"},"
          done
          MATRIX="${MATRIX%,}]}"
          echo "Generated Matrix: $MATRIX"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

      - name: "Cache dependencies 📦️"
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: curl jq
          version: 1.0

  run-actions:
    name: "💿️"
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Checkout 👟 ${{ matrix.file }}"
        run: |
          mkdir -p results
          #./quickget --check ${{ matrix.file }} | tee results/${{ matrix.file }}.txt
          chmod a+x action
          ./action ${{ matrix.file }} | tee results/${{ matrix.file }}.txt
          git add public/${{ matrix.file }}
          #if grep -vqE '^(PASS:|SKIP:)' results/${{ matrix.file }}.txt; then
            #grep -vE '^(PASS:|SKIP:)' results/${{ matrix.file }}.txt >> $GITHUB_STEP_SUMMARY
            #exit 1
          #fi

      - name: "Upload Results ⬆️"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.file }}.txt
          path: results/${{ matrix.file }}.txt

  end:
    name: "🏁 Finish"
    needs: run-actions
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Download results ⬇️"
        uses: actions/download-artifact@v4
        with:
          path: results
          merge-multiple: true

      - name: "Apply results 📊"
        run: |
          rm -f result
          rm -rf public
          for file in results/*.txt; do
            name=$(basename -s .txt "$file")
            template=$(awk '/# Template file for/{found=1} found' "$file")
            cat "$file" >> result
            echo -e "$template\n" > public/"$name"
          done

      - name: "Create small table"
        run: |
          header="OS|RELEASE|EDITION|ISO"
          table="| $header |\n|---|---|---|---|\n"
          echo "Creating table"
          for file in results/*.txt; do
            content=$(awk '/# Template file for/{exit} {print}' "$file" | tail -n +3)
            while IFS= read -r line; do
              NAME=$(echo "$line" | cut -d' ' -f1)
              RELEASE=$(echo "$line" | cut -d':' -f1 | cut -d' ' -f2)
              EDITION=$(echo "$line" | cut -d':' -f1 | cut -d' ' -f3)
              iso=$(echo "$line" | cut -d':' -f2- | awk '{$1=$1; print}')
              if [[ "$iso" =~ 'http' ]]; then
                ISO="[url]($iso)"
              else
                ISO="**ERROR**"
              fi
              table+="| ${NAME} | ${RELEASE} | ${EDITION} | ${ISO} |\n"
            done <<< "$content"
            #rm "$file"
          done
          echo "Rewriting READMEsmall"
          echo -e "# Table of supported\n<!-- TABLE -->\n$table" > READMEsmall.md

      - name: "Create error table"
        if: always()
        run: |
          header="OS|RELEASE|EDITION|ISO"
          table="| $header |\n|---|---|---|---|\n"
          echo "Creating table"
          for file in results/*.txt; do
            content=$(awk '/# Template file for/{exit} {print}' "$file" | tail -n +3)
            while IFS= read -r line; do
              NAME=$(echo "$line" | cut -d' ' -f1)
              RELEASE=$(echo "$line" | cut -d':' -f1 | cut -d' ' -f2)
              EDITION=$(echo "$line" | cut -d':' -f1 | cut -d' ' -f3)
              iso=$(echo "$line" | cut -d':' -f2- | awk '{$1=$1; print}')
              if [[ "$iso" =~ 'http' ]]; then
                ISO="[url]($iso)"
              else
                ISO="**ERROR**"
              fi
              table+="| ${NAME} | ${RELEASE} | ${EDITION} | ${ISO} |\n"
            done <<< "$content"
            #rm "$file"
          done
          echo "Rewriting ERRORS"
          echo -e "# Table of errors\n<!-- TABLE -->\n| OS|RELEASE|EDITION|ISO |\n|---|---|---|---|" > ERRORS.md
          echo -e "$table" | grep 'ERROR' >> ERRORS.md

      - name: "Create table"
        if: always()
        run: |
          header="OS|RELEASE|EDITION|ISO"
          table="| $header |\n|---|---|---|---|\n"
          echo "Creating table"
          for file in results/*.txt; do
            content=$(awk '/# Template file for/{exit} {print}' "$file" | tail -n +3)
            while IFS= read -r line; do
              NAME=$(echo "$line" | cut -d' ' -f1)
              RELEASE=$(echo "$line" | cut -d':' -f1 | cut -d' ' -f2)
              EDITION=$(echo "$line" | cut -d':' -f1 | cut -d' ' -f3)
              iso=$(echo "$line" | cut -d':' -f2- | awk '{$1=$1; print}')
              if [[ "$iso" =~ 'http' ]]; then
                ISO="$iso"
              else
                ISO="**ERROR**"
              fi
              table+="| ${NAME} | ${RELEASE} | ${EDITION} | ${ISO} |\n"
            done <<< "$content"
          done
          echo "Rewriting README"
          echo -e "# Table of supported\n<!-- TABLE -->\n$table" | grep -v 'ERROR' > README.md
          echo "Sorting"
          sort -u < TODO/all | tee TODO/all

      - name: "Removing temp files"
        run: |
          rm -f public/tmp*
          rm -rf results

      - name: "Table"
        if: always()
        run: |
          declare -A tables
          for file in results/*.txt; do
            content=$(awk '/# Template file for/{exit} {print}' "$file" | tail -n +3)
            while IFS= read -r line; do
              NAME=$(echo "$line" | cut -d' ' -f1)
              RELEASE=$(echo "$line" | cut -d':' -f1 | cut -d' ' -f2)
              EDITION=$(echo "$line" | cut -d':' -f1 | cut -d' ' -f3)
              iso=$(echo "$line" | cut -d':' -f2- | awk '{$1=$1; print}')
              if [[ ! ${tables[$NAME]} ]]; then
                declare -A tables[$NAME]
              fi
              if [[ -z "$EDITION" ]]; then
                EDITION=" "
              fi
              ${tables[$NAME][$EDITION]+="|$RELEASE|$iso|\n"}
            done <<< "$content"
            rm "$file"
          done
          table=""
          for os in "${!tables[@]}"; do
            echo "Creating table for $os"
            header="| Release |"
            for edition in "${!tables[$os][@]}"; do
              header+=" $edition |"
            done
            table+="## $os\n"
            table+="|---|"
            for edition in "${!tables[$os][@]}"; do
              table+="---|"
            done
            table+="\n"
            releases=($(echo "${tables[$os][ ]}" | cut -d'|' -f2))
            for release in "${releases[@]}"; do
              row="|$release|"
              for edition in "${!tables[$os][@]}"; do
                if [[ ${tables[$os][$edition]} =~ $release ]]; then
                  row+=" $(echo "${tables[$os][$edition]}" | grep $release | cut -d'|' -f3) |"
                else
                  row+="  |"
                fi
              done
              table+=$row"\n"
            done
            table+="\n"
          done
          echo -e "# Table of supported\n<!-- TABLE -->\n$table" > TABLE.md

      - name: "Push results"
        if: always()
        run: |
          git status
          git add --all
          git commit -m "Update supported"
          git push --force
          git status
