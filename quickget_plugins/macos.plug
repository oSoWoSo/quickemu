#!/usr/bin/bash
#
#   This template identifies the functions required to supported by each OS

function create_vm() {
   #    This function can be used to over rid the standard function in quickget 
    #    if you distribution requires something special. Windows and Mac are examples
   #    that will need to provide this function
    if [ "${VM_PATH}" != "$(pwd)" ] && ! mkdir -p "${VM_PATH}" 2>/dev/null; then
        echo "ERROR! Unable to create directory ${VM_PATH}"
        exit 1
    fi

    get_Information
    echo "Downloading macOS firmware"
        get_file "${OpenCore_qcow2}" "${VM_PATH}"
        get_file "${OVMF_CODE}" "${VM_PATH}"
        get_file "${OVMF_VARS}" "${VM_PATH}"
    
    if [ ! -e "${VM_PATH}/RecoveryImage.chunklist" ] && [ ! -e "${VM_PATH}/RecoveryImage.img" ]; then
        echo "Downloading macOS ${RELEASE} from ${downloadLink}"
        get_file "${downloadLink}" "${VM_PATH}" RecoveryImage.dmg --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${downloadSession}"
        curl --progress-bar "${chunkListLink}" -o "${VM_PATH}/RecoveryImage.chunklist" --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${chunkListSession}"
        check_RecoveryImage
    fi

    if [ -e "${VM_PATH}/RecoveryImage.dmg" ] && [ ! -e "${VM_PATH}/RecoveryImage.img" ]; then
        echo "Converting RecoveryImage..."
        qemu-img convert "${VM_PATH}/RecoveryImage.dmg" -O raw "${VM_PATH}/RecoveryImage.img" 2>/dev/null
        rm "${VM_PATH}/RecoveryImage.dmg" "${VM_PATH}/RecoveryImage.chunklist"
    fi

    make_vm_config
}

function get_distro_info() {
    # This function returns nothing. macOS does not need to output any of this
    return 0
}

#function get_file() {
#    #    This function can be used to over rid the standard function in quickget 
#    #    if you distribution requires something special. Windows and Mac are examples
#    #    that will need to provide this function
#}

function releases() {
    #   This funciton returns supported OS releases for the OS
    #   You WILL HAVE to change this functiion for your distro
    echo high-sierra mojave catalina big-sur monterey ventura sonoma
}

function editions() {
    #   This frunctions returns sn associative array with releases as the key
    #   and a "!" seperated string of valid editions for the specific release.
    #   While quite often editions are the same for all releases it is not always
    #   the case.
    #   Editions have different meanings for different OS's
    #   You WILL HAVE to change this functiion for your distro
    declare -A editions
    local release

    for release in $(releases); do
        editions[${release}]=""
    done

    for edition in "${!editions[@]}"; do
        echo "${edition} ${editions[$edition]}"
    done
}

function editions_required() {
    #   You WILL HAVE to change this functiion for your distro
    return 1        # Returning 0 means editions requuuuuire and 1 is not required
}

function pretty_name() {
    #   This funcction returns an expanded OS name for pretty printing
    #   You WILL HAVE to change this functiion for your distro
    echo "macOS"
}

function homepage() {
    #   This function returns the OS's home page URL
    #   You WILL HAVE to change this functiion for your distro
    echo "https://www.apple.com/macos/"
}

function make_vm_config() {
    #   This function creates the vm_config file and can be used to
    #   replace the default one in the quickget
    {
        printf "#!%s --vm\n" "$(which quickemu)"
        printf "guest_os=\"%s\"\n" "macos"
        printf "disk_img=\"%s/disk.qcow2\"\n" ${VM_PATH}
        printf "img=\"%s\"\n" "${VM_PATH}/RecoveryImage.img"
        printf "macos_release=\"%s\"\n" "${RELEASE}"
        if [ "${RELEASE}" == "monterey" ]; then
            printf "cpu_cores=\"2\"\n"
        fi
    } > "${VM_PATH}.conf"
    chmod u+x "${VM_PATH}.conf"

    printf "\nTo start your %s virtual machine run:\n" pretty_name
    printf "\tquickemu --vm %s\n\n" "${VM_PATH}.conf"
}

function generate_id() {
    local macRecoveryID=""
    local TYPE="${1}"
    local valid_chars=("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "F")
    for ((i=0; i<$TYPE; i++)); do
        macRecoveryID+="${valid_chars[$((RANDOM % 16))]}"
    done
    echo "${macRecoveryID}"
}

function get_Information() {
    local BOARD_ID=""
    local OS_TYPE="default"
    local MLB="00000000000000000"

    case ${RELEASE} in
        lion)           #10.7
            BOARD_ID="Mac-2E6FAB96566FE58C"
            MLB="00000000000F25Y00";;
        mountainlion)   #10.8
            BOARD_ID="Mac-7DF2A3B5E5D671ED"
            MLB="00000000000F65100";;
        mavericks)      #10.9
            BOARD_ID="Mac-F60DEB81FF30ACF6"
            MLB="00000000000FNN100";;
        yosemite)       #10.10
            BOARD_ID="Mac-E43C1C25D4880AD6"
            MLB="00000000000GDVW00";;
        elcapitan)      #10.11
            BOARD_ID="Mac-FFE5EF870D7BA81A"
            MLB="00000000000GQRX00";;
        sierra)         #10.12
            BOARD_ID="Mac-77F17D7DA9285301"
            MLB="00000000000J0DX00";;
        high-sierra)    #10.13
            BOARD_ID="Mac-BE088AF8C5EB4FA2"
            MLB="00000000000J80300";;
        mojave)         #10.14
            BOARD_ID="Mac-7BA5B2DFE22DDD8C"
            MLB="00000000000KXPG00";;
        catalina)       #10.15
            BOARD_ID="Mac-00BE6ED71E35EB86";;
        big-sur)        #11
            BOARD_ID="Mac-42FD25EABCABB274";;
        monterey)       #12
            BOARD_ID="Mac-E43C1C25D4880AD6";;
        ventura)        #13
            BOARD_ID="Mac-BE088AF8C5EB4FA2";;
        sonoma)
            BOARD_ID="Mac-53FDB3D8DB8CA971";;
        *) echo "ERROR! Unknown release: ${RELEASE}"
           releases_macos
           exit 1;;
    esac

    OpenCore_qcow2="https://github.com/kholia/OSX-KVM/raw/master/OpenCore/OpenCore.qcow2"
    OVMF_CODE="https://github.com/kholia/OSX-KVM/raw/master/OVMF_CODE.fd"
    OVMF_VARS="https://github.com/kholia/OSX-KVM/raw/master/OVMF_VARS-1920x1080.fd"

    local appleSession=$(curl -v -H "Host: osrecovery.apple.com" -H "Connection: close" -A "InternetRecovery/1.0" http://osrecovery.apple.com/ 2>&1 | tr ';' '\n' | awk -F'session=|;' '{print $2}' | grep 1)
    local info=$(curl -s -X POST -H "Host: osrecovery.apple.com" -H "Connection: close" -A "InternetRecovery/1.0" -b "session=\"${appleSession}\"" -H "Content-Type: text/plain"\
    -d $'cid='$(generate_id 16)$'\nsn='${MLB}$'\nbid='${BOARD_ID}$'\nk='$(generate_id 64)$'\nfg='$(generate_id 64)$'\nos='${OS_TYPE} \
    http://osrecovery.apple.com/InstallationPayload/RecoveryImage | tr ' ' '\n')
    downloadLink=$(echo "$info" | grep 'oscdn' | grep 'dmg')
    downloadSession=$(echo "$info" | grep 'expires' | grep 'dmg')
    chunkListLink=$(echo "$info" | grep 'oscdn' | grep 'chunklist')
    chunkListSession=$(echo "$info" | grep 'expires' | grep 'chunklist')
}

# Verify macOS Recovery Image using Python script.
function check_RecoveryImage() {
    if ! python3 "${BASE_DIR}/verifyRecoveryImage" "${VM_PATH}"; then
        error "Verification failed."
        exit 1
    fi
    echo "Verified macOS ${RELEASE} image using chunklist"
}

# Show_iso_url and test_iso_url functions are different for macOS. 
function show_iso_url() {
    get_Information
	echo -e "Recovery URL (inaccessible through normal browser):\n${downloadLink}\nChunklist (used for verifying the Recovery Image):\n${chunkListLink}\nFirmware URLs:\n${OpenCore_qcow2}\n${OVMF_CODE}\n${OVMF_VARS}"
}

function test_iso_url() {
    get_Information
    wget --spider --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${downloadSession}" "${downloadLink}"
    wget --spider --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${chunkListSession}" "${chunkListLink}"
}