agarimos

agarimos latest plasma:              https://sourceforge.net/projects/agarimos/files/PLASMA/AgarimOS-Plasma-Catppuccin-Live-x86_64-6.12.16_1-20250228.iso
agarimos latest xfce4:               https://sourceforge.net/projects/agarimos/files/XFCE4/AgarimOS-XFCE4-Catppuccin-Live-x86_64-6.12.21_1-20250406.iso
agarimos latest cinnamon:            https://sourceforge.net/projects/agarimos/files/CINNAMON/AgarimOS-Cinnamon-Catppuccin-x86_64-6.12.22_1-20250412.iso
agarimos latest lxqt-kwin:           https://sourceforge.net/projects/agarimos/files/LXQT-KWIN/AgarimOS-LXQT-KWIN-Dracula-Live-x86_64-6.12.22_1-20250410.iso
agarimos latest gnome:               https://sourceforge.net/projects/agarimos/files/GNOME/AgarimOS-Gnome-Catppuccin-Live-x86_64-6.12.22_1-20250412.iso

# Template file for 'agarimos'
OSNAME="agarimos"
PRETTY="AgarimOS"
BASEDOF="Void"
DESCRIPTION="Includes a minimum set of applications so you can build your system on your own."
HOMEPAGE="https://sourceforge.net/projects/agarimos"
CREDENTIALS="anon:voidlinux,root:voidlinux"


RELEASES="latest"
EDITIONS="xfce4 plasma lxqt-kwin gnome cinnamon"

function releases_() {
    echo latest
}

function editions_() {
    echo plasma xfce4 cinnamon lxqt-kwin gnome
}

function get_() {
    local REL=$(echo "${EDITION}" | tr '[:lower:]' '[:upper:]')
    local ISOS=$(web_pipe "https://sourceforge.net/projects/agarimos/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '.iso')
    local URL="https://sourceforge.net/projects/agarimos/files/${REL}"
    local ISO=$(echo "${ISOS}" | grep "${REL}" | cut -d'/' -f3)
    echo "${URL}/${ISO}"
}


alma

alma 9 boot:                         https://repo.almalinux.org/almalinux/9/isos/x86_64/AlmaLinux-9-latest-x86_64-boot.iso
alma 9 minimal:                      https://repo.almalinux.org/almalinux/9/isos/x86_64/AlmaLinux-9-latest-x86_64-minimal.iso
alma 9 dvd:                          https://repo.almalinux.org/almalinux/9/isos/x86_64/AlmaLinux-9-latest-x86_64-dvd.iso
alma 8 boot:                         https://repo.almalinux.org/almalinux/8/isos/x86_64/AlmaLinux-8-latest-x86_64-boot.iso
alma 8 minimal:                      https://repo.almalinux.org/almalinux/8/isos/x86_64/AlmaLinux-8-latest-x86_64-minimal.iso
alma 8 dvd:                          https://repo.almalinux.org/almalinux/8/isos/x86_64/AlmaLinux-8-latest-x86_64-dvd.iso

# Template file for 'alma'
OSNAME="alma"
PRETTY="AlmaLinux"
BASEDOF="Fedora RedHat"
DESCRIPTION="Community distribution, focused on long-term stability, providing a robust production-grade platform. Binary compatible with RHELÂ®"
HOMEPAGE="https://almalinux.org/"
CREDENTIALS="-"


RELEASES="9 8"
EDITIONS="minimal dvd boot"

function releases_() {
    echo 9 8
}

function editions_() {
    echo boot minimal dvd
}

function get_() {
    local HASH=""
    local ISO="AlmaLinux-${RELEASE}-latest-x86_64-${EDITION}.iso"
    local URL="https://repo.almalinux.org/almalinux/${RELEASE}/isos/x86_64"
    HASH="$(web_pipe "${URL}/CHECKSUM" | grep "(${ISO}" | cut -d' ' -f4)"
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


alpine

alpine v3.21:                        https://dl-cdn.alpinelinux.org/alpine/v3.21/releases/x86_64/alpine-virt-3.21.3-x86_64.iso
alpine v3.20:                        https://dl-cdn.alpinelinux.org/alpine/v3.20/releases/x86_64/alpine-virt-3.20.6-x86_64.iso
alpine v3.19:                        https://dl-cdn.alpinelinux.org/alpine/v3.19/releases/x86_64/alpine-virt-3.19.7-x86_64.iso
alpine v3.18:                        https://dl-cdn.alpinelinux.org/alpine/v3.18/releases/x86_64/alpine-virt-3.18.12-x86_64.iso
alpine v3.17:                        https://dl-cdn.alpinelinux.org/alpine/v3.17/releases/x86_64/alpine-virt-3.17.10-x86_64.iso
alpine v3.16:                        https://dl-cdn.alpinelinux.org/alpine/v3.16/releases/x86_64/alpine-virt-3.16.9-x86_64.iso
alpine v3.15:                        https://dl-cdn.alpinelinux.org/alpine/v3.15/releases/x86_64/alpine-virt-3.15.11-x86_64.iso
alpine v3.14:                        https://dl-cdn.alpinelinux.org/alpine/v3.14/releases/x86_64/alpine-virt-3.14.10-x86_64.iso
alpine v3.13:                        https://dl-cdn.alpinelinux.org/alpine/v3.13/releases/x86_64/alpine-virt-3.13.12-x86_64.iso
alpine v3.12:                        https://dl-cdn.alpinelinux.org/alpine/v3.12/releases/x86_64/alpine-virt-3.12.12-x86_64.iso

# Template file for 'alpine'
OSNAME="alpine"
PRETTY="Alpine Linux"
BASEDOF="-"
DESCRIPTION="Security-oriented, lightweight Linux distribution based on musl libc and busybox"
HOMEPAGE="https://alpinelinux.org/"
CREDENTIALS="-"


RELEASES="v3.21 v3.20 v3.19 v3.18 v3.17 v3.16 v3.15 v3.14 v3.13 v3.12"


function releases_() {
    local REL=""
    local RELS=""
    RELS=$(web_pipe "https://dl-cdn.alpinelinux.org/alpine/" | grep '"v' | cut -d'"' -f2 | tr -d / | sort -Vr | head -n 10)
    for REL in ${RELS}; do
        if web_check "https://dl-cdn.alpinelinux.org/alpine/${REL}/releases/x86_64/"; then
            echo -n "${REL} "
        fi
    done
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://dl-cdn.alpinelinux.org/alpine/${RELEASE}/releases/x86_64"
    local VERSION=""
    VERSION=$(web_pipe "${URL}/latest-releases.yaml" | awk '/"Xen"/{found=0} {if(found) print} /"Virtual"/{found=1}' | grep 'version:' | awk '{print $2}')
    ISO="alpine-virt-${VERSION}-x86_64.iso"
    HASH=$(web_pipe "${URL}/latest-releases.yaml" | awk '/"Xen"/{found=0} {if(found) print} /"Virtual"/{found=1}' | grep 'sha256:' | awk '{print $2}')
    echo "${URL}/${ISO} ${HASH}"
}


android

android 9.0 x86_64:                  https://mirrors.gigenet.com/OSDN/android-x86/71931/android-x86_64-9.0-r2.iso
android 9.0 x86:                     https://mirrors.gigenet.com/OSDN/android-x86/71931/android-x86-9.0-r2.iso
android 8.1 x86_64:                  https://mirrors.gigenet.com/OSDN/android-x86/69704/android-x86_64-8.1-r6.iso
android 8.1 x86:                     https://mirrors.gigenet.com/OSDN/android-x86/69704/android-x86-8.1-r6.iso
android 7.1 x86_64:                  https://mirrors.gigenet.com/OSDN/android-x86/67834/android-x86_64-7.1-r5.iso
android 7.1 x86:                     https://mirrors.gigenet.com/OSDN/android-x86/67834/android-x86-7.1-r5.iso

# Template file for 'android'
OSNAME="android"
PRETTY="Android x86"
BASEDOF="-"
DESCRIPTION="Port Android Open Source Project to x86 platform"
HOMEPAGE="https://www.android-x86.org"
CREDENTIALS="-"


RELEASES="9.0 8.1 7.1"
EDITIONS="x86_64 x86"

function releases_() {
    echo 9.0 8.1 7.1
}

function editions_() {
    echo x86_64 x86
}

function get_() {
    local HASH=""
    local ISO=""
    local JSON_ALL=""
    local JSON_REL=""
    local URL="https://mirrors.gigenet.com/OSDN/android-x86"
    JSON_ALL=$(web_pipe "https://www.fosshub.com/Android-x86-old.html" | grep "var settings =" | cut -d'=' -f2-)
    JSON_REL=$(echo "${JSON_ALL}" | jq --arg ver "${OS}-${EDITION}-${RELEASE}" 'first(.pool.f[] | select((.n | startswith($ver)) and (.n | endswith(".iso"))))')
    ISO=$(echo "${JSON_REL}" | jq -r .n)
    HASH=$(echo "${JSON_REL}" | jq -r .hash.sha256)
    # Traverse the directories to find the .iso location
    for DIR in $(web_pipe "${URL}" | grep -o -E '[0-9]{5}' | sort -ur); do
        if web_pipe "${URL}/${DIR}" | grep "${ISO}" &>/dev/null; then
            URL="${URL}/${DIR}"
            break
        fi
    done
    echo "${URL}/${ISO} ${HASH}"
}


antix

antix 23.2 net-sysv:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.2/antiX-23.2-net_x64-net.iso
antix 23.2 core-sysv:                https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.2/antiX-23.2_x64-core.iso
antix 23.2 base-sysv:                https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.2/antiX-23.2_x64-base.iso
antix 23.2 full-sysv:                https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.2/antiX-23.2_x64-full.iso
antix 23.2 net-runit:                https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.2/runit-antiX-23.2/antiX-23.2-runit-net_x64-net.iso
antix 23.2 core-runit:               https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.2/runit-antiX-23.2/antiX-23.2-runit_x64-core.iso
antix 23.2 base-runit:               https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.2/runit-antiX-23.2/antiX-23.2-runit_x64-base.iso
antix 23.2 full-runit:               https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.2/runit-antiX-23.2/antiX-23.2-runit_x64-full.iso
antix 23.1 net-sysv:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.1/antiX-23.1-net_x64-net.iso
antix 23.1 core-sysv:                https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.1/antiX-23.1_x64-core.iso
antix 23.1 base-sysv:                https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.1/antiX-23.1_x64-base.iso
antix 23.1 full-sysv:                https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.1/antiX-23.1_x64-full.iso
antix 23.1 net-runit:                https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.1/runit-antiX-23.1/antiX-23.1-runit-net_x64-net.iso
antix 23.1 core-runit:               https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.1/runit-antiX-23.1/antiX-23.1-runit_x64-core.iso
antix 23.1 base-runit:               https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.1/runit-antiX-23.1/antiX-23.1-runit_x64-base.iso
antix 23.1 full-runit:               https://sourceforge.net/projects/antix-linux/files/Final/antiX-23.1/runit-antiX-23.1/antiX-23.1-runit_x64-full.iso
antix 23 net-sysv:                   https://sourceforge.net/projects/antix-linux/files/Final/antiX-23/antiX-23-net_x64-net.iso
antix 23 core-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-23/antiX-23_x64-core.iso
antix 23 base-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-23/antiX-23_x64-base.iso
antix 23 full-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-23/antiX-23_x64-full.iso
antix 23 net-runit:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-23/runit-antiX-23/antiX-23-runit-net_x64-net.iso
antix 23 core-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-23/runit-antiX-23/antiX-23-runit_x64-core.iso
antix 23 base-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-23/runit-antiX-23/antiX-23-runit_x64-base.iso
antix 23 full-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-23/runit-antiX-23/antiX-23-runit_x64-full.iso
antix 22 net-sysv:                   https://sourceforge.net/projects/antix-linux/files/Final/antiX-22/antiX-22-net_x64-net.iso
antix 22 core-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-22/antiX-22_x64-core.iso
antix 22 base-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-22/antiX-22_x64-base.iso
antix 22 full-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-22/antiX-22_x64-full.iso
antix 22 net-runit:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-22/runit-antiX-22/antiX-22-runit-net_x64-net.iso
antix 22 core-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-22/runit-antiX-22/antiX-22-runit_x64-core.iso
antix 22 base-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-22/runit-antiX-22/antiX-22-runit_x64-base.iso
antix 22 full-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-22/runit-antiX-22/antiX-22-runit_x64-full.iso
antix 21 net-sysv:                   https://sourceforge.net/projects/antix-linux/files/Final/antiX-21/antiX-21-net_x64-net.iso
antix 21 core-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-21/antiX-21_x64-core.iso
antix 21 base-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-21/antiX-21_x64-base.iso
antix 21 full-sysv:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-21/antiX-21_x64-full.iso
antix 21 net-runit:                  https://sourceforge.net/projects/antix-linux/files/Final/antiX-21/runit-bullseye/antiX-21-runit-net_x64-net.iso
antix 21 core-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-21/runit-bullseye/antiX-21-runit_x64-core.iso
antix 21 base-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-21/runit-bullseye/antiX-21-runit_x64-base.iso
antix 21 full-runit:                 https://sourceforge.net/projects/antix-linux/files/Final/antiX-21/runit-bullseye/antiX-21-runit_x64-full.iso

# Template file for 'antix'
OSNAME="antix"
PRETTY="Antix"
BASEDOF="Debian"
DESCRIPTION="Fast, lightweight and easy to install systemd-free linux live CD distribution based on Debian Stable for Intel-AMD x86 compatible systems"
HOMEPAGE="https://antixlinux.com"
CREDENTIALS="-"


RELEASES="23.2 23.1 23 22 21"
EDITIONS="net-sysv net-runit full-sysv full-runit core-sysv core-runit base-sysv base-runit"

function releases_() {
    echo 23.2 23.1 23 22 21
}

function editions_() {
    echo net-sysv core-sysv base-sysv full-sysv net-runit core-runit base-runit full-runit
}

function get_() {
    local HASH=""
    local ISO="antiX-${RELEASE}"
    local README="README"
    local URL="https://sourceforge.net/projects/antix-linux/files/Final/antiX-${RELEASE}"

    # antiX uses a different URL and ISO naming for runit editions
    if [[ "${EDITION}" == *"runit"* ]];then
        ISO+="-runit"
        README="README2"
        case ${RELEASE} in
            21) URL+="/runit-bullseye";;
            *)  URL+="/runit-antiX-${RELEASE}";;
        esac
    fi
    case ${EDITION} in
        base-*) ISO+="_x64-base.iso";;
        core-*) ISO+="_x64-core.iso";;
        full-*) ISO+="_x64-full.iso";;
        net-*)  ISO+="-net_x64-net.iso";;
    esac
    HASH=$(web_pipe "${URL}/${README}.txt" | grep "${ISO}" | cut -d' ' -f1 | head -n 1)
    echo "${URL}/${ISO} ${HASH}"
}


archcraft

archcraft latest:                    https://pilotfiber.dl.sourceforge.net/project/archcraft/v25.01/archcraft-2025.01.03-x86_64.iso

# Template file for 'archcraft'
OSNAME="archcraft"
PRETTY="Archcraft"
BASEDOF="Arch"
DESCRIPTION="Yet another minimal Linux distribution, based on Arch Linux"
HOMEPAGE="https://archcraft.io"
CREDENTIALS="-"


RELEASES="latest"


function releases_() {
    echo latest
}

function get_() {
    local HASH=""
    local URL=""
    URL="https://sourceforge.net/projects/archcraft/files/${RELEASE}/download"
    URL="$(web_redirect "${URL}" | cut -d? -f1)"
    echo "${URL} ${HASH}"
}


archlinux

archlinux latest:                    https://mirror.rackspace.com/archlinux/iso/2025.04.01/archlinux-2025.04.01-x86_64.iso

# Template file for 'archlinux'
OSNAME="archlinux"
PRETTY="Arch Linux"
BASEDOF="-"
DESCRIPTION="Lightweight and flexible LinuxÂ® distribution that tries to Keep It Simple"
HOMEPAGE="https://archlinux.org"
CREDENTIALS="-"


RELEASES="latest"


function releases_() {
    echo latest
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://mirror.rackspace.com/archlinux"
    ISO=$(web_pipe "https://archlinux.org/releng/releases/json/" | jq -r '.releases[0].iso_url')
    HASH=$(web_pipe "https://archlinux.org/releng/releases/json/" | jq -r '.releases[0].sha256_sum')
    echo "${URL}${ISO} ${HASH}"
}


arco

arco v25.05.01 net:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.05.01/arconet-v25.05.01-x86_64.iso
arco v25.05.01 plasma:               https://mirror.accum.se/mirror/arcolinux.info/iso/v25.05.01/arcoplasma-v25.05.01-x86_64.iso
arco v25.05.01 pro:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.05.01/arcopro-v25.05.01-x86_64.iso
arco v25.04.01 net:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.04.01/arconet-v25.04.01-x86_64.iso
arco v25.04.01 plasma:               https://mirror.accum.se/mirror/arcolinux.info/iso/v25.04.01/arcoplasma-v25.04.01-x86_64.iso
arco v25.04.01 pro:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.04.01/arcopro-v25.04.01-x86_64.iso
arco v25.03.05 net:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.03.05/arconet-v25.03.05-x86_64.iso
arco v25.03.05 plasma:               https://mirror.accum.se/mirror/arcolinux.info/iso/v25.03.05/arcoplasma-v25.03.05-x86_64.iso
arco v25.03.05 pro:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.03.05/arcopro-v25.03.05-x86_64.iso
arco v25.02.04 net:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.02.04/arconet-v25.02.04-x86_64.iso
arco v25.02.04 plasma:               https://mirror.accum.se/mirror/arcolinux.info/iso/v25.02.04/arcoplasma-v25.02.04-x86_64.iso
arco v25.02.04 pro:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.02.04/arcopro-v25.02.04-x86_64.iso
arco v25.01.05 net:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.01.05/arconet-v25.01.05-x86_64.iso
arco v25.01.05 plasma:               https://mirror.accum.se/mirror/arcolinux.info/iso/v25.01.05/arcoplasma-v25.01.05-x86_64.iso
arco v25.01.05 pro:                  https://mirror.accum.se/mirror/arcolinux.info/iso/v25.01.05/arcopro-v25.01.05-x86_64.iso

# Template file for 'arco'
OSNAME="arcolinux"
PRETTY="Arco Linux"
BASEDOF="Arch"
DESCRIPTION="Is all about becoming an expert in linux"
HOMEPAGE="https://arcolinux.com"
CREDENTIALS="-"


RELEASES="v25.05.01 v25.04.01 v25.03.05 v25.02.04 v25.01.05"
EDITIONS="pro plasma net"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://mirror.accum.se/mirror/arcolinux.info/iso/" | grep -o -E -e "v[[:digit:]]{2}.[[:digit:]]{2}.[[:digit:]]{2}" | sort -ru | head -n 5)
}

function editions_() {
    echo net plasma pro
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    URL="https://mirror.accum.se/mirror/arcolinux.info/iso/${RELEASE}"
    ISO="arco${EDITION}-${RELEASE}-x86_64.iso"
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


artixlinux

artixlinux 20250407 base-dinit:      https://iso.artixlinux.org/iso/artix-base-dinit-20250407-x86_64.iso
artixlinux 20250407 base-openrc:     https://iso.artixlinux.org/iso/artix-base-openrc-20250407-x86_64.iso
artixlinux 20250407 base-runit:      https://iso.artixlinux.org/iso/artix-base-runit-20250407-x86_64.iso
artixlinux 20250407 base-s6:         https://iso.artixlinux.org/iso/artix-base-s6-20250407-x86_64.iso
artixlinux 20250407 cinnamon-dinit:  https://iso.artixlinux.org/iso/artix-cinnamon-dinit-20250407-x86_64.iso
artixlinux 20250407 cinnamon-openrc: https://iso.artixlinux.org/iso/artix-cinnamon-openrc-20250407-x86_64.iso
artixlinux 20250407 cinnamon-runit:  https://iso.artixlinux.org/iso/artix-cinnamon-runit-20250407-x86_64.iso
artixlinux 20250407 cinnamon-s6:     https://iso.artixlinux.org/iso/artix-cinnamon-s6-20250407-x86_64.iso
artixlinux 20250407 community-gtk:   https://iso.artixlinux.org/iso/artix-community-gtk-20250407-x86_64.iso
artixlinux 20250407 community-qt:    https://iso.artixlinux.org/iso/artix-community-qt-20250407-x86_64.iso
artixlinux 20250407 lxde-dinit:      https://iso.artixlinux.org/iso/artix-lxde-dinit-20250407-x86_64.iso
artixlinux 20250407 lxde-openrc:     https://iso.artixlinux.org/iso/artix-lxde-openrc-20250407-x86_64.iso
artixlinux 20250407 lxde-runit:      https://iso.artixlinux.org/iso/artix-lxde-runit-20250407-x86_64.iso
artixlinux 20250407 lxde-s6:         https://iso.artixlinux.org/iso/artix-lxde-s6-20250407-x86_64.iso
artixlinux 20250407 lxqt-dinit:      https://iso.artixlinux.org/iso/artix-lxqt-dinit-20250407-x86_64.iso
artixlinux 20250407 lxqt-openrc:     https://iso.artixlinux.org/iso/artix-lxqt-openrc-20250407-x86_64.iso
artixlinux 20250407 lxqt-runit:      https://iso.artixlinux.org/iso/artix-lxqt-runit-20250407-x86_64.iso
artixlinux 20250407 lxqt-s6:         https://iso.artixlinux.org/iso/artix-lxqt-s6-20250407-x86_64.iso
artixlinux 20250407 mate-dinit:      https://iso.artixlinux.org/iso/artix-mate-dinit-20250407-x86_64.iso
artixlinux 20250407 mate-openrc:     https://iso.artixlinux.org/iso/artix-mate-openrc-20250407-x86_64.iso
artixlinux 20250407 mate-runit:      https://iso.artixlinux.org/iso/artix-mate-runit-20250407-x86_64.iso
artixlinux 20250407 mate-s6:         https://iso.artixlinux.org/iso/artix-mate-s6-20250407-x86_64.iso
artixlinux 20250407 plasma-dinit:    https://iso.artixlinux.org/iso/artix-plasma-dinit-20250407-x86_64.iso
artixlinux 20250407 plasma-openrc:   https://iso.artixlinux.org/iso/artix-plasma-openrc-20250407-x86_64.iso
artixlinux 20250407 plasma-runit:    https://iso.artixlinux.org/iso/artix-plasma-runit-20250407-x86_64.iso
artixlinux 20250407 plasma-s6:       https://iso.artixlinux.org/iso/artix-plasma-s6-20250407-x86_64.iso
artixlinux 20250407 xfce-dinit:      https://iso.artixlinux.org/iso/artix-xfce-dinit-20250407-x86_64.iso
artixlinux 20250407 xfce-openrc:     https://iso.artixlinux.org/iso/artix-xfce-openrc-20250407-x86_64.iso
artixlinux 20250407 xfce-runit:      https://iso.artixlinux.org/iso/artix-xfce-runit-20250407-x86_64.iso
artixlinux 20250407 xfce-s6:         https://iso.artixlinux.org/iso/artix-xfce-s6-20250407-x86_64.iso

# Template file for 'artixlinux'
OSNAME="artixlinux"
PRETTY="Artix Linux"
BASEDOF="Arch"
DESCRIPTION="The Art of Linux. Simple. Fast. Systemd-free"
HOMEPAGE="https://artixlinux.org"
CREDENTIALS="-"


RELEASES="20250407"
EDITIONS="xfce-s6 xfce-runit xfce-openrc xfce-dinit plasma-s6 plasma-runit plasma-openrc plasma-dinit mate-s6 mate-runit mate-openrc mate-dinit lxqt-s6 lxqt-runit lxqt-openrc lxqt-dinit lxde-s6 lxde-runit lxde-openrc lxde-dinit community-qt community-gtk cinnamon-s6 cinnamon-runit cinnamon-openrc cinnamon-dinit base-s6 base-runit base-openrc base-dinit"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://mirror1.artixlinux.org/iso/" | grep "artix-" | cut -d'"' -f2 | grep -v sig | cut -d'-' -f 4 | sort -ru | tail -n 1)
}

function editions_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://mirror1.artixlinux.org/iso/" | grep "artix-" | cut -d'"' -f2 | grep -v sig | cut -d'-' -f2-3 | sort -u)
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://iso.artixlinux.org/iso"
    ISO="artix-${EDITION}-${RELEASE}-x86_64.iso"
    HASH=$(web_pipe "${URL}/sha256sums" | grep "${ISO}")
    echo "${URL}/${ISO} ${HASH}"
}


athenaos

athenaos v23.06.23:                  https://github.com/Athena-OS/athena/releases/download/v23.06.23/athena-rolling-x86_64.iso
athenaos v23.11:                     https://github.com/Athena-OS/athena/releases/download/v23.11/athena-rolling-x86_64.iso

# Template file for 'athenaos'
OSNAME="athenaos"
PRETTY="Athena OS"
BASEDOF="Arch"
DESCRIPTION="Offer a different experience than the most used pentesting distributions by providing only tools that fit with the user needs and improving the access to hacking resources and learning materials"
HOMEPAGE="https://athenaos.org"
CREDENTIALS="-"


RELEASES="v23.11 v23.06.23"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://api.github.com/repos/Athena-OS/athena/releases" | grep 'download_url' | grep rolling | cut -d'/' -f8 | sort -u)
}

function get_() {
    local HASH=""
    local URL="https://github.com/Athena-OS/athena/releases/download/${RELEASE}"
    local ISO="athena-rolling-x86_64.iso"
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


batocera

batocera 41:                         https://mirrors.o2switch.fr/batocera/x86_64/stable/41/batocera-x86_64-41-20250106.img.gz
batocera 40:                         https://mirrors.o2switch.fr/batocera/x86_64/stable/40/batocera-x86_64-40-20240801.img.gz
batocera 39:                         https://mirrors.o2switch.fr/batocera/x86_64/stable/39/batocera-x86_64-x86_64-39-20240304.img.gz
batocera 38:                         https://mirrors.o2switch.fr/batocera/x86_64/stable/38/batocera-x86_64-x86_64-38-20231014.img.gz
batocera 37:                         https://mirrors.o2switch.fr/batocera/x86_64/stable/37/batocera-x86_64-37-20230617.img.gz

# Template file for 'batocera'
OSNAME="batocera"
PRETTY="Batocera"
BASEDOF="-"
DESCRIPTION="Retro-gaming distribution with the aim of turning any computer/nano computer into a gaming console during a game or permanently"
HOMEPAGE="https://batocera.org"
CREDENTIALS="-"
GUEST="batocera"
IMAGE_TYPE="img"
RELEASES="41 40 39 38 37"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://mirrors.o2switch.fr/batocera/x86_64/stable/" | grep ^\<a | cut -d'"' -f2 | cut -d '/' -f1 | grep -v '\.' | sort -ru | tail -n +2 | head -n 5)
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://mirrors.o2switch.fr/batocera/x86_64/stable/${RELEASE}"
    ISO="$(web_pipe "${URL}/" | grep -e 'batocera.*img.gz'| cut -d'"' -f2)"
    echo "${URL}/${ISO} ${HASH}"
}

function distro_specific() {
    if [[ ${ISO} = *".gz"* ]]; then
        gzip -d "${VM_PATH}/${ISO}"
        ISO="${ISO/.gz/}"
    fi
}

function specific_tweaks() {
    echo "disk_size=\"8G\"" >> "${CONF_FILE}"
}


bazzite

bazzite latest gnome:                https://download.bazzite.gg/bazzite-gnome-stable-amd64.iso
bazzite latest kde:                  https://download.bazzite.gg/bazzite-stable-amd64.iso

# Template file for 'bazzite'
OSNAME="bazzite"
PRETTY="bazzite"
BASEDOF="Fedora SteamOS"
DESCRIPTION="Container native gaming and a ready-to-game SteamOS like"
HOMEPAGE="https://bazzite.gg"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="kde gnome"

function releases_() {
    echo latest
}

function editions_() {
    echo gnome kde
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://download.bazzite.gg"
    case ${EDITION} in
        gnome) ISO="bazzite-gnome-stable-amd64.iso";;
        kde)  ISO="bazzite-stable-amd64.iso";;
    esac
    HASH=$(web_pipe "${URL}/${ISO}-CHECKSUM" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "disk_size=\"64G\"" >> "${CONF_FILE}"
}


biglinux

biglinux 2025-04-14 k614:            https://iso.biglinux.com.br/biglinux_2025-04-14_k614.iso
biglinux 2025-04-14 k612:            https://iso.biglinux.com.br/biglinux_2025-04-14_k612.iso
biglinux 2025-04-14 k66:             https://iso.biglinux.com.br/biglinux_2025-04-14_k66.iso

# Template file for 'biglinux'
OSNAME="biglinux"
PRETTY="BigLinux"
BASEDOF="Manjaro"
DESCRIPTION="Is the right choice if you want to have an easy and enriching experience with Linux. It has been perfected over more than 19 years, following our motto: 'In search of the perfect system'"
HOMEPAGE="https://www.biglinux.com.br"
CREDENTIALS="-"


RELEASES="2025-04-14"
EDITIONS="k66 k614 k612"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://iso.biglinux.com.br" | grep -Eo 'biglinux_[0-9]{4}(-[0-9]{2}){2}_k[0-9]{2,3}.iso' | cut -d'_' -f2 | sort -ru | head -n 1)
}

function editions_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://iso.biglinux.com.br" | grep -Eo "biglinux_$(releases_)_k[0-9]{2,3}.iso" | cut -d'_' -f3 | cut -d'.' -f1 | sort -Vru)
}

function get_() {
    local HASH=""
    local ISO="biglinux_${RELEASE}_${EDITION}.iso"
    local URL="https://iso.biglinux.com.br"
    HASH=$(web_pipe "${URL}/${ISO}.md5" | grep -Eo '[[:alnum:]]{32}')
    echo "${URL}/${ISO} ${HASH}"
}


blendos

blendos latest:                      https://git.blendos.co/api/v4/projects/32/jobs/artifacts/main/raw/blendOS.iso?job=build-job

# Template file for 'blendos'
OSNAME="blendos"
PRETTY="BlendOS"
BASEDOF="Arch"
DESCRIPTION="A seamless blend of all Linux distributions. Allows you to have an immutable, atomic and declarative Arch Linux system, with application support from several Linux distributions & Android"
HOMEPAGE="https://blendos.co"
CREDENTIALS="-"


RELEASES="latest"


function releases_() {
    # there is now just a single latest iso
    echo latest
}

function get_() {
    local HASH=$(web_pipe "https://git.blendos.co/api/v4/projects/32/jobs/artifacts/main/raw/checksum?job=build-job | cut -d' ' -f1")
    local ISO="blendOS.iso"
    local URL="https://git.blendos.co/api/v4/projects/32/jobs/artifacts/main/raw/${ISO}?job=build-job"
    echo "${URL} ${HASH}"
}


bodhi

bodhi 7.0.0 standard:                https://sourceforge.net/projects/bodhilinux/files/7.0.0/bodhi-7.0.0-64.iso
bodhi 7.0.0 hwe:                     https://sourceforge.net/projects/bodhilinux/files/7.0.0/bodhi-7.0.0-64-hwe.iso
bodhi 7.0.0 s76:                     https://sourceforge.net/projects/bodhilinux/files/7.0.0/bodhi-7.0.0-64-s76.iso
bodhi 7.0.0 apppack:                 https://sourceforge.net/projects/bodhilinux/files/7.0.0/bodhi-7.0.0-64-apppack.iso

# Template file for 'bodhi'
OSNAME="bodhi"
PRETTY="Bodhi Linux"
BASEDOF="Debian Ubuntu"
DESCRIPTION="Lightweight distribution featuring the fast & fully customizable Moksha Desktop"
HOMEPAGE="https://www.bodhilinux.com"
CREDENTIALS="-"


RELEASES="7.0.0"
EDITIONS="standard s76 hwe apppack"

function releases_() {
    echo 7.0.0
}

function editions_() {
    echo standard hwe s76 apppack
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://sourceforge.net/projects/bodhilinux/files/${RELEASE}"
    case ${EDITION} in
        standard) ISO="bodhi-${RELEASE}-64.iso";;
        *) ISO="bodhi-${RELEASE}-64-${EDITION}.iso";;
    esac
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


bunsenlabs

bunsenlabs boron:                    https://ddl.bunsenlabs.org/ddl/boron-1-240123-amd64.hybrid.iso

# Template file for 'bunsenlabs'
OSNAME="bunsenlabs"
PRETTY="Bunsenlabs"
BASEDOF="Debian"
DESCRIPTION="Light-weight and easily customizable Openbox desktop. The project is a community continuation of CrunchBang Linux"
HOMEPAGE="https://www.bunsenlabs.org"
CREDENTIALS="-"


RELEASES="boron"


function releases_() {
    echo boron
}

function get_() {
    local HASH=""
    local ISO="boron-1-240123-amd64.hybrid.iso"
    local URL="https://ddl.bunsenlabs.org/ddl"
    HASH=$(web_pipe "${URL}/release.sha256.txt" | head -n 1 | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


cachyos

cachyos latest desktop:              https://cdn77.cachyos.org/ISO/desktop/250330/cachyos-desktop-linux-250330.iso
cachyos latest handheld:             https://cdn77.cachyos.org/ISO/handheld/250330/cachyos-handheld-linux-250330.iso

# Template file for 'cachyos'
OSNAME="cachyos"
PRETTY="CachyOS"
BASEDOF="Arch"
DESCRIPTION="Designed to deliver lightning-fast speeds and stability, ensuring a smooth and enjoyable computing experience every time you use it"
HOMEPAGE="https://cachyos.org"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="handheld desktop"

function releases_() {
    # new cdn setup 10/2024
    echo latest
}

function editions_() {
    # desktop version now installs different desktop environments
    echo desktop handheld
}

function get_() {
    local HASH=""
    local URL=""
    URL="$(web_pipe "https://cachyos.org/download/" | tr '&' '\n' | grep "ISO/${EDITION}" | grep -v 'iso.sha' | grep -v 'iso.sig' | cut -d';' -f2)"
    HASH=$(web_pipe "${URL}.sha256" | cut -d' ' -f1)
    echo "${URL} ${HASH}"
}


centos-stream

centos-stream 10 boot:               https://linuxsoft.cern.ch/centos-stream/10-stream/BaseOS/x86_64/iso/CentOS-Stream-10-latest-x86_64-boot.iso
centos-stream 10 dvd1:               https://linuxsoft.cern.ch/centos-stream/10-stream/BaseOS/x86_64/iso/CentOS-Stream-10-latest-x86_64-dvd1.iso
centos-stream 9 boot:                https://linuxsoft.cern.ch/centos-stream/9-stream/BaseOS/x86_64/iso/CentOS-Stream-9-latest-x86_64-boot.iso
centos-stream 9 dvd1:                https://linuxsoft.cern.ch/centos-stream/9-stream/BaseOS/x86_64/iso/CentOS-Stream-9-latest-x86_64-dvd1.iso

# Template file for 'centos-stream'
OSNAME="centos-stream"
PRETTY="CentOS Stream"
BASEDOF="Fedora RedHat"
DESCRIPTION="Continuously delivered distro that tracks just ahead of Red Hat Enterprise Linux (RHEL) development, positioned as a midstream between Fedora Linux and RHEL"
HOMEPAGE="https://www.centos.org/centos-stream"
CREDENTIALS="-"


RELEASES="9 10"
EDITIONS="dvd1 boot"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://linuxsoft.cern.ch/centos-stream/" | grep "\-stream" | cut -d'"' -f 6 | cut -d'-' -f 1)
}

function editions_() {
    echo boot dvd1
}

function get_() {
    local HASH=""
    local ISO="CentOS-Stream-${RELEASE}-latest-x86_64-${EDITION}.iso"
    local URL="https://linuxsoft.cern.ch/centos-stream/${RELEASE}-stream/BaseOS/x86_64/iso"
    HASH=$(web_pipe "${URL}/${ISO}.SHA256SUM" | grep "SHA256 (${ISO}" | cut -d' ' -f4)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


cereus

cereus latest base:                  https://sourceforge.net/projects/cereus-linux/files/isos/beta/2023.02.19/base/cereus-beta-live-x86_64-musl-base-2023.02.17.iso
cereus latest musl-base:             https://sourceforge.net/projects/cereus-linux/files/isos/beta/2023.02.19/base/cereus-beta-live-x86_64-musl-base-2023.02.17.iso
cereus latest lxqt:                  https://sourceforge.net/projects/cereus-linux/files/isos/beta/2023.02.19/base/cereus-beta-live-x86_64-musl-base-2023.02.17.iso
cereus latest musl-lxqt:             https://sourceforge.net/projects/cereus-linux/files/isos/beta/2023.02.19/base/cereus-beta-live-x86_64-musl-base-2023.02.17.iso
cereus latest xfce:                  https://sourceforge.net/projects/cereus-linux/files/isos/beta/2023.02.19/base/cereus-beta-live-x86_64-musl-base-2023.02.17.iso
cereus latest musl-xfce:             https://sourceforge.net/projects/cereus-linux/files/isos/beta/2023.02.19/base/cereus-beta-live-x86_64-musl-base-2023.02.17.iso

# Template file for 'cereus'
OSNAME="cereus"
PRETTY="Cereus Linux"
BASEDOF="Void"
DESCRIPTION="Void-based distribution focused on give an user-friendly experience."
HOMEPAGE="https://sourceforge.net/projects/cereus-linux"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="xfce musl-xfce musl-lxqt musl-base lxqt base"

function releases_() {
    echo latest
}

function editions_() {
    echo base musl-base lxqt musl-lxqt xfce musl-xfce
}

function get_() {
    local EDITION="${1:-}"
    local HASH=""
    local DATE=""
    local ISO=""
    local URL="https://sourceforge.net/projects/cereus-linux/files"
    REST=$(web_pipe "https://sourceforge.net/projects/cereus-linux/rss?path=/isos/beta" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | grep "${EDITION}" | head -1)
    ISO=$(echo ${REST} | cut -d'/' -f5)
    case ${EDITION} in
        base) HASH=$(wget -q -O- "${URL}/SHA256SUM" | grep "${ISO}" | cut -d' ' -f1);;
        *) HASH=$(wget -q -O- "${URL}/SHA256" | grep "${ISO}" | cut -d' ' -f1);;
    esac
    echo "${URL}${REST} ${HASH}"
}


chimeralinux

chimeralinux latest base:            https://repo.chimera-linux.org/live/latest/chimera-linux-x86_64-LIVE-20250214-base.iso
chimeralinux latest gnome:           https://repo.chimera-linux.org/live/latest/chimera-linux-x86_64-LIVE-20250214-gnome.iso

# Template file for 'chimeralinux'
OSNAME="chimeralinux"
PRETTY="Chimera Linux"
BASEDOF="-"
DESCRIPTION="Modern, general-purpose non-GNU Linux distribution"
HOMEPAGE="https://chimera-linux.org"
CREDENTIALS="anon:chimera root:chimera"


RELEASES="latest"
EDITIONS="gnome base"

function releases_() {
    echo latest
}

function editions_() {
    echo base gnome
}

function get_() {
    local DATE=""
    local HASH=""
    local URL="https://repo.chimera-linux.org/live/${RELEASE}"
    DATE=$(web_pipe "${URL}/sha256sums.txt" | head -n1 | cut -d'-' -f5)
    local ISO="chimera-linux-x86_64-LIVE-${DATE}-${EDITION}.iso"
    HASH=$(web_pipe "${URL}/sha256sums.txt" | grep 'x86_64-LIVE' | grep "${EDITION}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


crunchbang++

crunchbang++ 12.0:                   https://github.com/CBPP/cbpp/releases/download/v12.0/cbpp-12.0-amd64-20230611.iso
crunchbang++ 11.2:                   https://github.com/CBPP/cbpp/releases/download/v11.2/cbpp-11.2-amd64-20230514.iso
crunchbang++ 10.1:                   https://github.com/CBPP/cbpp/releases/download/v10/cbpp-10.1-amd64-20190713.iso
crunchbang++ 9.0:                    https://github.com/CBPP/cbpp/releases/download/v9/cbpp-9.0-amd64-20170621.iso

# Template file for 'crunchbang++'
OSNAME="crunchbang++"
PRETTY="Crunchbangplusplus"
BASEDOF="Debian"
DESCRIPTION="The classic minimal crunchbang feel, now with debian 12 bookworm"
HOMEPAGE="https://www.crunchbangplusplus.org"
CREDENTIALS="-"


RELEASES="9.0 12.0 11.2 10.1"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://api.github.com/repos/CBPP/cbpp/releases" | grep 'download_url' | cut -d'-' -f2 | grep '^[0-9]' | sort -gru)
}

function get_() {
    local HASH=""
    local ISO=""
    ISO=$(web_pipe "https://api.github.com/repos/CBPP/cbpp/releases" | grep 'download_url' | grep amd64 | grep "${RELEASE}" | cut -d'"' -f4)
    echo "${ISO} ${HASH}"
}


debian

debian 12.10.0 standard:             https://cdimage.debian.org/debian-cd/12.10.0-live/amd64/iso-hybrid/debian-live-12.10.0-amd64-standard.iso
debian 12.10.0 cinnamon:             https://cdimage.debian.org/debian-cd/12.10.0-live/amd64/iso-hybrid/debian-live-12.10.0-amd64-cinnamon.iso
debian 12.10.0 gnome:                https://cdimage.debian.org/debian-cd/12.10.0-live/amd64/iso-hybrid/debian-live-12.10.0-amd64-gnome.iso
debian 12.10.0 kde:                  https://cdimage.debian.org/debian-cd/12.10.0-live/amd64/iso-hybrid/debian-live-12.10.0-amd64-kde.iso
debian 12.10.0 lxde:                 https://cdimage.debian.org/debian-cd/12.10.0-live/amd64/iso-hybrid/debian-live-12.10.0-amd64-lxde.iso
debian 12.10.0 lxqt:                 https://cdimage.debian.org/debian-cd/12.10.0-live/amd64/iso-hybrid/debian-live-12.10.0-amd64-lxqt.iso
debian 12.10.0 mate:                 https://cdimage.debian.org/debian-cd/12.10.0-live/amd64/iso-hybrid/debian-live-12.10.0-amd64-mate.iso
debian 12.10.0 xfce:                 https://cdimage.debian.org/debian-cd/12.10.0-live/amd64/iso-hybrid/debian-live-12.10.0-amd64-xfce.iso
debian 12.10.0 netinst:              https://cdimage.debian.org/debian-cd/12.10.0/amd64/iso-cd/debian-12.10.0-amd64-netinst.iso
debian 11.11.0 standard:             https://cdimage.debian.org/cdimage/archive/11.11.0-live/amd64/iso-hybrid/debian-live-11.11.0-amd64-standard.iso
debian 11.11.0 cinnamon:             https://cdimage.debian.org/cdimage/archive/11.11.0-live/amd64/iso-hybrid/debian-live-11.11.0-amd64-cinnamon.iso
debian 11.11.0 gnome:                https://cdimage.debian.org/cdimage/archive/11.11.0-live/amd64/iso-hybrid/debian-live-11.11.0-amd64-gnome.iso
debian 11.11.0 kde:                  https://cdimage.debian.org/cdimage/archive/11.11.0-live/amd64/iso-hybrid/debian-live-11.11.0-amd64-kde.iso
debian 11.11.0 lxde:                 https://cdimage.debian.org/cdimage/archive/11.11.0-live/amd64/iso-hybrid/debian-live-11.11.0-amd64-lxde.iso
debian 11.11.0 lxqt:                 https://cdimage.debian.org/cdimage/archive/11.11.0-live/amd64/iso-hybrid/debian-live-11.11.0-amd64-lxqt.iso
debian 11.11.0 mate:                 https://cdimage.debian.org/cdimage/archive/11.11.0-live/amd64/iso-hybrid/debian-live-11.11.0-amd64-mate.iso
debian 11.11.0 xfce:                 https://cdimage.debian.org/cdimage/archive/11.11.0-live/amd64/iso-hybrid/debian-live-11.11.0-amd64-xfce.iso
debian 11.11.0 netinst:              https://cdimage.debian.org/cdimage/archive/11.11.0/amd64/iso-cd/debian-11.11.0-amd64-netinst.iso
debian 10.13.0 standard:             https://cdimage.debian.org/cdimage/archive/10.13.0-live/amd64/iso-hybrid/debian-live-10.13.0-amd64-standard.iso
debian 10.13.0 cinnamon:             https://cdimage.debian.org/cdimage/archive/10.13.0-live/amd64/iso-hybrid/debian-live-10.13.0-amd64-cinnamon.iso
debian 10.13.0 gnome:                https://cdimage.debian.org/cdimage/archive/10.13.0-live/amd64/iso-hybrid/debian-live-10.13.0-amd64-gnome.iso
debian 10.13.0 kde:                  https://cdimage.debian.org/cdimage/archive/10.13.0-live/amd64/iso-hybrid/debian-live-10.13.0-amd64-kde.iso
debian 10.13.0 lxde:                 https://cdimage.debian.org/cdimage/archive/10.13.0-live/amd64/iso-hybrid/debian-live-10.13.0-amd64-lxde.iso
debian 10.13.0 lxqt:                 https://cdimage.debian.org/cdimage/archive/10.13.0-live/amd64/iso-hybrid/debian-live-10.13.0-amd64-lxqt.iso
debian 10.13.0 mate:                 https://cdimage.debian.org/cdimage/archive/10.13.0-live/amd64/iso-hybrid/debian-live-10.13.0-amd64-mate.iso
debian 10.13.0 xfce:                 https://cdimage.debian.org/cdimage/archive/10.13.0-live/amd64/iso-hybrid/debian-live-10.13.0-amd64-xfce.iso
debian 10.13.0 netinst:              https://cdimage.debian.org/cdimage/archive/10.13.0/amd64/iso-cd/debian-10.13.0-amd64-netinst.iso

# Template file for 'debian'
OSNAME="debian"
PRETTY="Debian"
BASEDOF="-"
DESCRIPTION="Complete Free Operating System with perfect level of ease of use and stability"
HOMEPAGE="https://www.debian.org"
CREDENTIALS="-"


RELEASES="12.10.0 11.11.0 10.13.0"
EDITIONS="xfce standard netinst mate lxqt lxde kde gnome cinnamon"

function releases_() {
    local ARCHIVE=""
    local MAJ=""
    local NEW=""
    local OLD=""
    NEW=$(web_pipe "https://cdimage.debian.org/debian-cd/" | grep '\.[0-9]/' | cut -d'>' -f 9 | cut -d'/' -f 1)
    echo -n "${NEW}"
    MAJ=$(echo "${NEW}" | cut -d'.' -f 1)
    ARCHIVE="$(web_pipe "https://cdimage.debian.org/cdimage/archive/" | grep folder | grep -v NEVER | cut -d'"' -f 6)"
    for i in {1..2}; do
        CUR=$((MAJ - i))
        OLD=$(grep ^"${CUR}"  <<< "${ARCHIVE}" | tail -n 1 | tr -d '/')
        echo -n " ${OLD}"
    done
    echo
}

function editions_() {
    echo standard cinnamon gnome kde lxde lxqt mate xfce netinst
}

function get_() {
    local DEBCURRENT=""
    local HASH=""
    local ISO="debian-live-${RELEASE}-amd64-${EDITION}.iso"
    local URL="https://cdimage.debian.org/cdimage/archive/${RELEASE}-live/amd64/iso-hybrid"
    DEBCURRENT=$(web_pipe "https://cdimage.debian.org/debian-cd/" | grep '\.[0-9]/' | cut -d'>' -f 9 | cut -d'/' -f 1)
    case "${RELEASE}" in
        "${DEBCURRENT}") URL="https://cdimage.debian.org/debian-cd/${RELEASE}-live/amd64/iso-hybrid";;
    esac
    if [ "${EDITION}" == "netinst" ]; then
        URL="${URL/-live/}"
        URL="${URL/hybrid/cd}"
        ISO="${ISO/-live/}"
    fi
    HASH=$(web_pipe "${URL}/SHA512SUMS" | grep "${ISO}" | cut -d' ' -f1 | head -n 1)
    echo "${URL}/${ISO} ${HASH}"
}


deepin

deepin 25-alpha:                     https://cdimage.deepin.com/releases/25-alpha/amd64/deepin-desktop-community-25-alpha-amd64.iso
deepin 23:                           https://cdimage.deepin.com/releases/23/amd64/deepin-desktop-community-23-amd64.iso
deepin 20.9:                         https://cdimage.deepin.com/releases/20.9/deepin-desktop-community-20.9-amd64.iso

# Template file for 'deepin'
OSNAME="deepin"
PRETTY="Deepin"
BASEDOF="Debian"
DESCRIPTION="Beautiful UI design, intimate human-computer interaction, and friendly community environment make you feel at home"
HOMEPAGE="https://www.deepin.org"
CREDENTIALS="-"


RELEASES="25-alpha 23 20.9"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://mirrors.kernel.org/deepin-cd/" | grep "href=" | cut -d'"' -f2 | grep -v "\.\." | grep -v nightly | grep -v preview | sed 's|/||g' | tail -n 10 | sort -r)
}

function get_() {
    local HASH=""
    local REV=${RELEASE}
    # deepin-desktop-community-20.3-amd64.iso
    local URL="https://cdimage.deepin.com/releases/"${RELEASE}
    # Correct URL for 23-RC onwards which has architecture directories
    if [ "${RELEASE}" != "20.9" ]; then
        URL+="/amd64"
    fi
    local ISO="deepin-desktop-community-${REV}-amd64.iso"
    HASH=$(web_pipe "${URL}/SHA256SUMS" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "disk_size=\"64G\"" >> "${CONF_FILE}"
    echo "ram=\"4G\"" >> "${CONF_FILE}"
}


devuan

devuan daedalus:                     https://files.devuan.org/devuan_daedalus/desktop-live/devuan_daedalus_5.0.0_amd64_desktop-live.iso
devuan chimaera:                     https://files.devuan.org/devuan_chimaera/desktop-live/devuan_chimaera_4.0.3_amd64_desktop-live.iso
devuan beowulf:                      https://files.devuan.org/devuan_beowulf/desktop-live/devuan_beowulf_3.1.1_amd64_desktop-live.iso

# Template file for 'devuan'
OSNAME="devuan"
PRETTY="Devuan"
BASEDOF="Debian"
DESCRIPTION="Fork of Debian without systemd that allows users to reclaim control over their system by avoiding unnecessary entanglements and ensuring Init Freedom"
HOMEPAGE="https://www.devuan.org"
CREDENTIALS="-"


RELEASES="daedalus chimaera beowulf"


function releases_() {
    echo daedalus chimaera beowulf
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://files.devuan.org/devuan_${RELEASE}/desktop-live"
    local VER=""
    case ${RELEASE} in
        beowulf)  VER="3.1.1";;
        chimaera) VER="4.0.3";;
        daedalus) VER="5.0.0";;
    esac
    ISO="devuan_${RELEASE}_${VER}_amd64_desktop-live.iso"
    HASH=$(web_pipe "${URL}/SHASUMS.txt" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


dietpi

dietpi bios Bookworm:                https://dietpi.com/downloads/images/DietPi_VM-x86_64-Bookworm_Installer.iso
dietpi bios Bullseye:                https://dietpi.com/downloads/images/DietPi_VM-x86_64-Bullseye_Installer.iso
dietpi bios Trixie:                  https://dietpi.com/downloads/images/DietPi_VM-x86_64-Trixie_Installer.iso
dietpi uefi Bookworm:                https://dietpi.com/downloads/images/DietPi_VM-UEFI-x86_64-Bookworm_Installer.iso
dietpi uefi Bullseye:                https://dietpi.com/downloads/images/DietPi_VM-UEFI-x86_64-Bullseye_Installer.iso
dietpi uefi Trixie:                  https://dietpi.com/downloads/images/DietPi_VM-UEFI-x86_64-Trixie_Installer.iso

# Template file for 'dietpi'
OSNAME="dietpi"
PRETTY="DietPi"
BASEDOF="Debian"
DESCRIPTION="Highly optimised minimal Debian OS"
HOMEPAGE="https://dietpi.com"
CREDENTIALS="-"


RELEASES="uefi bios"
EDITIONS="Trixie Bullseye Bookworm"

function releases_() {
    echo bios uefi
}

function editions_() {
    echo $(web_pipe "https://dietpi.com/downloads/images/" | grep '\.iso"' | cut -d'"' -f2 | grep '_VM-UEFI' | cut -d'-' -f4 | cut -d'_' -f1)
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://dietpi.com/downloads/images"
    if [ "${RELEASE}" == 'bios' ]; then
        local ISO="DietPi_VM-x86_64-${EDITION}_Installer.iso"
    elif [ "${RELEASE}" == 'uefi' ]; then
        local ISO="DietPi_VM-UEFI-x86_64-${EDITION}_Installer.iso"
    fi
    HASH=$(wget -q -O- "${URL}/SHASUMS.txt" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    if [[ "${RELEASE}" == 'bios' ]]; then
        echo "boot=\"legacy\"" >> "${CONF_FILE}"
    fi
}


dragonflybsd

dragonflybsd 6.4.0:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.4.0_REL.iso.bz2
dragonflybsd 6.2.2:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.2.2_REL.iso.bz2
dragonflybsd 6.2.1:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.2.1_REL.iso.bz2
dragonflybsd 6.0.1:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.0.1_REL.iso.bz2
dragonflybsd 6.0.0:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-6.0.0_REL.iso.bz2
dragonflybsd 5.8.3:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.8.3_REL.iso.bz2
dragonflybsd 5.8.2:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.8.2_REL.iso.bz2
dragonflybsd 5.8.1:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.8.1_REL.iso.bz2
dragonflybsd 5.6.3:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.6.3_REL.iso.bz2
dragonflybsd 5.8.0:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.8.0_REL.iso.bz2
dragonflybsd 5.6.2:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.6.2_REL.iso.bz2
dragonflybsd 5.6.1:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.6.1_REL.iso.bz2
dragonflybsd 5.6.0:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.6.0_REL.iso.bz2
dragonflybsd 5.4.3:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.4.3_REL.iso.bz2
dragonflybsd 5.4.2:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.4.2_REL.iso.bz2
dragonflybsd 5.4.1:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.4.1_REL.iso.bz2
dragonflybsd 5.4.0:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.4.0_REL.iso.bz2
dragonflybsd 5.2.2:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.2.2_REL.iso.bz2
dragonflybsd 5.2.1:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.2.1_REL.iso.bz2
dragonflybsd 5.2.0:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.2.0_REL.iso.bz2
dragonflybsd 5.0.2:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.0.2_REL.iso.bz2
dragonflybsd 5.0.1:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.0.1_REL.iso.bz2
dragonflybsd 5.0.0:                  http://mirror-master.dragonflybsd.org/iso-images/dfly-x86_64-5.0.0_REL.iso.bz2

# Template file for 'dragonflybsd'
OSNAME="dragonflybsd"
PRETTY="DragonFlyBSD"
BASEDOF="FreeBSD"
DESCRIPTION="Provides an opportunity for the BSD base to grow in an entirely different direction from the one taken in the FreeBSD, NetBSD, and OpenBSD series"
HOMEPAGE="https://www.dragonflybsd.org"
CREDENTIALS="-"
GUEST="dragonflybsd"

RELEASES="6.4.0 6.2.2 6.2.1 6.0.1 6.0.0 5.8.3 5.8.2 5.8.1 5.8.0 5.6.3 5.6.2 5.6.1 5.6.0 5.4.3 5.4.2 5.4.1 5.4.0 5.2.2 5.2.1 5.2.0 5.0.2 5.0.1 5.0.0"


function releases_() {
    # If you remove "".bz2" from the end of the searched URL, you will get only the current release - currently 6.4.0
    # We could add a variable so this behaviour is optional/switchable (maybe from option or env)
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://mirror-master.dragonflybsd.org/iso-images/" | grep -E -o '"dfly-x86_64-.*_REL.iso.bz2"' | grep -o -E '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+')
}

function get_() {
    local HASH=""
    local ISO="dfly-x86_64-${RELEASE}_REL.iso.bz2"
    local URL="http://mirror-master.dragonflybsd.org/iso-images"
    HASH=$(web_pipe "${URL}/md5.txt" | grep "(${ISO})" | cut -d' ' -f4)
    echo "${URL}/${ISO} ${HASH}"
}

function distro_specific() {
    #  Could be other OS iso files compressed with bzip2 or gzip
    #  but for now we'll keep this to know cases
    if [[ ${ISO} = *".bz2"* ]]; then
        bzip2 -d  "${VM_PATH}/${ISO}"
        ISO="${ISO/.bz2/}"
    fi
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
}


dsl

dsl 2024.rc7 lz4:                    https://www.damnsmalllinux.org/download/dsl-2024.rc7.lz4.iso
dsl 2024.rc7 cdrom:                  https://www.damnsmalllinux.org/download/dsl-2024.rc7.iso

# Template file for 'dsl'
OSNAME="dsl"
PRETTY="Damn Small Linux"
BASEDOF="Antix"
DESCRIPTION="Goal of DSL is to pack as much usable desktop distribution into an image small enough to fit on a single CD"
HOMEPAGE="https://www.damnsmalllinux.org/"
CREDENTIALS="-"


RELEASES="2024.rc7"
EDITIONS="lz4 cdrom"

function releases_() {
    echo 2024.rc7
}

function editions_() {
    echo lz4 cdrom
}

function get_() {
    local ISO=""
    local HASH=""
    local URL="https://www.damnsmalllinux.org/download"
    case "$EDITION" in
      lz4) ISO="dsl-${RELEASE}.lz4.iso";;
      cdrom) ISO="dsl-${RELEASE}.iso";;
    esac
    HASH=$(web_pipe "${URL}/${ISO}.md5.txt" | cut -f1)
    echo "${URL}/${ISO} ${HASH}"
}


easyos

easyos 5.8.5:                        https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/2025/5.8.5/easy-5.8.5-amd64.img
easyos 5.8.5:                        https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/2025/5.8.5/easy-5.8.5-amd64.img

# Template file for 'easyos'
OSNAME="easyos"
PRETTY="EasyOS"
BASEDOF="-"
DESCRIPTION="Experimental distribution designed from scratch to support containers"
HOMEPAGE="https://easyos.org"
CREDENTIALS="-"

IMAGE_TYPE="img"
RELEASES="5.8.5"


function releases_() {
    local ALL_RELEASES=""
    local YEAR=""
    # get the latest 2 years of releases so that when we hit next year we still have the latest 2 years
    TWO_YEARS=$(web_pipe https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/ | grep -o -E '[[:digit:]]{4}/' | sort -nr | tr -d /  | head -n 2 )
    for YEAR in ${TWO_YEARS} ; do
        ALL_RELEASES="${ALL_RELEASES} $(web_pipe https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/${YEAR}/ | grep -o -E '[[:digit:]]+(\.[[:digit:]])+/' | tr -d / | sort -nr)"
    done
    echo ${ALL_RELEASES}
}

function get_() {
    local HASH=""
    local URL=""
    local ISO=""
    local YEAR=""
    ISO="easy-${RELEASE}-amd64.img"
    TWO_YEARS=$(web_pipe https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/ | grep -o -E '[[:digit:]]{4}/' | sort -nr | tr -d /  | head -n 2 )
    for YEAR in ${TWO_YEARS} ; do
        if web_check "https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/${YEAR}/${RELEASE}/" ; then
            URL="https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/${YEAR}/${RELEASE}"
            HASH=$(web_pipe "${URL}/md5.sum.txt" | cut -d' ' -f1)
            break
        fi
    done
    echo "${URL}/${ISO} ${HASH}"
}

function distro_specific() {
    if [[ ${ISO} = *".img"* ]]; then
        ${QEMU_IMG} convert -f raw -O qcow2 "${VM_PATH}/${ISO}" "${VM_PATH}/disk.qcow2"
        ISO="${ISO/.img/}"
    fi
}


edubuntu

edubuntu 24.04:                      https://cdimage.ubuntu.com/edubuntu/releases/24.04/release/edubuntu-24.04.2-desktop-amd64.iso
edubuntu 24.10:                      https://cdimage.ubuntu.com/edubuntu/releases/24.10/release/edubuntu-24.10-desktop-amd64.iso
edubuntu daily-live:                 https://cdimage.ubuntu.com/edubuntu/daily-live/current/plucky-desktop-amd64.iso

# Template file for 'edubuntu'
OSNAME="edubuntu"
PRETTY="Edubuntu"
BASEDOF="Ubuntu"
DESCRIPTION="Stable, secure and privacy concious option for schools"
HOMEPAGE="https://www.edubuntu.org"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


elementary

elementary 8.0:                      https://ams3.dl.elementary.io/download/MTc0NDY5MDgxOQo=/elementaryos-8.0-stable.20241122rc.iso
elementary 7.1:                      https://ams3.dl.elementary.io/download/MTc0NDY5MDgxOQo=/elementaryos-7.1-stable.20230926rc.iso
elementary 7.0:                      https://ams3.dl.elementary.io/download/MTc0NDY5MDgxOQo=/elementaryos-7.0-stable.20230129rc.iso

# Template file for 'elementary'
OSNAME="elementary"
PRETTY="elementary OS"
BASEDOF="Debian Ubuntu"
DESCRIPTION="Thoughtful, capable, and ethical replacement for Windows and macOS"
HOMEPAGE="https://elementary.io"
CREDENTIALS="-"


RELEASES="8.0 7.1 7.0"


function releases_() {
    echo 8.0 7.1 7.0
}

function get_() {
    local HASH=""
    case ${RELEASE} in
        7.0) STAMP="20230129rc";;
        7.1) STAMP="20230926rc";;
        8.0) STAMP="20241122rc";;
    esac
    local ISO="elementaryos-${RELEASE}-stable.${STAMP}.iso"
    local URL="https://ams3.dl.elementary.io/download"
    echo "${URL}/$(date +%s | base64)/${ISO} ${HASH}"
}


endeavouros

endeavouros mercury-neo-2025.03.19:  https://mirror.alpix.eu/endeavouros/iso/EndeavourOS_Mercury-Neo-2025.03.19.iso
endeavouros mercury-2025.02.08:      https://mirror.alpix.eu/endeavouros/iso/EndeavourOS_Mercury-2025.02.08.iso
endeavouros gemini-2024.04.20:       https://mirror.alpix.eu/endeavouros/iso/EndeavourOS_Gemini-2024.04.20.iso
endeavouros galileo-neo-2024.01.25:  https://mirror.alpix.eu/endeavouros/iso/EndeavourOS_Galileo-Neo-2024.01.25.iso
endeavouros galileo-11-2023:         https://mirror.alpix.eu/endeavouros/iso/Endeavouros-Galileo-11-2023.iso

# Template file for 'endeavouros'
OSNAME="endeavouros"
PRETTY="EndeavourOS"
BASEDOF="Arch"
DESCRIPTION="Provides an Arch experience without the hassle of installing it manually for both x86_64 and ARM systems"
HOMEPAGE="https://endeavouros.com"
CREDENTIALS="-"


RELEASES="mercury-neo-2025.03.19 mercury-2025.02.08 gemini-2024.04.20 galileo-neo-2024.01.25 galileo-11-2023"


function releases_() {
    local ENDEAVOUR_RELEASES=""
    ENDEAVOUR_RELEASES="$(web_pipe "https://mirror.alpix.eu/endeavouros/iso/" | grep -o '<a href="[^"]*.iso">' | sed 's/^<a href="//;s/.iso">.*//' | grep -v 'x86_64' | LC_ALL="en_US.UTF-8" sort -Mr | cut -c 13- | head -n 5 | tr '\n' ' ')"
    echo "${ENDEAVOUR_RELEASES,,}"
}

function get_() {
    local ENDEAVOUR_RELEASES=""
    local HASH=""
    local ISO=""
    local URL="https://mirror.alpix.eu/endeavouros/iso"
    # Find EndeavourOS releases from mirror, pick one matching release
    ENDEAVOUR_RELEASES="$(web_pipe "${URL}/" | grep -o '<a href="[^"]*.iso">' | sed 's/^<a href="//;s/.iso">.*//' | grep -v 'x86_64')"
    ISO="$(echo "${ENDEAVOUR_RELEASES}" | grep -i "${RELEASE}").iso"
    HASH=$(web_pipe "${URL}/${ISO}.sha512sum" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


endless

endless 6.0.4 base:                  https://images-dl.endlessm.com/release/6.0.4/eos-amd64-amd64/base/eos-eos6.0-amd64-amd64.241023-183516.base.iso
endless 6.0.4 en:                    https://images-dl.endlessm.com/release/6.0.4/eos-amd64-amd64/en/eos-eos6.0-amd64-amd64.241023-200926.en.iso
endless 6.0.4 fr:                    https://images-dl.endlessm.com/release/6.0.4/eos-amd64-amd64/fr/eos-eos6.0-amd64-amd64.241023-191212.fr.iso
endless 6.0.4 pt_BR:                 https://images-dl.endlessm.com/release/6.0.4/eos-amd64-amd64/pt_BR/eos-eos6.0-amd64-amd64.241023-191427.pt_BR.iso
endless 6.0.4 es:                    https://images-dl.endlessm.com/release/6.0.4/eos-amd64-amd64/es/eos-eos6.0-amd64-amd64.241023-184649.es.iso

# Template file for 'endless'
OSNAME="endless"
PRETTY="Endless OS"
BASEDOF="Debian"
DESCRIPTION="Completely Free, User-Friendly Operating System Packed with Educational Tools, Games, and More"
HOMEPAGE="https://www.endlessos.org/os"
CREDENTIALS="-"


RELEASES="6.0.4"
EDITIONS="pt_BR fr es en base"

function releases_() {
    echo 6.0.4
}

function editions_() {
    echo base en fr pt_BR es
}

function get_() {
    local HASH="" # No hash - there is a signature in .asc signed by
    #https://d1anzknqnc1kmb.cloudfront.net/eos-image-keyring.gpg
    # (4096R: CB50 0F7B C923 3FAD 32B4 E720 9E0C 1250 587A 279C)
    local FILE_TS=""
    # https://support.endlessos.org/en/installation/direct-download gives the info but computes the URLS in js
    # so parsing out the useful info is not happening tonight
    # Endless edition names are "base" for the small minimal one or the Language for the large full release
    # The isos are stamped as they are finished so ....
    case ${EDITION} in
        base)  FILE_TS="241023-183516";;
        en)    FILE_TS="241023-200926";;
        es)    FILE_TS="241023-184649";;
        fr)    FILE_TS="241023-191212";;
        pt_BR) FILE_TS="241023-191427";;
    esac
    URL="https://images-dl.endlessm.com/release/${RELEASE}/eos-amd64-amd64/${EDITION}"
    ISO="eos-eos${RELEASE:0:3}-amd64-amd64.${FILE_TS}.${EDITION}.iso"
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
  echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


fedora

fedora 42_Beta Budgie:               https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-Budgie-Live-42_Beta-1.4.x86_64.iso
fedora 42_Beta COSMIC:               https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-COSMIC-Live-42_Beta-1.4.x86_64.iso
fedora 42_Beta Cinnamon:             https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-Cinnamon-Live-x86_64-42_Beta-1.4.iso
fedora 42_Beta KDE:                  
fedora 42_Beta KDE_Mobile:           https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-KDE-Mobile-Live-42_Beta-1.4.x86_64.iso
fedora 42_Beta Kinoite:              https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Kinoite/x86_64/iso/Fedora-Kinoite-ostree-x86_64-42_Beta-1.4.iso
fedora 42_Beta LXDE:                 https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-LXDE-Live-x86_64-42_Beta-1.4.iso
fedora 42_Beta LXQt:                 https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-LXQt-Live-42_Beta-1.4.x86_64.iso
fedora 42_Beta Mate:                 https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-MATE_Compiz-Live-x86_64-42_Beta-1.4.iso
fedora 42_Beta MiracleWM:            https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-MiracleWM-Live-42_Beta-1.4.x86_64.iso
fedora 42_Beta Onyx:                 https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Onyx/x86_64/iso/Fedora-Onyx-ostree-x86_64-42_Beta-1.4.iso
fedora 42_Beta Sericea:              https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Sericea/x86_64/iso/Fedora-Sericea-ostree-x86_64-42_Beta-1.4.iso
fedora 42_Beta Server:               https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Server/x86_64/iso/Fedora-Server-dvd-x86_64-42_Beta-1.4.iso
fedora 42_Beta Silverblue:           https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Silverblue/x86_64/iso/Fedora-Silverblue-ostree-x86_64-42_Beta-1.4.iso
fedora 42_Beta Sway:                 https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-Sway-Live-x86_64-42_Beta-1.4.iso
fedora 42_Beta Workstation:          https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Workstation/x86_64/iso/Fedora-Workstation-Live-42_Beta-1.4.x86_64.iso
fedora 42_Beta Xfce:                 https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-Xfce-Live-42_Beta-1.4.x86_64.iso
fedora 42_Beta i3:                   https://download.fedoraproject.org/pub/fedora/linux/releases/test/42_Beta/Spins/x86_64/iso/Fedora-i3-Live-x86_64-42_Beta-1.4.iso
fedora 41 Budgie:                    https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-Budgie-Live-x86_64-41-1.4.iso
fedora 41 Cinnamon:                  https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-Cinnamon-Live-x86_64-41-1.4.iso
fedora 41 KDE:                       https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-KDE-Live-x86_64-41-1.4.iso
fedora 41 KDE_Mobile:                https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-KDE-Mobile-Live-41-1.4.x86_64.iso
fedora 41 Kinoite:                   https://download.fedoraproject.org/pub/fedora/linux/releases/41/Kinoite/x86_64/iso/Fedora-Kinoite-ostree-x86_64-41-1.4.iso
fedora 41 LXDE:                      https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-LXDE-Live-x86_64-41-1.4.iso
fedora 41 LXQt:                      https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-LXQt-Live-x86_64-41-1.4.iso
fedora 41 Mate:                      https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-MATE_Compiz-Live-x86_64-41-1.4.iso
fedora 41 MiracleWM:                 https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-MiracleWM-Live-41-1.4.x86_64.iso
fedora 41 Onyx:                      https://download.fedoraproject.org/pub/fedora/linux/releases/41/Onyx/x86_64/iso/Fedora-Onyx-ostree-x86_64-41-1.4.iso
fedora 41 Sericea:                   https://download.fedoraproject.org/pub/fedora/linux/releases/41/Sericea/x86_64/iso/Fedora-Sericea-ostree-x86_64-41-1.4.iso
fedora 41 Server:                    https://download.fedoraproject.org/pub/fedora/linux/releases/41/Server/x86_64/iso/Fedora-Server-dvd-x86_64-41-1.4.iso
fedora 41 Silverblue:                https://download.fedoraproject.org/pub/fedora/linux/releases/41/Silverblue/x86_64/iso/Fedora-Silverblue-ostree-x86_64-41-1.4.iso
fedora 41 Sway:                      https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-Sway-Live-x86_64-41-1.4.iso
fedora 41 Workstation:               https://download.fedoraproject.org/pub/fedora/linux/releases/41/Workstation/x86_64/iso/Fedora-Workstation-Live-x86_64-41-1.4.iso
fedora 41 Xfce:                      https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-Xfce-Live-x86_64-41-1.4.iso
fedora 41 i3:                        https://download.fedoraproject.org/pub/fedora/linux/releases/41/Spins/x86_64/iso/Fedora-i3-Live-x86_64-41-1.4.iso
fedora 40 Budgie:                    https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-Budgie-Live-x86_64-40-1.14.iso
fedora 40 Cinnamon:                  https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-Cinnamon-Live-x86_64-40-1.14.iso
fedora 40 KDE:                       https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-KDE-Live-x86_64-40-1.14.iso
fedora 40 Kinoite:                   https://download.fedoraproject.org/pub/fedora/linux/releases/40/Kinoite/x86_64/iso/Fedora-Kinoite-ostree-x86_64-40-1.14.iso
fedora 40 LXDE:                      https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-LXDE-Live-x86_64-40-1.14.iso
fedora 40 LXQt:                      https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-LXQt-Live-x86_64-40-1.14.iso
fedora 40 Mate:                      https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-MATE_Compiz-Live-x86_64-40-1.14.iso
fedora 40 Onyx:                      https://download.fedoraproject.org/pub/fedora/linux/releases/40/Onyx/x86_64/iso/Fedora-Onyx-ostree-x86_64-40-1.14.iso
fedora 40 Sericea:                   https://download.fedoraproject.org/pub/fedora/linux/releases/40/Sericea/x86_64/iso/Fedora-Sericea-ostree-x86_64-40-1.14.iso
fedora 40 Server:                    https://download.fedoraproject.org/pub/fedora/linux/releases/40/Server/x86_64/iso/Fedora-Server-dvd-x86_64-40-1.14.iso
fedora 40 Silverblue:                https://download.fedoraproject.org/pub/fedora/linux/releases/40/Silverblue/x86_64/iso/Fedora-Silverblue-ostree-x86_64-40-1.14.iso
fedora 40 Sway:                      https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-Sway-Live-x86_64-40-1.14.iso
fedora 40 Workstation:               https://download.fedoraproject.org/pub/fedora/linux/releases/40/Workstation/x86_64/iso/Fedora-Workstation-Live-osb-40-1.14.x86_64.iso
fedora 40 Xfce:                      https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-Xfce-Live-x86_64-40-1.14.iso
fedora 40 i3:                        https://download.fedoraproject.org/pub/fedora/linux/releases/40/Spins/x86_64/iso/Fedora-i3-Live-x86_64-40-1.14.iso
fedora 39 Budgie:                    https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-Budgie-Live-x86_64-39-1.5.iso
fedora 39 Cinnamon:                  https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-Cinnamon-Live-x86_64-39-1.5.iso
fedora 39 KDE:                       https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-KDE-Live-x86_64-39-1.5.iso
fedora 39 Kinoite:                   https://download.fedoraproject.org/pub/fedora/linux/releases/39/Kinoite/x86_64/iso/Fedora-Kinoite-ostree-x86_64-39-1.5.iso
fedora 39 LXDE:                      https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-LXDE-Live-x86_64-39-1.5.iso
fedora 39 LXQt:                      https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-LXQt-Live-x86_64-39-1.5.iso
fedora 39 Mate:                      https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-MATE_Compiz-Live-x86_64-39-1.5.iso
fedora 39 Server:                    https://download.fedoraproject.org/pub/fedora/linux/releases/39/Server/x86_64/iso/Fedora-Server-dvd-x86_64-39-1.5.iso
fedora 39 Silverblue:                https://download.fedoraproject.org/pub/fedora/linux/releases/39/Silverblue/x86_64/iso/Fedora-Silverblue-ostree-x86_64-39-1.5.iso
fedora 39 Sway:                      https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-Sway-Live-x86_64-39-1.5.iso
fedora 39 Workstation:               https://download.fedoraproject.org/pub/fedora/linux/releases/39/Workstation/x86_64/iso/Fedora-Workstation-Live-x86_64-39-1.5.iso
fedora 39 Xfce:                      https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-Xfce-Live-x86_64-39-1.5.iso
fedora 39 i3:                        https://download.fedoraproject.org/pub/fedora/linux/releases/39/Spins/x86_64/iso/Fedora-i3-Live-x86_64-39-1.5.iso

# Template file for 'fedora'
OSNAME="fedora"
PRETTY="Fedora"
BASEDOF="-"
DESCRIPTION="Innovative platform for hardware, clouds, and containers, built with love by you"
HOMEPAGE="https://www.fedoraproject.org"
CREDENTIALS="-"


RELEASES="42_Beta 41 40 39"
EDITIONS="i3 Xfce Workstation Sway Silverblue Server Sericea Onyx MiracleWM Mate LXQt LXDE Kinoite KDE_Mobile KDE Cinnamon COSMIC Budgie"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://getfedora.org/releases.json" | jq -r 'map(.version) | unique | .[]' | sed 's/ /_/g' | sort -r)
}

function editions_() {
    #shellcheck disable=SC2046,SC2005
    if [[ -z ${RELEASE} ]]; then
          echo $(web_pipe "https://getfedora.org/releases.json" | jq -r "map(select(.arch==\"x86_64\" and .variant!=\"Labs\" and .variant!=\"IoT\" and .variant!=\"Container\" and .variant!=\"Cloud\" and .variant!=\"Everything\"  and .subvariant!=\"Security\" and .subvariant!=\"Server_KVM\" and .subvariant!=\"SoaS\")) | map(.subvariant) | unique | .[]")
    else
        echo $(web_pipe "https://getfedora.org/releases.json" | jq -r "map(select(.arch==\"x86_64\" and .version==\"${RELEASE/_/ }\" and .variant!=\"Labs\" and .variant!=\"IoT\" and .variant!=\"Container\" and .variant!=\"Cloud\" and .variant!=\"Everything\"  and .subvariant!=\"Security\" and .subvariant!=\"Server_KVM\" and .subvariant!=\"SoaS\")) | map(.subvariant) | unique | .[]")
    fi
}

function get_() {
    local HASH=""
    local ISO=""
    local JSON=""
    local URL=""
    local VARIANT=""
    case ${EDITION} in
        Server|Kinoite|Onyx|Silverblue|Sericea|Workstation) VARIANT="${EDITION}";;
        *) VARIANT="Spins";;
    esac
    # The naming of 41 Beta with a space is problematic so we replaced it with an underscore
    # but we need to convert it back to a space for the URL search in the JSON
    #shellcheck disable=SC2086
    # if RELEASE contains an underscore, replace it with a space
     if [[ "${RELEASE}" == *"_"* ]]; then
        RELEASE="${RELEASE/_/ }"
    fi

    # shellcheck disable=SC2086
    JSON=$(web_pipe "https://getfedora.org/releases.json" | jq '.[] | select(.variant=="'${VARIANT}'" and .subvariant=="'"${EDITION}"'" and .arch=="x86_64" and .version=="'"${RELEASE}"'" and (.link | endswith(".iso")))')
    URL=$(echo "${JSON}" | jq -r '.link' | head -n1)
    HASH=$(echo "${JSON}" | jq -r '.sha256' | head -n1)
    echo "${URL} ${HASH}"
}


freebsd

freebsd 14.2 disc1:                  https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/14.2/FreeBSD-14.2-RELEASE-amd64-disc1.iso
freebsd 14.2 dvd1:                   https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/14.2/FreeBSD-14.2-RELEASE-amd64-dvd1.iso
freebsd 14.1 disc1:                  https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/14.1/FreeBSD-14.1-RELEASE-amd64-disc1.iso
freebsd 14.1 dvd1:                   https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/14.1/FreeBSD-14.1-RELEASE-amd64-dvd1.iso
freebsd 13.5 disc1:                  https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/13.5/FreeBSD-13.5-RELEASE-amd64-disc1.iso
freebsd 13.5 dvd1:                   https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/13.5/FreeBSD-13.5-RELEASE-amd64-dvd1.iso
freebsd 13.4 disc1:                  https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/13.4/FreeBSD-13.4-RELEASE-amd64-disc1.iso
freebsd 13.4 dvd1:                   https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/13.4/FreeBSD-13.4-RELEASE-amd64-dvd1.iso

# Template file for 'freebsd'
OSNAME="freebsd"
PRETTY="FreeBSD"
BASEDOF="-"
DESCRIPTION="Operating system used to power modern servers, desktops, and embedded platforms"
HOMEPAGE="https://www.freebsd.org"
CREDENTIALS="-"
freebsd

RELEASES="14.2 14.1 13.5 13.4"
EDITIONS="dvd1 disc1"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://download.freebsd.org/ftp/releases/amd64/amd64/" | grep -Eo "href=\"[0-9\.]+-RELEASE" | grep -oE '[0-9\.]+' | sort -r)
}

function editions_() {
    echo disc1 dvd1
}

function get_() {
    local HASH=""
    local ISO="FreeBSD-${RELEASE}-RELEASE-amd64-${EDITION}.iso"
    local URL="https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/${RELEASE}"
    HASH=$(web_pipe "${URL}/CHECKSUM.SHA256-FreeBSD-${RELEASE}-RELEASE-amd64" | grep "${ISO}" | grep -v ".xz" | cut -d' ' -f4)
    echo "${URL}/${ISO} ${HASH}"
}


freedos

freedos 1.3:                         https://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/1.3/official/FD13-LiveCD.zip
freedos 1.2:                         https://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/1.2/official/FD12CD.iso

# Template file for 'freedos'
OSNAME="freedos"
PRETTY="FreeDOS"
BASEDOF="-"
DESCRIPTION="DOS-compatible operating system that you can use to play classic DOS games, run legacy business software, or develop embedded systems"
HOMEPAGE="https://freedos.org"
CREDENTIALS="-"
GUEST="freedos"

RELEASES="1.3 1.2"


function releases_() {
    echo 1.3 1.2
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/${RELEASE}/official"
    case ${RELEASE} in
        1.2) ISO="FD12CD.iso"
             HASH=$(web_pipe "${URL}/FD12.sha" | grep "${ISO}" | cut -d' ' -f1);;
        1.3) ISO="FD13-LiveCD.zip"
             HASH=$(web_pipe "${URL}/verify.txt" | grep -A 8 "sha256sum" | grep "${ISO}" | cut -d' ' -f1);;
    esac
    echo "${URL}/${ISO} ${HASH}"
}

function distro_specific() {
    if [[ ${ISO} = *".zip"* ]]; then
        unzip -qo "${VM_PATH}/${ISO}" -d "${VM_PATH}"
        rm -f "${VM_PATH}/${ISO}"
        ISO="$(ls -1 "${VM_PATH}/"*.iso)"
        ISO="$(basename "${ISO}")"
    fi
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
    echo "disk_size=\"4G\"" >> "${CONF_FILE}"
    echo "ram=\"256M\"" >> "${CONF_FILE}"
}


fvoid

fvoid latest:                        https://sourceforge.net/projects/f-void/files/28_03_2024/fvoid-live-x86_64-20240328-lxqt.iso

# Template file for 'fvoid'
OSNAME="fvoid"
PRETTY="F-Void"
BASEDOF="Void"
DESCRIPTION="F-Void (Fork of Void) is a mild modification of Void Linux"
HOMEPAGE="https://sourceforge.net/projects/f-void"
CREDENTIALS="-"


RELEASES="latest"


function releases_() {
    echo latest
}

function get_() {
    local HASH=""
    local URL="https://sourceforge.net/projects/f-void/files"
    REST=$(web_pipe "https://sourceforge.net/projects/f-void/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | head -1)
    echo "${URL}${REST}"
}


gabeeos

gabeeos latest Openbox:              https://sourceforge.net/projects/gabeeoslinux/files/Distro/Openbox/gabeeOSLinux-Openbox-x86_64-6.12.19_1-20250317.iso/
gabeeos latest Qtile:                https://sourceforge.net/projects/gabeeoslinux/files/Distro/Qtile/Release-2025/gabeeOSLinux-Qtile-x86_64-6.12.18_1-20250314.iso
gabeeos latest i3-gaps:              https://sourceforge.net/projects/gabeeoslinux/files/Distro/i3-gaps/gabeeOSLinux-i3-WM-x86_64-6.12.19_1-20250317.iso

# Template file for 'gabeeos'
OSNAME="gabeeos"
PRETTY="GabeeOSLinux"
BASEDOF="Void"
DESCRIPTION="Brings the necessary software to satisfy the daily needs of an end user in a simple and aesthetically pleasing desktop environment."
HOMEPAGE="https://sourceforge.net/projects/gabeeoslinux/"
CREDENTIALS="anon:voidlinux,root:voidlinux"


RELEASES="latest"
EDITIONS="i3-gaps Qtile Openbox"

function releases_() {
    echo latest
}

function editions_() {
    echo $(web_pipe "https://sourceforge.net/projects/gabeeoslinux/rss?path=/Distro/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | cut -d'/' -f3 | sort | uniq)
}

function get_() {
    local HASH=""
    if [ "${EDITION}" == 'i3-gaps' ]; then
        REL=$(web_pipe "https://sourceforge.net/projects/gabeeoslinux/rss?path=/Distro/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | grep "${EDITION}" | head -1 | cut -d'/' -f2,3)
        ISO=$(web_pipe "https://sourceforge.net/projects/gabeeoslinux/rss?path=/Distro/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | grep "${EDITION}" | head -1 | cut -d'/' -f4)
    else
        REL=$(web_pipe "https://sourceforge.net/projects/gabeeoslinux/rss?path=/Distro/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | grep "${EDITION}" | head -1 | cut -d'/' -f2,3,4)
        ISO=$(web_pipe "https://sourceforge.net/projects/gabeeoslinux/rss?path=/Distro/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | grep "${EDITION}" | head -1 | cut -d'/' -f5)
    fi
    URL="https://sourceforge.net/projects/gabeeoslinux/files/${REL}"
    #ISO=$(web_pipe "https://sourceforge.net/projects/gabeeoslinux/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | cut -d'/' -f5 | grep "${EDITION}" | head -1)
    # No hash provided
    echo "${URL}/${ISO}"
}


garuda

garuda latest cinnamon:              https://iso.builds.garudalinux.org/iso/latest/garuda/cinnamon/latest.iso
garuda latest dr460nized:            https://iso.builds.garudalinux.org/iso/latest/garuda/dr460nized/latest.iso
garuda latest dr460nized-gaming:     https://iso.builds.garudalinux.org/iso/latest/garuda/dr460nized-gaming/latest.iso
garuda latest gnome:                 https://iso.builds.garudalinux.org/iso/latest/garuda/gnome/latest.iso
garuda latest hyprland:              https://iso.builds.garudalinux.org/iso/latest/garuda/hyprland/latest.iso
garuda latest i3:                    https://iso.builds.garudalinux.org/iso/latest/garuda/i3/latest.iso
garuda latest kde-lite:              https://iso.builds.garudalinux.org/iso/latest/garuda/kde-lite/latest.iso
garuda latest mokka:                 https://iso.builds.garudalinux.org/iso/latest/garuda/mokka/latest.iso
garuda latest sway:                  https://iso.builds.garudalinux.org/iso/latest/garuda/sway/latest.iso
garuda latest xfce:                  https://iso.builds.garudalinux.org/iso/latest/garuda/xfce/latest.iso

# Template file for 'garuda'
OSNAME="garuda"
PRETTY="Garuda Linux"
BASEDOF="Arch"
DESCRIPTION="Feature rich and easy to use Linux distribution"
HOMEPAGE="https://garudalinux.org"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="xfce sway mokka kde-lite i3 hyprland gnome dr460nized-gaming dr460nized cinnamon"

function releases_() {
    echo latest
}

function editions_() {
    echo $(web_pipe "https://iso.builds.garudalinux.org/iso/latest/garuda/" | grep -oP '(?<=href=")[^"]*' | tail --lines +2 | cut -d'/' -f1)
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://iso.builds.garudalinux.org/iso/latest/garuda"
    ISO=${EDITION}/latest.iso
    HASH="$(web_pipe "${URL}/${ISO}.sha256" | cut -d' ' -f1)"
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
  echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


gentoo

gentoo latest minimal:               https://mirror.bytemark.co.uk/gentoo/releases/amd64/autobuilds/20250126T154834Z/install-amd64-minimal-20250126T154834Z.iso
gentoo latest livegui:               https://mirror.bytemark.co.uk/gentoo/releases/amd64/autobuilds/20250126T154834Z/livegui-amd64-20250126T154834Z.iso

# Template file for 'gentoo'
OSNAME="gentoo"
PRETTY="Gentoo"
BASEDOF="-"
DESCRIPTION="Highly flexible, source-based Linux distribution"
HOMEPAGE="https://www.gentoo.org"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="minimal livegui"

function releases_() {
    echo latest
}

function editions_() {
    echo minimal livegui
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://mirror.bytemark.co.uk/gentoo/releases/amd64/autobuilds"
    case ${EDITION} in
        minimal) ISO=$(web_pipe "${URL}/${RELEASE}-iso.txt" | grep install | cut -d' ' -f1);;
        livegui) ISO=$(web_pipe "${URL}/${RELEASE}-iso.txt" | grep livegui | cut -d' ' -f1);;
    esac
    HASH=$(web_pipe "${URL}/${ISO}.DIGESTS" | grep -A 1 SHA512 | grep iso | grep -v CONTENTS | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
  echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


ghostbsd

ghostbsd 25.01-R14.2p1 mate:         https://download.ghostbsd.org/releases/amd64/25.01-R14.2p1/GhostBSD-25.01-R14.2p1.iso
ghostbsd 25.01-R14.2p1 xfce:         https://download.ghostbsd.org/releases/amd64/25.01-R14.2p1/GhostBSD-25.01-R14.2p1-XFCE.iso
ghostbsd 24.10.1 mate:               https://download.ghostbsd.org/releases/amd64/24.10.1/GhostBSD-24.10.1.iso
ghostbsd 24.10.1 xfce:               https://download.ghostbsd.org/releases/amd64/24.10.1/GhostBSD-24.10.1-XFCE.iso
ghostbsd 24.07.3 mate:               https://download.ghostbsd.org/releases/amd64/24.07.3/GhostBSD-24.07.3.iso
ghostbsd 24.07.3 xfce:               https://download.ghostbsd.org/releases/amd64/24.07.3/GhostBSD-24.07.3-XFCE.iso

# Template file for 'ghostbsd'
OSNAME="ghostbsd"
PRETTY="GhostBSD"
BASEDOF="FreeBSD"
DESCRIPTION="Simple, elegant desktop BSD Operating System"
HOMEPAGE="https://www.ghostbsd.org"
CREDENTIALS="-"
freebsd

RELEASES="25.01-R14.2p1 24.10.1 24.07.3"
EDITIONS="xfce mate"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://download.ghostbsd.org/releases/amd64/" | grep "href" | cut -d'"' -f2 | cut -d'/' -f1 | sort -r | tail -n +3 | head -n 3)
}

function editions_() {
    echo mate xfce
}

function get_() {
    local ISO=""
    local URL="https://download.ghostbsd.org/releases/amd64/${RELEASE}"
    local HASH=""
    case ${EDITION} in
        mate) ISO="GhostBSD-${RELEASE}.iso";;
        xfce) ISO="GhostBSD-${RELEASE}-XFCE.iso";;
    esac
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | grep "${ISO}" | cut -d' ' -f4)
    echo "${URL}/${ISO} ${HASH}"
}


gnomeos

gnomeos nightly:                     https://1270333429.rsc.cdn77.org/nightly/824958/gnome_os_installer_824958.iso
gnomeos 48.rc:                       https://download.gnome.org/gnomeos/48.rc/gnome_os_installer_48.rc.iso
gnomeos 48.beta:                     https://download.gnome.org/gnomeos/48.beta/gnome_os_installer_48.beta.iso
gnomeos 48.alpha:                    https://download.gnome.org/gnomeos/48.alpha/gnome_os_installer_48.alpha.8.iso
gnomeos 48.0:                        https://download.gnome.org/gnomeos/48.0/gnome_os_installer_48.0.iso
gnomeos 47.rc:                       https://download.gnome.org/gnomeos/47.rc/gnome_os_installer_47.rc.iso
gnomeos 47.beta:                     https://download.gnome.org/gnomeos/47.beta/gnome_os_installer_47.beta.iso
gnomeos 47.alpha:                    https://download.gnome.org/gnomeos/47.alpha/gnome_os_installer_47.alpha.iso
gnomeos 47.0:                        https://download.gnome.org/gnomeos/47.0/gnome_os_installer_47.0.iso
gnomeos 46.rc:                       https://download.gnome.org/gnomeos/46.rc/gnome_os_installer_46.rc.iso
gnomeos 46.beta:                     https://download.gnome.org/gnomeos/46.beta/gnome_os_installer_46.beta.iso
gnomeos 46.alpha:                    https://download.gnome.org/gnomeos/46.alpha/gnome_os_installer_46.alpha.iso
gnomeos 46.0:                        https://download.gnome.org/gnomeos/46.0/gnome_os_installer_46.iso
gnomeos 45.rc:                       https://download.gnome.org/gnomeos/45.rc/gnome_os_installer_45.rc.iso
gnomeos 45.beta:                     https://download.gnome.org/gnomeos/45.beta/gnome_os_installer_45.beta.iso
gnomeos 44.rc:                       https://download.gnome.org/gnomeos/44.rc/gnome_os_installer_44.rc.iso
gnomeos 44.beta:                     https://download.gnome.org/gnomeos/44.beta/gnome_os_installer_44.beta.iso
gnomeos 44.0:                        https://download.gnome.org/gnomeos/44.0/gnome_os_installer_44.0.iso
gnomeos 43.beta:                     https://download.gnome.org/gnomeos/43.beta/gnome_os_installer_43.beta.iso
gnomeos 43.alpha:                    https://download.gnome.org/gnomeos/43.alpha/gnome_os_installer_43.alpha.iso
gnomeos 43.0:                        https://download.gnome.org/gnomeos/43.0/gnome_os_installer_43.0.iso
gnomeos 42.rc:                       https://download.gnome.org/gnomeos/42.rc/gnome_os_installer_42.rc.iso
gnomeos 42.beta:                     https://download.gnome.org/gnomeos/42.beta/gnome_os_installer_42.beta.iso
gnomeos 42.0:                        https://download.gnome.org/gnomeos/42.0/gnome_os_installer_42.0.iso
gnomeos 41.rc:                       https://download.gnome.org/gnomeos/41.rc/gnome_os_installer_41.rc.iso
gnomeos 41.beta:                     https://download.gnome.org/gnomeos/41.beta/gnome_os_installer_41.beta.iso
gnomeos 41.0:                        https://download.gnome.org/gnomeos/41.0/gnome_os_installer_41.0.iso
gnomeos 40.rc:                       https://download.gnome.org/gnomeos/40.rc/gnome_os_installer_40.rc.iso
gnomeos 40.beta:                     https://download.gnome.org/gnomeos/40.beta/gnome_os_installer_40.beta.iso
gnomeos 40.0:                        https://download.gnome.org/gnomeos/40.0/gnome_os_installer_40.0.iso
gnomeos 3.38.1:                      https://download.gnome.org/gnomeos/3.38.1/gnome_os_installer.iso
gnomeos 3.38.0:                      https://download.gnome.org/gnomeos/3.38.0/gnome_os_installer.iso

# Template file for 'gnomeos'
OSNAME="gnomeos"
PRETTY="GNOME OS"
BASEDOF="-"
DESCRIPTION="Alpha nightly bleeding edge distro of GNOME"
HOMEPAGE="https://os.gnome.org"
CREDENTIALS="-"


RELEASES="nightly 48.rc 48.beta 48.alpha 48.0 47.rc 47.beta 47.alpha 47.0 46.rc 46.beta 46.alpha 46.0 45.rc 45.beta 44.rc 44.beta 44.0 43.beta 43.alpha 43.0 42.rc 42.beta 42.0 41.rc 41.beta 41.0 40.rc 40.beta 40.0 3.38.1 3.38.0"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo "nightly" $(web_pipe "https://download.gnome.org/gnomeos/" | grep "title=" | awk -F'"' '{print $4}' | tr -d '/' | sort -nr)
}

function get_() {
    local HASH=""
    local ISO="gnome_os_installer_${RELEASE}.iso"
    local URL="https://download.gnome.org/gnomeos/${RELEASE}"
    case ${RELEASE} in
        nightly)
            ISO="gnome_os_installer.iso"
            URL="https://os.gnome.org/download/latest";;
        46.0) ISO="gnome_os_installer_46.iso";;
        3*) ISO="gnome_os_installer.iso";;
        48.alpha) ISO=$(web_pipe "https://download.gnome.org/gnomeos/48.alpha/" | grep '.iso' | cut -d'"' -f4);;
    esac
    # Process the URL redirections; required for GNOME
    ISO=$(web_redirect "${URL}/${ISO}")
    echo "${ISO} ${HASH}"
}


guix

guix 1.4.0:                          https://ftpmirror.gnu.org/gnu/guix//guix-system-install-1.4.0.x86_64-linux.iso
guix 1.3.0:                          https://ftpmirror.gnu.org/gnu/guix//guix-system-install-1.3.0.x86_64-linux.iso

# Template file for 'guix'
OSNAME="guix"
PRETTY="Guix"
BASEDOF="-"
DESCRIPTION="Distribution of the GNU operating system developed by the GNU Projectâwhich respects the freedom of computer users"
HOMEPAGE="https://guix.gnu.org"
CREDENTIALS="-"


RELEASES="1.4.0 1.3.0"


function releases_() {
    echo 1.4.0 1.3.0
}

function get_() {
    local HASH=""
    local ISO="guix-system-install-${RELEASE}.x86_64-linux.iso"
    local URL="https://ftpmirror.gnu.org/gnu/guix/"
    echo "${URL}/${ISO} ${HASH}"
}


haiku

haiku r1beta5 x86_64:                http://mirror.rit.edu/haiku/r1beta5/haiku-r1beta5-x86_64-anyboot.iso
haiku r1beta5 x86_gcc2h:             http://mirror.rit.edu/haiku/r1beta5/haiku-r1beta5-x86_gcc2h-anyboot.iso
haiku r1beta4 x86_64:                http://mirror.rit.edu/haiku/r1beta4/haiku-r1beta4-x86_64-anyboot.iso
haiku r1beta4 x86_gcc2h:             http://mirror.rit.edu/haiku/r1beta4/haiku-r1beta4-x86_gcc2h-anyboot.iso
haiku r1beta3 x86_64:                http://mirror.rit.edu/haiku/r1beta3/haiku-r1beta3-x86_64-anyboot.iso
haiku r1beta3 x86_gcc2h:             http://mirror.rit.edu/haiku/r1beta3/haiku-r1beta3-x86_gcc2h-anyboot.iso

# Template file for 'haiku'
OSNAME="haiku"
PRETTY="Haiku"
BASEDOF="-"
DESCRIPTION="Specifically targets personal computing. Inspired by the BeOS, Haiku is fast, simple to use, easy to learn and yet very powerful"
HOMEPAGE="https://www.haiku-os.org"
CREDENTIALS="-"
haiku

RELEASES="r1beta5 r1beta4 r1beta3"
EDITIONS="x86_gcc2h x86_64"

function releases_() {
    echo r1beta5 r1beta4 r1beta3
}

function editions_() {
    echo x86_64 x86_gcc2h
}

function get_() {
    local ISO="haiku-${RELEASE}-${EDITION}-anyboot.iso"
    local URL="http://mirror.rit.edu/haiku/${RELEASE}"
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | grep "${ISO}" | cut -d' ' -f4)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
}


kali

kali current:                        https://cdimage.kali.org/current/kali-linux-2025.1a-installer-amd64.iso
kali kali-weekly:                    https://cdimage.kali.org/kali-weekly/kali-linux-2025-W15-installer-amd64.iso

# Template file for 'kali'
OSNAME="kali"
PRETTY="Kali Linux"
BASEDOF="Debian"
DESCRIPTION="The most advanced Penetration Testing Distribution"
HOMEPAGE="https://www.kali.org"
CREDENTIALS="-"


RELEASES="kali-weekly current"


function releases_() {
    echo current kali-weekly
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://cdimage.kali.org/${RELEASE}"
    ISO=$(web_pipe "${URL}/?C=M;O=D" | grep -o ">kali-linux-.*-installer-amd64.iso" | head -n 1 | cut -c 2-)
    HASH=$(web_pipe "${URL}/SHA256SUMS" | grep -v torrent | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
  echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


kdeneon

kdeneon user:                        https://files.kde.org/neon/images/user/current/neon-user-20250413-1548.iso
kdeneon testing:                     https://files.kde.org/neon/images/testing/current/neon-testing-20250415-0243.iso
kdeneon unstable:                    https://files.kde.org/neon/images/unstable/current/neon-unstable-20250413-1549.iso
kdeneon developer:                   https://files.kde.org/neon/images/developer/current/neon-unstable-developer-20250414-0040.iso

# Template file for 'kdeneon'
OSNAME="kdeneon"
PRETTY="KDE Neon"
BASEDOF="Debian Ubuntu"
DESCRIPTION="Latest and greatest of KDE community software packaged on a rock-solid base"
HOMEPAGE="https://neon.kde.org"
CREDENTIALS="-"


RELEASES="user unstable testing developer"


function releases_() {
    echo user testing unstable developer
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://files.kde.org/neon/images/${RELEASE}/current"
    if [ "$RELEASE" == 'developer' ]; then
        ISO=$(web_pipe "${URL}/neon-unstable-${RELEASE}-current.sha256sum" | cut -d' ' -f3-)
    else
        ISO=$(web_pipe "${URL}/neon-${RELEASE}-current.sha256sum" | cut -d' ' -f3-)
    fi
    HASH=$(web_pipe "${URL}/neon-${RELEASE}-current.sha256sum" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


kodachi

kodachi latest:                      https://sourceforge.net/projects/linuxkodachi/files/kodachi-8.27-64-kernel-6.2.iso

# Template file for 'kodachi'
OSNAME="kodachi"
PRETTY="Kodachi"
BASEDOF="Ubuntu"
DESCRIPTION="Provide you with a secure, anti forensic, and anonymous operating system considering all features that a person who is concerned about privacy would need to have in order to be secure"
HOMEPAGE="https://www.digi77.com/linux-kodachi/"
CREDENTIALS="kodachi:r@@t00,root:r@@t00"


RELEASES="latest"


function releases_() {
	echo latest
}

function get_() {
	local HASH=""
	local ISO=$(web_pipe "https://sourceforge.net/projects/linuxkodachi/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | head -1)
	local HASH=$(web_pipe "https://sourceforge.net/projects/linuxkodachi/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep "${ISO}\.sig" | cut -d' ' -f1)
	local URL="https://sourceforge.net/projects/linuxkodachi/files"
	echo "${URL}${ISO} ${HASH}"
}


kolibrios

kolibrios latest en_US:              http://builds.kolibrios.org/en_US/latest-iso.7z
kolibrios latest ru_RU:              http://builds.kolibrios.org/ru_RU/latest-iso.7z
kolibrios latest it_IT:              http://builds.kolibrios.org/it_IT/kolibrios-0.7.7.0%2B8797-9f5dd6c-iso.7z
kolibrios latest es_ES:              http://builds.kolibrios.org/es_ES/latest-iso.7z

# Template file for 'kolibrios'
OSNAME="kolibrios"
PRETTY="KolibriOS"
BASEDOF="-"
DESCRIPTION="Tiny yet incredibly powerful and fast operating system"
HOMEPAGE="http://kolibrios.org"
CREDENTIALS="-"
kolibrios

RELEASES="latest"
EDITIONS="ru_RU it_IT es_ES en_US"

function releases_() {
    echo latest
}

function editions_() {
    echo en_US ru_RU it_IT es_ES
}

function get_() {
    local HASH=""
    if [ "${EDITION}" == 'it_IT' ]; then
        # The it_IT build was disabled because nobody maintained it
        local ISO="kolibrios-0.7.7.0%2B8797-9f5dd6c-iso.7z"
    else
      local ISO="latest-iso.7z"
    fi
    local URL="http://builds.kolibrios.org/${EDITION}"
    echo "${URL}/${ISO} ${HASH}"
}

function distro_specific() {
    if [[ ${ISO} = *".7z" ]]; then
        if [ -z "$(command -v 7z)" ]; then echo $"ERROR! '7zip' needs installing. Unable to extract file."
        else
            7z e "${VM_PATH}/${ISO}" -o"${VM_PATH}" >/dev/null 2>&1
            rm -f "${VM_PATH}/${ISO}"
            ISO="$(ls -1 "${VM_PATH}/"*.iso)"
            ISO="$(basename "${ISO}")"
        fi
    fi
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
    echo "disk_size=\"2G\"" >> "${CONF_FILE}"
    echo "ram=\"128M\"" >> "${CONF_FILE}"
}


kubuntu

kubuntu 16.04:                       https://cdimage.ubuntu.com/kubuntu/releases/16.04/release/kubuntu-16.04.6-desktop-amd64.iso
kubuntu 18.04:                       https://cdimage.ubuntu.com/kubuntu/releases/18.04/release/kubuntu-18.04.5-desktop-amd64.iso
kubuntu 20.04:                       https://cdimage.ubuntu.com/kubuntu/releases/20.04/release/kubuntu-20.04.6-desktop-amd64.iso
kubuntu 22.04:                       https://cdimage.ubuntu.com/kubuntu/releases/22.04/release/kubuntu-22.04.5-desktop-amd64.iso
kubuntu 24.04:                       https://cdimage.ubuntu.com/kubuntu/releases/24.04/release/kubuntu-24.04.2-desktop-amd64.iso
kubuntu 24.10:                       https://cdimage.ubuntu.com/kubuntu/releases/24.10/release/kubuntu-24.10-desktop-amd64.iso
kubuntu daily-live:                  https://cdimage.ubuntu.com/kubuntu/daily-live/current/plucky-desktop-amd64.iso

# Template file for 'kubuntu'
OSNAME="kubuntu"
PRETTY="Kubuntu"
BASEDOF="Ubuntu"
DESCRIPTION="Free, complete, and open-source alternative to Microsoft Windows and Mac OS X which contains everything you need to work, play, or share"
HOMEPAGE="https://kubuntu.org"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


linuxlite

linuxlite 6.6:                       https://sourceforge.net/projects/linux-lite/files/6.6/linux-lite-6.6-64bit.iso
linuxlite 6.4:                       https://sourceforge.net/projects/linux-lite/files/6.4/linux-lite-6.4-64bit.iso
linuxlite 6.2:                       https://sourceforge.net/projects/linux-lite/files/6.2/linux-lite-6.2-64bit.iso
linuxlite 6.0:                       https://sourceforge.net/projects/linux-lite/files/6.0/linux-lite-6.0-64bit.iso

# Template file for 'linuxlite'
OSNAME="linuxlite"
PRETTY="Linux Lite"
BASEDOF="Debian Ubuntu"
DESCRIPTION="Your first simple, fast and free stop in the world of Linux"
HOMEPAGE="https://www.linuxliteos.com"
CREDENTIALS="-"


RELEASES="6.6 6.4 6.2 6.0"


function releases_() {
    echo 6.6 6.4 6.2 6.0
}

function get_() {
    local HASH=""
    local ISO="linux-lite-${RELEASE}-64bit.iso"
    local URL="https://sourceforge.net/projects/linux-lite/files/${RELEASE}"
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


linuxmint

linuxmint 22.1 cinnamon:             https://mirror.bytemark.co.uk/linuxmint/stable/22.1/linuxmint-22.1-cinnamon-64bit.iso
linuxmint 22.1 mate:                 https://mirror.bytemark.co.uk/linuxmint/stable/22.1/linuxmint-22.1-mate-64bit.iso
linuxmint 22.1 xfce:                 https://mirror.bytemark.co.uk/linuxmint/stable/22.1/linuxmint-22.1-xfce-64bit.iso
linuxmint 22 cinnamon:               https://mirror.bytemark.co.uk/linuxmint/stable/22/linuxmint-22-cinnamon-64bit.iso
linuxmint 22 mate:                   https://mirror.bytemark.co.uk/linuxmint/stable/22/linuxmint-22-mate-64bit.iso
linuxmint 22 xfce:                   https://mirror.bytemark.co.uk/linuxmint/stable/22/linuxmint-22-xfce-64bit.iso
linuxmint 21.3 cinnamon:             https://mirror.bytemark.co.uk/linuxmint/stable/21.3/linuxmint-21.3-cinnamon-64bit.iso
linuxmint 21.3 mate:                 https://mirror.bytemark.co.uk/linuxmint/stable/21.3/linuxmint-21.3-mate-64bit.iso
linuxmint 21.3 xfce:                 https://mirror.bytemark.co.uk/linuxmint/stable/21.3/linuxmint-21.3-xfce-64bit.iso
linuxmint 21.2 cinnamon:             https://mirror.bytemark.co.uk/linuxmint/stable/21.2/linuxmint-21.2-cinnamon-64bit.iso
linuxmint 21.2 mate:                 https://mirror.bytemark.co.uk/linuxmint/stable/21.2/linuxmint-21.2-mate-64bit.iso
linuxmint 21.2 xfce:                 https://mirror.bytemark.co.uk/linuxmint/stable/21.2/linuxmint-21.2-xfce-64bit.iso
linuxmint 21.1 cinnamon:             https://mirror.bytemark.co.uk/linuxmint/stable/21.1/linuxmint-21.1-cinnamon-64bit.iso
linuxmint 21.1 mate:                 https://mirror.bytemark.co.uk/linuxmint/stable/21.1/linuxmint-21.1-mate-64bit.iso
linuxmint 21.1 xfce:                 https://mirror.bytemark.co.uk/linuxmint/stable/21.1/linuxmint-21.1-xfce-64bit.iso
linuxmint 21 cinnamon:               https://mirror.bytemark.co.uk/linuxmint/stable/21/linuxmint-21-cinnamon-64bit.iso
linuxmint 21 mate:                   https://mirror.bytemark.co.uk/linuxmint/stable/21/linuxmint-21-mate-64bit.iso
linuxmint 21 xfce:                   https://mirror.bytemark.co.uk/linuxmint/stable/21/linuxmint-21-xfce-64bit.iso
linuxmint 20.3 cinnamon:             https://mirror.bytemark.co.uk/linuxmint/stable/20.3/linuxmint-20.3-cinnamon-64bit.iso
linuxmint 20.3 mate:                 https://mirror.bytemark.co.uk/linuxmint/stable/20.3/linuxmint-20.3-mate-64bit.iso
linuxmint 20.3 xfce:                 https://mirror.bytemark.co.uk/linuxmint/stable/20.3/linuxmint-20.3-xfce-64bit.iso
linuxmint 20.2 cinnamon:             https://mirror.bytemark.co.uk/linuxmint/stable/20.2/linuxmint-20.2-cinnamon-64bit.iso
linuxmint 20.2 mate:                 https://mirror.bytemark.co.uk/linuxmint/stable/20.2/linuxmint-20.2-mate-64bit.iso
linuxmint 20.2 xfce:                 https://mirror.bytemark.co.uk/linuxmint/stable/20.2/linuxmint-20.2-xfce-64bit.iso

# Template file for 'linuxmint'
OSNAME="linuxmint"
PRETTY="Linux Mint"
BASEDOF="Ubuntu"
DESCRIPTION="Designed to work out of the box and comes fully equipped with the apps most people need"
HOMEPAGE="https://linuxmint.com"
CREDENTIALS="-"


RELEASES="22.1 22 21.3 21.2 21.1 21 20.3 20.2"
EDITIONS="xfce mate cinnamon"

function releases_() {
    echo 22.1 22 21.3 21.2 21.1 21 20.3 20.2
}

function editions_() {
    echo cinnamon mate xfce
}

function get_() {
    local HASH=""
    local ISO="linuxmint-${RELEASE}-${EDITION}-64bit.iso"
    local URL="https://mirror.bytemark.co.uk/linuxmint/stable/${RELEASE}"
    HASH=$(web_pipe "${URL}/sha256sum.txt" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


lmde

lmde 6 cinnamon:                     https://mirror.bytemark.co.uk/linuxmint/debian/lmde-6-cinnamon-64bit.iso

# Template file for 'lmde'
OSNAME="lmde"
PRETTY="Linux Mint Debian Edition"
BASEDOF="Debian"
DESCRIPTION="Aims to be as similar as possible to Linux Mint, but without using Ubuntu. The package base is provided by Debian instead"
HOMEPAGE="https://www.linuxmint.com/download_lmde.php"
CREDENTIALS="-"


RELEASES="6"
EDITIONS="cinnamon"

function releases_() {
    echo 6
}

function editions_() {
    echo cinnamon
}

function get_() {
    local HASH=""
    local ISO="lmde-${RELEASE}-${EDITION}-64bit.iso"
    local URL="https://mirror.bytemark.co.uk/linuxmint/debian"
    HASH=$(web_pipe "${URL}/sha256sum.txt" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


loc-os

loc-os latest lxde:                  https://sourceforge.net/projects/loc-os/files/Loc-OS%2023/Loc-OS-23-LXDE-x86_64.iso
loc-os latest xfce:                  https://sourceforge.net/projects/loc-os/files/Loc-OS%2023/Loc-OS-23-XFCE-x86_64.iso
loc-os latest kde:                   https://sourceforge.net/projects/loc-os/files/Loc-OS%2023/Loc-OS-23-KDE-x86_64.iso

# Template file for 'loc-os'
OSNAME="loc-os"
PRETTY="Loc-OS Linux"
BASEDOF="Debian"
DESCRIPTION="Distribution of GNU/Linux focused on low resource consumption."
HOMEPAGE="https://loc-os.com"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="xfce lxde kde"

function releases_() {
    echo latest
}

function editions_() {
    echo lxde xfce kde
}

function get_() {
    local HASH=""
    local REL=$(echo "${EDITION}" | tr '[:lower:]' '[:upper:]')
    URL="https://sourceforge.net/projects/loc-os/files"
    REST_URL=$(web_pipe "https://sourceforge.net/projects/loc-os/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '64\.iso' | grep "${REL}" | head -1)
    REST="Loc-OS%2023"
    URL="${URL}/${REST}"
    ISO=$(echo "${REST_URL}" | cut -d'/' -f3)
    echo "${URL}/${ISO}"
}


lubuntu

lubuntu 16.04:                       https://cdimage.ubuntu.com/lubuntu/releases/16.04/release/lubuntu-16.04.6-desktop-amd64.iso
lubuntu 18.04:                       https://cdimage.ubuntu.com/lubuntu/releases/18.04/release/lubuntu-18.04.5-desktop-amd64.iso
lubuntu 20.04:                       https://cdimage.ubuntu.com/lubuntu/releases/20.04/release/lubuntu-20.04.5-desktop-amd64.iso
lubuntu 22.04:                       https://cdimage.ubuntu.com/lubuntu/releases/22.04/release/lubuntu-22.04.5-desktop-amd64.iso
lubuntu 24.04:                       https://cdimage.ubuntu.com/lubuntu/releases/24.04/release/lubuntu-24.04.2-desktop-amd64.iso
lubuntu 24.10:                       https://cdimage.ubuntu.com/lubuntu/releases/24.10/release/lubuntu-24.10-desktop-amd64.iso
lubuntu daily-live:                  https://cdimage.ubuntu.com/lubuntu/daily-live/current/plucky-desktop-amd64.iso

# Template file for 'lubuntu'
OSNAME="lubuntu"
PRETTY="Lubuntu"
BASEDOF="Ubuntu"
DESCRIPTION="Complete Operating System that ships the essential apps and services for daily use: office applications, PDF reader,  image editor, music and video players, etc. Using lightwave lxde/lxqt"
HOMEPAGE="https://lubuntu.me"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


maboxlinux

maboxlinux latest:                   https://cfhcable.dl.sourceforge.net/project/mabox-linux/25.03/linux61/mabox-linux-25.03-Istredd-250331-linux61.iso

# Template file for 'maboxlinux'
OSNAME="maboxlinux"
PRETTY="Mabox Linux"
BASEDOF="Manjaro"
DESCRIPTION="Lightweight, functional and easy to customize Openbox desktop"
HOMEPAGE="https://maboxlinux.org"
CREDENTIALS="-"


RELEASES="latest"


function releases_() {
    echo latest
}

function get_() {
    local HASH=""
    local URL=""
    URL="https://sourceforge.net/projects/mabox-linux/files/${RELEASE}/download"
    URL="$(web_redirect "${URL}" | cut -d? -f1)"
    echo "${URL} ${HASH}"
}


macos

macos mojave:                        http://oscdn.apple.com/content/downloads/04/36/041-94410/ge73si0bd3fdsdkfibykjgrlcfuzy1q9yx/RecoveryImage/BaseSystem.dmg
macos catalina:                      http://oscdn.apple.com/content/downloads/59/10/001-43312/oifium3yx72dhc4po3r65zfwblslmce191/RecoveryImage/BaseSystem.dmg
macos big-sur:                       http://oscdn.apple.com/content/downloads/41/28/071-71279/5djpevqmc2w0ti2c4n1m8mkz7fm791t1ic/RecoveryImage/BaseSystem.dmg
macos monterey:                      http://oscdn.apple.com/content/downloads/59/11/012-51692/z29q5x5plswit63bvyxmubthavua9gbxic/RecoveryImage/BaseSystem.dmg
macos ventura:                       http://oscdn.apple.com/content/downloads/60/43/042-01871/sbembiob0hs1o92jfofalts02ux0x8rsra/RecoveryImage/BaseSystem.dmg
macos sonoma:                        http://oscdn.apple.com/content/downloads/14/00/082-01323/qbdhdewwbxiq2ppow3kyduslzd9c0ql0eu/RecoveryImage/BaseSystem.dmg

# Template file for 'macos'
OSNAME="macos"
PRETTY="MacOS"
BASEDOF="-"
DESCRIPTION="Work and play on your Mac are even more powerful. Elevate your presence on video calls. Access information in all-new ways. Boost gaming performance."
HOMEPAGE="https://www.apple.com/macos"
CREDENTIALS="-"
GUEST="macos"
IMAGE_TYPE="img"
RELEASES="ventura sonoma monterey mojave catalina big-sur"


function releases_() {
    echo mojave catalina big-sur monterey ventura sonoma
}

function generate_id() {
    local macRecoveryID=""
    local TYPE="${1}"
    local valid_chars=("0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "A" "B" "C" "D" "E" "F")
    for ((i=0; i<TYPE; i++)); do
        macRecoveryID+="${valid_chars[$((RANDOM % 16))]}"
    done
    echo "${macRecoveryID}"
}

function get_() {
    local appleSession=""
    local info=""
    local downloadLink=""
    local downloadSession=""
    local chunkListLink=""
    local chunkListSession=""
    local BOARD_ID=""
    local CWD=""
    local CHECK=""
    local CHUNKCHECK=""
    local MLB="00000000000000000"
    local OS_TYPE="default"

    case ${RELEASE} in
        lion|10.7)
            BOARD_ID="Mac-2E6FAB96566FE58C"
            MLB="00000000000F25Y00";;
        mountainlion|10.8)
            BOARD_ID="Mac-7DF2A3B5E5D671ED"
            MLB="00000000000F65100";;
        mavericks|10.9)
            BOARD_ID="Mac-F60DEB81FF30ACF6"
            MLB="00000000000FNN100";;
        yosemite|10.10)
            BOARD_ID="Mac-E43C1C25D4880AD6"
            MLB="00000000000GDVW00";;
        elcapitan|10.11)
            BOARD_ID="Mac-FFE5EF870D7BA81A"
            MLB="00000000000GQRX00";;
        sierra|10.12)
            BOARD_ID="Mac-77F17D7DA9285301"
            MLB="00000000000J0DX00";;
        high-sierra|10.13)
            BOARD_ID="Mac-BE088AF8C5EB4FA2"
            MLB="00000000000J80300";;
        mojave|10.14)
            BOARD_ID="Mac-7BA5B2DFE22DDD8C"
            MLB="00000000000KXPG00";;
        catalina|10.15)
            BOARD_ID="Mac-00BE6ED71E35EB86";;
        big-sur|11)
            BOARD_ID="Mac-42FD25EABCABB274";;
        monterey|12)
            BOARD_ID="Mac-E43C1C25D4880AD6";;
        ventura|13)
            BOARD_ID="Mac-BE088AF8C5EB4FA2";;
        sonoma|14)
            BOARD_ID="Mac-53FDB3D8DB8CA971";;
        *) echo "ERROR! Unknown release: ${RELEASE}"
           releases_macos
           exit 1;;
    esac

    CWD="$(dirname "${0}")"
    if [ -x "${CWD}/chunkcheck" ]; then
        CHUNKCHECK="${CWD}/chunkcheck"
    elif [ -x "$(command -v chunkcheck)" ]; then
        CHUNKCHECK="$(command -v chunkcheck)"
    fi

    appleSession=$(curl --disable -v -H "Host: osrecovery.apple.com" \
                           -H "Connection: close" \
                           -A "InternetRecovery/1.0" https://osrecovery.apple.com/ 2>&1 | tr ';' '\n' | awk -F'session=|;' '{print $2}' | grep 1)
    info=$(curl --disable -s -X POST -H "Host: osrecovery.apple.com" \
                           -H "Connection: close" \
                           -A "InternetRecovery/1.0" \
                           -b "session=\"${appleSession}\"" \
                           -H "Content-Type: text/plain" \
                           -d $'cid='"$(generate_id 16)"$'\nsn='${MLB}$'\nbid='${BOARD_ID}$'\nk='"$(generate_id 64)"$'\nfg='"$(generate_id 64)"$'\nos='${OS_TYPE} \
                           https://osrecovery.apple.com/InstallationPayload/RecoveryImage | tr ' ' '\n')
    downloadLink=$(echo "$info" | grep 'oscdn' | grep 'dmg')
    downloadSession=$(echo "$info" | grep 'expires' | grep 'dmg')
    chunkListLink=$(echo "$info" | grep 'oscdn' | grep 'chunklist')
    chunkListSession=$(echo "$info" | grep 'expires' | grep 'chunklist')

    if [ "${OPERATION}" == "show" ]; then
        test_result "${OS}" "${RELEASE}" "" "${downloadLink}" | tee -a "public/tmp_${OS}"
        exit 0
    elif [ "${OPERATION}" == "test" ]; then
        CHECK=$(web_check "${downloadLink}" --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${downloadSession}" && echo "PASS" || echo "FAIL")
        test_result "${OS}" "${RELEASE}" "" "${downloadLink}" "${CHECK}" | tee -a "public/tmp_${OS}"
        exit 0
    elif [ "${OPERATION}" == "download" ]; then
        echo "Downloading macOS (${RELEASE^}) RecoveryImage"
        echo " - URL: ${downloadLink}"
        web_get "${downloadLink}" "${VM_PATH}" RecoveryImage.dmg --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${downloadSession}"
        web_get "${chunkListLink}" "${VM_PATH}" RecoveryImage.chunklist --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${chunkListSession}"
        VM_PATH="$(pwd)"
    else
        if [ ! -e "${VM_PATH}/RecoveryImage.chunklist" ]; then
            echo "Downloading macOS (${RELEASE^}) RecoveryImage"
            echo " - URL: ${downloadLink}"
            web_get "${downloadLink}" "${VM_PATH}" RecoveryImage.dmg --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${downloadSession}"
            web_get "${chunkListLink}" "${VM_PATH}" RecoveryImage.chunklist --header "Host: oscdn.apple.com" --header "Connection: close" --header "User-Agent: InternetRecovery/1.0" --header "Cookie: AssetToken=${chunkListSession}"
            if ! "${CHUNKCHECK}" "${VM_PATH}" 2> /dev/null; then
                echo " - WARNING! Verification failed, continuing anyway"
            else
                echo " - Verification passed"
            fi

            if [ -e "${VM_PATH}/RecoveryImage.dmg" ] && [ ! -e "${VM_PATH}/RecoveryImage.img" ]; then
                echo " - Converting RecoveryImage.dmg"
                ${QEMU_IMG} convert "${VM_PATH}/RecoveryImage.dmg" -O raw "${VM_PATH}/RecoveryImage.img" 2>/dev/null
            fi
            rm "${VM_PATH}/RecoveryImage.dmg" "${VM_PATH}/RecoveryImage.chunklist"
            echo " - RecoveryImage.img is ready."
        fi
        echo "Downloading OpenCore & UEFI firmware"
        web_get "https://github.com/kholia/OSX-KVM/raw/master/OpenCore/OpenCore.qcow2" "${VM_PATH}"
        web_get "https://github.com/kholia/OSX-KVM/raw/master/OVMF_CODE.fd" "${VM_PATH}"
        if [ ! -e "${VM_PATH}/OVMF_VARS-1920x1080.fd" ]; then
            web_get "https://github.com/kholia/OSX-KVM/raw/master/OVMF_VARS-1920x1080.fd" "${VM_PATH}"
        fi
    fi
    make_vm_config RecoveryImage.img
}

function specific_tweaks() {
    echo "disk_size=\"128G\"" >> "${CONF_FILE}"
    echo "macos_release=\"${RELEASE}\"" >> "${CONF_FILE}"
    # https://github.com/quickemu-project/quickemu/issues/438
    if [ "${RELEASE}" == "monterey" ]; then
        echo "cpu_cores=2" >> "${CONF_FILE}"
    fi
}


mageia

mageia 9 Plasma:                     https://mirrors.kernel.org/mageia/iso/9/Mageia-9-Live-Plasma-x86_64/Mageia-9-Live-Plasma-x86_64.iso
mageia 9 GNOME:                      https://mirror.math.princeton.edu/pub/mageia/iso/9/Mageia-9-Live-GNOME-x86_64/Mageia-9-Live-GNOME-x86_64.iso
mageia 9 Xfce:                       https://mirror.math.princeton.edu/pub/mageia/iso/9/Mageia-9-Live-Xfce-x86_64/Mageia-9-Live-Xfce-x86_64.iso
mageia 8 Plasma:                     https://mirror.math.princeton.edu/pub/mageia/iso/8/Mageia-8-Live-Plasma-x86_64/Mageia-8-Live-Plasma-x86_64.iso
mageia 8 GNOME:                      https://mirror.math.princeton.edu/pub/mageia/iso/8/Mageia-8-Live-GNOME-x86_64/Mageia-8-Live-GNOME-x86_64.iso
mageia 8 Xfce:                       https://mirrors.kernel.org/mageia/iso/8/Mageia-8-Live-Xfce-x86_64/Mageia-8-Live-Xfce-x86_64.iso

# Template file for 'mageia'
OSNAME="mageia"
PRETTY="Mageia"
BASEDOF="-"
DESCRIPTION="Stable, secure operating system for desktop & server"
HOMEPAGE="https://www.mageia.org"
CREDENTIALS="-"


RELEASES="9 8"
EDITIONS="Xfce Plasma GNOME"

function releases_() {
    echo 9 8
}

function editions_() {
    echo Plasma GNOME Xfce
}

function get_() {
    local HASH=""
    local ISO=""
    ISO=$(web_pipe https://www.mageia.org/en/downloads/get/?q="Mageia-${RELEASE}-Live-${EDITION}-x86_64.iso" | grep 'click here'| grep -o 'href=.*\.iso'|cut -d\" -f2)
    HASH=$(web_pipe "${ISO}.sha512" | cut -d' ' -f1)
    echo "${ISO} ${HASH}"
}


manjaro

manjaro xfce full:                   https://download.manjaro.org/xfce/24.2.1/manjaro-xfce-24.2.1-241216-linux612.iso
manjaro xfce minimal:                https://download.manjaro.org/xfce/24.2.1/manjaro-xfce-24.2.1-minimal-241216-linux612.iso
manjaro gnome full:                  https://download.manjaro.org/gnome/24.2.1/manjaro-gnome-24.2.1-241216-linux612.iso
manjaro gnome minimal:               https://download.manjaro.org/gnome/24.2.1/manjaro-gnome-24.2.1-minimal-241216-linux612.iso
manjaro plasma full:                 https://download.manjaro.org/kde/24.2.1/manjaro-kde-24.2.1-241216-linux612.iso
manjaro plasma minimal:              https://download.manjaro.org/kde/24.2.1/manjaro-kde-24.2.1-minimal-241216-linux612.iso
manjaro cinnamon full:               https://download.manjaro.org/cinnamon/24.0.5/manjaro-cinnamon-24.0.5-240729-linux69.iso
manjaro cinnamon minimal:            https://download.manjaro.org/cinnamon/24.0.5/manjaro-cinnamon-24.0.5-minimal-240729-linux69.iso
manjaro i3 full:                     https://download.manjaro.org/i3/24.0.5/manjaro-i3-24.0.5-240729-linux69.iso
manjaro i3 minimal:                  https://download.manjaro.org/i3/24.0.5/manjaro-i3-24.0.5-minimal-240729-linux69.iso
manjaro sway full:                   https://manjaro-sway.download/download?file=manjaro-sway-24.1.1-250202-linux66.iso
manjaro sway minimal:                https://manjaro-sway.download/download?file=manjaro-sway-24.1.1-250202-linux66.iso

# Template file for 'manjaro'
OSNAME="manjaro"
PRETTY="Manjaro"
BASEDOF="Arch"
DESCRIPTION="Versatile, free, and open-source Linux operating system designed with a strong focus on safeguarding user privacy and offering extensive control over hardware"
HOMEPAGE="https://manjaro.org"
CREDENTIALS="-"


RELEASES="xfce sway plasma i3 gnome cinnamon"
EDITIONS="minimal full"

function releases_() {
    echo xfce gnome plasma cinnamon i3 sway
}

function editions_() {
    echo full minimal
}

function get_() {
    local HASH=""
    local ISO=""
    local MANIFEST=""
    local URL=""
    local TYPE="official"
    MANIFEST="$(web_pipe https://gitlab.manjaro.org/web/iso-info/-/raw/master/file-info.json)"
    case "${RELEASE}" in
        sway)
            MANIFEST="$(web_pipe https://mirror.manjaro-sway.download/manjaro-sway/release.json)"
            TYPE="sway"
            ;;
        cinnamon|i3) TYPE="community";;
    esac

    if [ "${EDITION}" == "minimal" ] && [ "${TYPE}" != "sway" ]; then
        EDITION=".minimal"
    else
        EDITION=""
    fi

    if [ "${RELEASE}" == "sway" ]; then
        URL=$(echo "${MANIFEST}" | jq -r '.[] | select(.name|test("^manjaro-sway-.*[.]iso$")) | .url')
    else
        URL="$(echo "${MANIFEST}" | jq -r ."${TYPE}.${RELEASE}${EDITION}".image)"
    fi
    HASH=$(web_pipe "${URL}.sha512" | cut -d' ' -f1)
    echo "${URL} ${HASH}"
}


miyo

miyo 2022 Kwin:                      https://sourceforge.net/projects/miyolinux/files/2022-Release//
miyo 2022 Deboot-Ceres:              https://sourceforge.net/projects/miyolinux/files/2022-Release//
miyo 2022 JWM:                       https://sourceforge.net/projects/miyolinux/files/2022-Release//
miyo 2022 Openbox:                   https://sourceforge.net/projects/miyolinux/files/2022-Release//
miyo 2022 MATE:                      https://sourceforge.net/projects/miyolinux/files/2022-Release//

# Template file for 'miyo'
OSNAME="miyolinux"
PRETTY="MiyoLinux"
BASEDOF="Devuan"
DESCRIPTION="Very minimal Linux OS based on Devuan and various Window Managers. "
HOMEPAGE="https://sourceforge.net/projects/miyolinux/"
CREDENTIALS="-"


RELEASES="2022"
EDITIONS="Openbox MATE Kwin JWM Deboot-Ceres"

function releases_() {
    echo 2022
}

function editions_() {
    echo Kwin Deboot-Ceres JWM Openbox MATE
}

function get_() {
    local EDITION="${1:-}"
    local HASH=""
    local URL="https://sourceforge.net/projects/miyolinux/files/${RELEASE}-Release/${EDITION}"
    case ${EDITION} in
        Kwin) ISO="miyo-kwin-x86_64-BIOS-20220526.iso";;
        Deboot-Ceres) ISO="Deboot-Ceres-x86-64-BIOS-20220415.iso";;
        JWM) ISO="miyolinux-jwm-x86_64-BIOS-20220226.iso";;
        Openbox) ISO="MiyoLinux-x86_64-BIOS-20220129.iso";;
        MATE) ISO="mate-minimal-x86_64-BIOS-20220107.iso";;
    esac
    HASH=$(wget -q -O- "${URL}/${ISO}.sha256" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


mxlinux

mxlinux 23.6 Xfce:                   https://sourceforge.net/projects/mx-linux/files/Final/Xfce/MX-23.6_x64.iso
mxlinux 23.6 KDE:                    https://sourceforge.net/projects/mx-linux/files/Final/KDE/MX-23.6_KDE_x64.iso
mxlinux 23.6 Fluxbox:                https://sourceforge.net/projects/mx-linux/files/Final/Fluxbox/MX-23.6_fluxbox_x64.iso

# Template file for 'mxlinux'
OSNAME="mxlinux"
PRETTY="MX Linux"
BASEDOF="Debian Antix"
DESCRIPTION="Designed to combine elegant and efficient desktops with high stability and solid performance"
HOMEPAGE="https://mxlinux.org"
CREDENTIALS="-"


RELEASES="23.6"
EDITIONS="Xfce KDE Fluxbox"

function releases_() {
    # needs header, so not web_pipe:
    curl --disable -Ils "https://sourceforge.net/projects/mx-linux/files/latest/download" | grep -i 'location:' | cut -d? -f1 | cut -d_ -f1 | cut -d- -f3
}

function editions_() {
    echo Xfce KDE Fluxbox
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://sourceforge.net/projects/mx-linux/files/Final/${EDITION}"
    case ${EDITION} in
        Xfce) ISO="MX-${RELEASE}_x64.iso";;
        KDE) ISO="MX-${RELEASE}_KDE_x64.iso";;
        Fluxbox) ISO="MX-${RELEASE}_fluxbox_x64.iso";;
    esac
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


netboot

netboot latest:                      https://boot.netboot.xyz/ipxe/netboot.xyz.iso

# Template file for 'netboot'
OSNAME="netboot"
PRETTY="netboot.xyz"
BASEDOF="iPXE"
DESCRIPTION="Your favorite operating systems in one place"
HOMEPAGE="https://netboot.xyz"
CREDENTIALS="-"


RELEASES="latest"


function releases_() {
    echo latest
}

function get_() {
    local HASH=""
    local ISO="netboot.xyz.iso"
    local URL="https://boot.netboot.xyz/ipxe"
    HASH=$(web_pipe "${URL}/netboot.xyz-sha256-checksums.txt" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


netbsd

netbsd 10.1:                         https://cdn.netbsd.org/pub/NetBSD/NetBSD-10.1/images/NetBSD-10.1-amd64.iso
netbsd 10.0:                         https://cdn.netbsd.org/pub/NetBSD/NetBSD-10.0/images/NetBSD-10.0-amd64.iso
netbsd 9.4:                          https://cdn.netbsd.org/pub/NetBSD/NetBSD-9.4/images/NetBSD-9.4-amd64.iso
netbsd 9.3:                          https://cdn.netbsd.org/pub/NetBSD/NetBSD-9.3/images/NetBSD-9.3-amd64.iso

# Template file for 'netbsd'
OSNAME="netbsd"
PRETTY="NetBSD"
BASEDOF="-"
DESCRIPTION="Free, fast, secure, and highly portable Unix-like Open Source operating system. It is available for a wide range of platforms, from large-scale servers and powerful desktop systems to handheld and embedded devices"
HOMEPAGE="https://www.netbsd.org"
CREDENTIALS="-"
GUEST="netbsd"

RELEASES="9.4 9.3 10.1 10.0"


function releases_() {
    # V8 is EOL so filter it out
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://cdn.netbsd.org/pub/NetBSD/iso/" | grep -o -E '"[[:digit:]]+\.[[:digit:]]+/"' | tr -d '"/' | grep -v ^8 | sort -nr | head -n 4)
}

function get_() {
    local HASH=""
    local ISO="NetBSD-${RELEASE}-amd64.iso"
    local URL="https://cdn.netbsd.org/pub/NetBSD/NetBSD-${RELEASE}/images"
    HASH=$(web_pipe "${URL}/MD5" | grep "${ISO}" | cut -d' ' -f4)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
}


nitrux

nitrux latest:                       https://sourceforge.net/projects/nitruxos/files/Release/ISO/nitrux-nx-desktop-plasma-5943de83-amd64.iso

# Template file for 'nitrux'
OSNAME="nitrux"
PRETTY="Nitrux"
BASEDOF="Debian Ubuntu"
DESCRIPTION="Powered by Debian, KDE Plasma and Frameworks, and AppImages"
HOMEPAGE="https://nxos.org"
CREDENTIALS="-"


RELEASES="latest"


function releases_() {
    echo latest
}

function get_() {
    local HASH=""
    local URLBASE=""
    local URL=""
    local ISO=""
    URLBASE="https://sourceforge.net/projects/nitruxos/files/Release"
    URL="${URLBASE}/ISO"
    ISO=$(web_pipe 'https://sourceforge.net/projects/nitruxos/rss?path=/Release/ISO' | grep '.iso' | head -n 1 | cut -d']' -f1 | cut -d '/' -f4)
    HASH=$(web_pipe "${URLBASE}/MD5/${ISONAME}.md5sum" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


nixos

nixos unstable minimal:              https://channels.nixos.org/nixos-unstable/latest-nixos-minimal-x86_64-linux.iso
nixos unstable plasma:               https://channels.nixos.org/nixos-unstable/latest-nixos-plasma6-x86_64-linux.iso
nixos unstable gnome:                https://channels.nixos.org/nixos-unstable/latest-nixos-gnome-x86_64-linux.iso
nixos 24.11 minimal:                 https://channels.nixos.org/nixos-24.11/latest-nixos-minimal-x86_64-linux.iso
nixos 24.11 plasma:                  https://channels.nixos.org/nixos-24.11/latest-nixos-plasma6-x86_64-linux.iso
nixos 24.11 gnome:                   https://channels.nixos.org/nixos-24.11/latest-nixos-gnome-x86_64-linux.iso
nixos 24.05 minimal:                 https://channels.nixos.org/nixos-24.05/latest-nixos-minimal-x86_64-linux.iso
nixos 24.05 plasma:                  https://channels.nixos.org/nixos-24.05/latest-nixos-plasma6-x86_64-linux.iso
nixos 24.05 gnome:                   https://channels.nixos.org/nixos-24.05/latest-nixos-gnome-x86_64-linux.iso

# Template file for 'nixos'
OSNAME="nixos"
PRETTY="NixOS"
BASEDOF="-"
DESCRIPTION="Linux distribution based on Nix package manager, tool that takes a unique approach to package management and system configuration"
HOMEPAGE="https://nixos.org"
CREDENTIALS="-"


RELEASES="unstable 24.11 24.05"
EDITIONS="plasma minimal gnome"

function releases_() {
    # Lists unstable plus the two most recent releases
    #shellcheck disable=SC2046
    echo unstable $(web_pipe "https://nix-channels.s3.amazonaws.com/?delimiter=/" | grep -o -E 'nixos-[[:digit:]]+\.[[:digit:]]+' | cut -d- -f2 | sort -nru | head -n +2)
}

function editions_() {
    echo minimal plasma gnome
}

function get_() {
    local HASH=""
    # Adapt the plasma edition according to the NixOS release
    case "${EDITION}" in
        plasma)
            if [ "${RELEASE}" == "23.11" ]; then
                EDITION+="5"
            else
                EDITION+="6"
            fi
            ;;
    esac
    local ISO="latest-nixos-${EDITION}-x86_64-linux.iso"
    local URL="https://channels.nixos.org/nixos-${RELEASE}"
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
  echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


nwg-shell

nwg-shell 2025.02.23:                https://sourceforge.net/projects/nwg-iso/files/nwg-live-2025.02.23-x86_64.iso

# Template file for 'nwg-shell'
OSNAME="nwg-shell"
PRETTY="nwg-shell"
BASEDOF="Arch"
DESCRIPTION="Arch Linux ISO with nwg-shell for sway and Hyprland"
HOMEPAGE="https://nwg-piotr.github.io/nwg-shell"
CREDENTIALS="nwg:nwg"


RELEASES="2025.02.23"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://sourceforge.net/projects/nwg-iso/rss?path=/" | grep 'url=' | grep '64.iso' | cut -d'/' -f12 | cut -d'-' -f3)
}

function get_() {
    local HASH=""
    local ISO="nwg-live-${RELEASE}-x86_64.iso"
    local URL="https://sourceforge.net/projects/nwg-iso/files"
    HASH="$(web_pipe "https://sourceforge.net/projects/nwg-iso/rss?path=/" | grep "${ISO}" | cut -d'>' -f3 | cut -d'<' -f1 | tail -n 1)"
    echo "${URL}/${ISO} ${HASH}"
}


openbsd

openbsd 7.7:                         https://mirror.leaseweb.com/pub/OpenBSD/7.7/amd64/install77.iso
openbsd 7.6:                         https://mirror.leaseweb.com/pub/OpenBSD/7.6/amd64/install76.iso
openbsd 7.5:                         https://mirror.leaseweb.com/pub/OpenBSD/7.5/amd64/install75.iso

# Template file for 'openbsd'
OSNAME="openbsd"
PRETTY="OpenBSD"
BASEDOF="-"
DESCRIPTION="Free, multi-platform 4.4BSD-based UNIX-like operating system. Our efforts emphasize portability, standardization, correctness, proactive security and integrated cryptography"
HOMEPAGE="https://www.openbsd.org"
CREDENTIALS="-"
GUEST="openbsd"

RELEASES="7.7 7.6 7.5"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://mirror.leaseweb.com/pub/OpenBSD/" | grep -e '6\.[8-9]/' -e '[7-9]\.' | cut -d\" -f4 | tr -d '/' | sort -r)
}

function get_() {
    local HASH=""
    local ISO="install${RELEASE//\./}.iso"
    local URL="https://mirror.leaseweb.com/pub/OpenBSD/${RELEASE}/amd64"
    HASH=$(web_pipe "${URL}/SHA256" | grep "${ISO}" | cut -d' ' -f4)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
}


openindiana


# Template file for 'openindiana'
OSNAME="openindiana"
PRETTY="OpenIndiana"
BASEDOF="Solaris OPenSolaris"
DESCRIPTION="Community supported illumos-based operating system"
HOMEPAGE="https://www.openindiana.org"
CREDENTIALS="-"
solaris

RELEASES=""
EDITIONS=""

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://dlc.openindiana.org/isos/hipster/" | grep link | cut -d'/' -f 1 | cut -d '"' -f4 | sort -r | tail -n +2 | head -n 5)
}

function editions_() {
    echo gui text minimal
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    URL="https://dlc.openindiana.org/isos/hipster/${RELEASE}"
    ISO="OI-hipster-${EDITION}-${RELEASE}.iso"
    HASH=$(web_pipe "${URL}/${ISO}.sha256" |cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
    echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


opensuse

opensuse tumbleweed:                 https://download.opensuse.org/tumbleweed/iso/openSUSE-Tumbleweed-DVD-x86_64-Current.iso
opensuse microos:                    https://download.opensuse.org/tumbleweed/iso/openSUSE-MicroOS-DVD-x86_64-Current.iso
opensuse aeon:                       https://mirrorcache.opensuse.org/tumbleweed/appliances/iso/opensuse-aeon.x86_64.iso
opensuse 15.6:                       https://download.opensuse.org/distribution/leap/15.6/iso/openSUSE-Leap-15.6-DVD-x86_64-Current.iso
opensuse 15.5:                       https://download.opensuse.org/distribution/leap/15.5/iso/openSUSE-Leap-15.5-DVD-x86_64-Current.iso
opensuse 15.4:                       https://download.opensuse.org/distribution/leap/15.4/iso/openSUSE-Leap-15.4-DVD-x86_64-Current.iso
opensuse 15.3:                       https://download.opensuse.org/distribution/leap/15.3/iso/openSUSE-Leap-15.3-DVD-x86_64-Current.iso
opensuse 15.2:                       https://download.opensuse.org/distribution/leap/15.2/iso/openSUSE-Leap-15.2-DVD-x86_64-Current.iso
opensuse 15.1:                       https://download.opensuse.org/distribution/leap/15.1/iso/openSUSE-Leap-15.1-DVD-x86_64.iso
opensuse 15.0:                       https://download.opensuse.org/distribution/leap/15.0/iso/openSUSE-Leap-15.0-DVD-x86_64.iso

# Template file for 'opensuse'
OSNAME="opensuse"
PRETTY="openSUSE"
BASEDOF="-"
DESCRIPTION="The makers choice for sysadmins, developers and desktop users"
HOMEPAGE="https://www.opensuse.org"
CREDENTIALS="-"


RELEASES="tumbleweed microos aeon 15.6 15.5 15.4 15.3 15.2 15.1 15.0"


function releases_() {
    # shellcheck disable=SC2046,SC2005
    # Leap have 16.0 dir but no iso file nor iso dir there
    if web_pipe "https://download.opensuse.org/distribution/leap/16.0/" | grep -q 'href="iso/"'; then
        echo $(web_pipe "https://download.opensuse.org/distribution/leap/" | grep 'class="name"' | cut -d '/' -f2 | grep -v 42 | sort -r  | tail --lines +2) aeon microos tumbleweed
    else
        echo tumbleweed microos aeon 15.6 15.5 15.4 15.3 15.2 15.1 15.0
    fi
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    if [ "${RELEASE}" == "tumbleweed" ]; then
        ISO="openSUSE-Tumbleweed-DVD-x86_64-Current.iso"
        URL="https://download.opensuse.org/tumbleweed/iso"
    elif [ "${RELEASE}" == "microos" ]; then
        ISO="openSUSE-MicroOS-DVD-x86_64-Current.iso"
        URL="https://download.opensuse.org/tumbleweed/iso"
    elif [ "${RELEASE}" == "aeon" ]; then
        ISO="opensuse-aeon.x86_64.iso"
        URL="https://mirrorcache.opensuse.org/tumbleweed/appliances/iso"
    elif [ "${RELEASE}" == 15.0 ] || [ "${RELEASE}" == 15.1 ]; then
        ISO="openSUSE-Leap-${RELEASE}-DVD-x86_64.iso"
        URL="https://download.opensuse.org/distribution/leap/${RELEASE}/iso"
    else
        ISO="openSUSE-Leap-${RELEASE}-DVD-x86_64-Current.iso"
        URL="https://download.opensuse.org/distribution/leap/${RELEASE}/iso"
    fi
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | awk '{if(NR==4) print $0}' | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


oraclelinux

oraclelinux 9.3:                     https://yum.oracle.com/ISOS/OracleLinux/OL9/u3/x86_64/OracleLinux-R9-U3-x86_64-dvd.iso
oraclelinux 9.2:                     https://yum.oracle.com/ISOS/OracleLinux/OL9/u2/x86_64/OracleLinux-R9-U2-x86_64-dvd.iso
oraclelinux 9.1:                     https://yum.oracle.com/ISOS/OracleLinux/OL9/u1/x86_64/OracleLinux-R9-U1-x86_64-dvd.iso
oraclelinux 9.0:                     https://yum.oracle.com/ISOS/OracleLinux/OL9/u0/x86_64/OracleLinux-R9-U0-x86_64-dvd.iso
oraclelinux 8.9:                     https://yum.oracle.com/ISOS/OracleLinux/OL8/u9/x86_64/OracleLinux-R8-U9-x86_64-dvd.iso
oraclelinux 8.8:                     https://yum.oracle.com/ISOS/OracleLinux/OL8/u8/x86_64/OracleLinux-R8-U8-x86_64-dvd.iso
oraclelinux 8.7:                     https://yum.oracle.com/ISOS/OracleLinux/OL8/u7/x86_64/OracleLinux-R8-U7-x86_64-dvd.iso
oraclelinux 8.6:                     https://yum.oracle.com/ISOS/OracleLinux/OL8/u6/x86_64/OracleLinux-R8-U6-x86_64-dvd.iso
oraclelinux 8.5:                     https://yum.oracle.com/ISOS/OracleLinux/OL8/u5/x86_64/OracleLinux-R8-U5-x86_64-dvd.iso
oraclelinux 8.4:                     https://yum.oracle.com/ISOS/OracleLinux/OL8/u4/x86_64/OracleLinux-R8-U4-x86_64-dvd.iso
oraclelinux 7.9:                     https://yum.oracle.com/ISOS/OracleLinux/OL7/u9/x86_64/OracleLinux-R7-U9-Server-x86_64-dvd.iso
oraclelinux 7.8:                     https://yum.oracle.com/ISOS/OracleLinux/OL7/u8/x86_64/OracleLinux-R7-U8-Server-x86_64-dvd.iso
oraclelinux 7.7:                     https://yum.oracle.com/ISOS/OracleLinux/OL7/u7/x86_64/OracleLinux-R7-U7-Server-x86_64-dvd.iso

# Template file for 'oraclelinux'
OSNAME="oraclelinux"
PRETTY="Oracle Linux"
BASEDOF="RedHar"
DESCRIPTION="Linux with everything required to deploy, optimize, and manage applications on-premises, in the cloud, and at the edge"
HOMEPAGE="https://www.oracle.com/linux"
CREDENTIALS="-"


RELEASES="9.3 9.2 9.1 9.0 8.9 8.8 8.7 8.6 8.5 8.4 7.9 7.8 7.7"


function releases_() {
    echo 9.3 9.2 9.1 9.0 8.9 8.8 8.7 8.6 8.5 8.4 7.9 7.8 7.7
}

function get_() {
    local HASH=""
    local ISO=""
    local VER_MAJ=${RELEASE::1}
    local VER_MIN=${RELEASE:2:1}
    local URL="https://yum.oracle.com/ISOS/OracleLinux/OL${VER_MAJ}/u${VER_MIN}/x86_64"
    case ${VER_MAJ} in
        7) ISO="OracleLinux-R${VER_MAJ}-U${VER_MIN}-Server-x86_64-dvd.iso";;
        *) ISO="OracleLinux-R${VER_MAJ}-U${VER_MIN}-x86_64-dvd.iso";;
    esac
    HASH=$(web_pipe "https://linux.oracle.com/security/gpg/checksum/OracleLinux-R${VER_MAJ}-U${VER_MIN}-Server-x86_64.checksum" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
  echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


parrotsec

parrotsec 6.3.2 home:                https://download.parrot.sh/parrot/iso/6.3.2/Parrot-home-6.3.2_amd64.iso
parrotsec 6.3.2 htb:                 https://download.parrot.sh/parrot/iso/6.3.2/Parrot-htb-6.3.2_amd64.iso
parrotsec 6.3.2 security:            https://download.parrot.sh/parrot/iso/6.3.2/Parrot-security-6.3.2_amd64.iso
parrotsec 6.2 home:                  https://download.parrot.sh/parrot/iso/6.2/Parrot-home-6.2_amd64.iso
parrotsec 6.2 htb:                   https://download.parrot.sh/parrot/iso/6.2/Parrot-htb-6.2_amd64.iso
parrotsec 6.2 security:              https://download.parrot.sh/parrot/iso/6.2/Parrot-security-6.2_amd64.iso
parrotsec 6.1 home:                  https://download.parrot.sh/parrot/iso/6.1/Parrot-home-6.1_amd64.iso
parrotsec 6.1 htb:                   https://download.parrot.sh/parrot/iso/6.1/Parrot-htb-6.1_amd64.iso
parrotsec 6.1 security:              https://download.parrot.sh/parrot/iso/6.1/Parrot-security-6.1_amd64.iso

# Template file for 'parrotsec'
OSNAME="parrotsec"
PRETTY="Parrot Security"
BASEDOF="Debian"
DESCRIPTION="Provides a huge arsenal of tools, utilities and libraries that IT and security professionals can use to test and assess the security of their assets in a reliable, compliant and reproducible way"
HOMEPAGE="https://www.parrotsec.org"
CREDENTIALS="parrot:parrot"


RELEASES="6.3.2 6.2 6.1"
EDITIONS="security htb home"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://download.parrot.sh/parrot/iso/" | grep -o -E 'href="([[:digit:]]+\.)+[[:digit:]]+/' | sort -nr | head -n 3 | cut -d\" -f 2 | cut -d'/' -f 1)
}

function editions_() {
    echo home htb security
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    ISO="Parrot-${EDITION}-${RELEASE}_amd64.iso"
    URL="https://download.parrot.sh/parrot/iso/${RELEASE}"
    HASH="$(web_pipe "${URL}/signed-hashes.txt" | grep "${ISO}" | cut -d' ' -f1)"
    echo "${URL}/${ISO} ${HASH}"
}


pbpuppy

pbpuppy 250201 BookwormPup64-ghtest: https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250201.iso
pbpuppy 250201 S15Pup64:             https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250201.iso
pbpuppy 250201 VoidPup64:            https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250201.iso
pbpuppy 250301 BookwormPup64-ghtest: https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250301.iso
pbpuppy 250301 S15Pup64:             https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250301.iso
pbpuppy 250301 VoidPup64:            https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250301.iso
pbpuppy 250314 BookwormPup64-ghtest: https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250314.iso
pbpuppy 250314 S15Pup64:             https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250314.iso
pbpuppy 250314 VoidPup64:            https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250314.iso
pbpuppy 250402 BookwormPup64-ghtest: https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250402.iso
pbpuppy 250402 S15Pup64:             https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250402.iso
pbpuppy 250402 VoidPup64:            https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250402.iso
pbpuppy 250404 BookwormPup64-ghtest: https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250404.iso
pbpuppy 250404 S15Pup64:             https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250404.iso
pbpuppy 250404 VoidPup64:            https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release/VoidPup64-22.02-250404.iso

# Template file for 'pbpuppy'
OSNAME="pbpuppy"
PRETTY="PeaBee's Puppy Linux"
BASEDOF="Void,Ubuntu,Debian,Slackware"
DESCRIPTION="Puppy Linux releases from Github. Brought to you by: peabee"
HOMEPAGE="https://sourceforge.net/projects/pb-gh-releases"
CREDENTIALS="-"


RELEASES="250404 250402 250314 250301 250201"
EDITIONS="VoidPup64 S15Pup64 BookwormPup64-ghtest"

function releases_() {
    echo $(web_pipe "https://sourceforge.net/projects/pb-gh-releases/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | grep '64' | cut -d'-' -f3 | grep -oP '\d{6}(?=\.iso)' | sort -u)
}

function editions_() {
    echo $(web_pipe "https://sourceforge.net/projects/pb-gh-releases/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | grep '64' | cut -d'/' -f2 | cut -d'_' -f1 | sort -u)
}

function get_() {
    local HASH=""
    local URL="https://sourceforge.net/projects/pb-gh-releases/files/VoidPup64_release"
    if [ "${RELEASE}" == 'ghtest' ]; then
      ISO=$(web_pipe "https://sourceforge.net/projects/pb-gh-releases/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '\.iso' | grep '64' | cut -d'/' -f3 | grep "${RELEASE}" | grep "${EDITION}")
    else
      ISO="VoidPup64-22.02-${RELEASE}.iso"
    fi
    HASH=$(web_pipe "${URL}"/SHA512checksums.txt | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


peppermint

peppermint latest devuan-xfce:       https://sourceforge.net/projects/peppermintos/files/isos/XFCE/PeppermintOS-devuan_64_xfce.iso
peppermint latest devuan-gnome:      https://sourceforge.net/projects/peppermintos/files/isos/Gnome_FlashBack/PeppermintOS-devuan_64_gfb.iso
peppermint latest debian-xfce:       https://sourceforge.net/projects/peppermintos/files/isos/XFCE/PeppermintOS-Debian-64.iso
peppermint latest debian-gnome:      https://sourceforge.net/projects/peppermintos/files/isos/Gnome_FlashBack/PeppermintOS-Debian_64_gfb.iso

# Template file for 'peppermint'
OSNAME="peppermint"
PRETTY="PeppermintOS"
BASEDOF="Devuan"
DESCRIPTION="Provides a user with the opportunity to build the system that best fits their needs. While at the same time providing a functioning OS with minimum hassle out of the box"
HOMEPAGE="https://peppermintos.com"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="devuan-xfce devuan-gnome debian-xfce debian-gnome"

function releases_() {
    echo latest
}

function editions_() {
    echo devuan-xfce devuan-gnome debian-xfce debian-gnome
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://sourceforge.net/projects/peppermintos/files/isos"
    case ${EDITION} in
        devuan-xfce)
            ISO="PeppermintOS-devuan_64_xfce.iso"
            URL="${URL}/XFCE";;
        debian-xfce)
            ISO="PeppermintOS-Debian-64.iso"
            URL="${URL}/XFCE";;
        devuan-gnome)
            ISO="PeppermintOS-devuan_64_gfb.iso"
            URL="${URL}/Gnome_FlashBack";;
        debian-gnome)
            ISO="PeppermintOS-Debian_64_gfb.iso"
            URL="${URL}/Gnome_FlashBack";;
    esac
    HASH=$(web_pipe "${URL}/${ISO}-sha512.checksum" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


popos

popos 22.04 intel:                   https://iso.pop-os.org/22.04/amd64/intel/52/pop-os_22.04_amd64_intel_52.iso
popos 22.04 nvidia:                  https://iso.pop-os.org/22.04/amd64/nvidia/52/pop-os_22.04_amd64_nvidia_52.iso
popos 20.04 intel:                   https://iso.pop-os.org/20.04/amd64/intel/39/pop-os_20.04_amd64_intel_39.iso
popos 20.04 nvidia:                  https://iso.pop-os.org/20.04/amd64/nvidia/39/pop-os_20.04_amd64_nvidia_39.iso

# Template file for 'popos'
OSNAME="popos"
PRETTY="Pop!_OS"
BASEDOF="Ubuntu"
DESCRIPTION="Operating system for STEM and creative professionals who use their computer as a tool to discover and create"
HOMEPAGE="https://pop.system76.com"
CREDENTIALS="-"


RELEASES="22.04 20.04"
EDITIONS="nvidia intel"

function releases_() {
    echo 22.04 20.04
}

function editions_() {
    echo intel nvidia
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    URL=$(web_pipe "https://api.pop-os.org/builds/${RELEASE}/${EDITION}" | jq -r .url)
    HASH=$(web_pipe "https://api.pop-os.org/builds/${RELEASE}/${EDITION}" | jq -r .sha_sum)
    echo "${URL} ${HASH}"
}

function specific_tweaks() {
  echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


porteus

porteus 5.01 cinnamon:               https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.01/Porteus-CINNAMON-v5.01-x86_64.iso
porteus 5.01 gnome:                  https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.01/Porteus-GNOME-v5.01-x86_64.iso
porteus 5.01 kde:                    https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.01/Porteus-KDE-v5.01-x86_64.iso
porteus 5.01 lxde:                   https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.01/Porteus-LXDE-v5.01-x86_64.iso
porteus 5.01 lxqt:                   https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.01/Porteus-LXQT-v5.01-x86_64.iso
porteus 5.01 mate:                   https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.01/Porteus-MATE-v5.01-x86_64.iso
porteus 5.01 openbox:                https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.01/Porteus-OPENBOX-v5.01-x86_64.iso
porteus 5.01 xfce:                   https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v5.01/Porteus-XFCE-v5.01-x86_64.iso

# Template file for 'porteus'
OSNAME="porteus"
PRETTY="Porteus"
BASEDOF="Slackware"
DESCRIPTION="Complete linux operating system that is optimized to run from CD, USB flash drive, hard drive, or other bootable storage media"
HOMEPAGE="http://www.porteus.org"
CREDENTIALS="-"


RELEASES="5.01"
EDITIONS="xfce openbox mate lxqt lxde kde gnome cinnamon"

function releases_() {
    echo 5.01
}

function editions_() {
    echo cinnamon gnome kde lxde lxqt mate openbox xfce
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    edition="${EDITION~~}"
    ISO="Porteus-${edition}-v${RELEASE}-x86_64.iso"
    URL="https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v${RELEASE}"
    HASH=$(web_pipe "${URL}/sha256sums.txt" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


primtux

primtux 7 2022-10:                   https://sourceforge.net/projects/primtux/files/Distribution/PrimTux7-amd64-2022-10.iso

# Template file for 'primtux'
OSNAME="primtux"
PRETTY="PrimTux"
BASEDOF="Ubuntu"
DESCRIPTION="Complete and customizable GNU/Linux operating system intended for primary school students and suitable even for older hardware"
HOMEPAGE="https://primtux.fr"
CREDENTIALS="-"


RELEASES="7"
EDITIONS="2022-10"

function releases_() {
    echo 7
}

function editions_() {
    echo 2022-10
}

function get_() {
    local HASH=""
    local URL=""
    local ISO=""
    ISO="PrimTux${RELEASE}-amd64-${EDITION}.iso"
    URL="https://sourceforge.net/projects/primtux/files/Distribution"
    HASH=$(web_pipe "${URL}/${ISO}.md5" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


proxmox-ve

proxmox-ve 8.4-1:                    https://enterprise.proxmox.com/iso/proxmox-ve_8.4-1.iso
proxmox-ve 8.3-1:                    https://enterprise.proxmox.com/iso/proxmox-ve_8.3-1.iso
proxmox-ve 7.4-1:                    https://enterprise.proxmox.com/iso/proxmox-ve_7.4-1.iso
proxmox-ve 6.4-1:                    https://enterprise.proxmox.com/iso/proxmox-ve_6.4-1.iso
proxmox-ve 5.4-1:                    https://enterprise.proxmox.com/iso/proxmox-ve_5.4-1.iso

# Template file for 'proxmox-ve'
OSNAME="proxmox-ve"
PRETTY="Proxmox VE"
BASEDOF="Debian"
DESCRIPTION="Proxmox Virtual Environment is a complete, open-source server management platform for enterprise virtualization"
HOMEPAGE="https://proxmox.com/en/proxmox-virtual-environment"
CREDENTIALS="-"


RELEASES="8.4-1 8.3-1 7.4-1 6.4-1 5.4-1"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe https://enterprise.proxmox.com/iso/ | grep proxmox-ve | grep -E -o '[0-9]+\.[0-9]+-[0-9]\.iso' | uniq | sort -ru | cut -d'.' -f 1-2)
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    ISO="proxmox-ve_${RELEASE}.iso"
    URL="https://enterprise.proxmox.com/iso"
    HASH=$(web_pipe "${URL}/SHA256SUMS" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "disk_size=\"20G\"" >> "${CONF_FILE}"
    echo "ram=\"4G\"" >> "${CONF_FILE}"
}


pureos

pureos 10.3 gnome:                   https://downloads.puri.sm/byzantium/gnome/2023-06-14/pureos-10.3-gnome-live-20230614_amd64.iso
pureos 10.3 plasma:                  https://downloads.puri.sm/byzantium/plasma/2023-06-14/pureos-10.3-plasma-live-20230614_amd64.iso

# Template file for 'pureos'
OSNAME="pureos"
PRETTY="PureOS"
BASEDOF="Debian"
DESCRIPTION="Fully free/libre and open source GNU/Linux operating system, endorsed by the Free Software Foundation"
HOMEPAGE="https://www.pureos.net"
CREDENTIALS="-"


RELEASES="10.3"
EDITIONS="plasma gnome"

function releases_() {
    web_pipe "https://www.pureos.net/download/" | grep -m 1 "downloads.puri" | cut -d '"' -f 2 | cut -d '-' -f 4
}

function editions_() {
    echo gnome plasma
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    local PureName=
    PureName="$(web_pipe "https://www.pureos.net/download/" | grep -m 1 "downloads.puri" | cut -d '/' -f 4)"
    local PureDate=
    PureDate="$(web_pipe "https://www.pureos.net/download/" | grep -m 1 "downloads.puri" | cut -d '/' -f 6)"
    local PureDateSquashed="${PureDate//'-'/}"
    edition="${EDITION,,}"
    URL="https://downloads.puri.sm/${PureName}/${edition}/${PureDate}"
    ISO="pureos-${RELEASE}-${edition}-live-${PureDateSquashed}_amd64.iso"
    local IsoTrimmed=
    IsoTrimmed="${ISO%.*}"
    HASH="$(web_pipe "${URL}/${IsoTrimmed}.checksums_sha256.txt" | grep -m 1 '.iso' | cut -d '.' -f 1)"
    echo "${URL}/${ISO} ${HASH}"
}


reactos

reactos latest:                      https://pilotfiber.dl.sourceforge.net/project/reactos/ReactOS/0.4.15/ReactOS-0.4.15-release-1-gdbb43bbaeb2-x86-iso.zip?viasf=1

# Template file for 'reactos'
OSNAME="reactos"
PRETTY="ReactOS"
BASEDOF="-"
DESCRIPTION="Imagine running your favorite Windows applications and drivers in an open-source environment you can trust"
HOMEPAGE="https://reactos.org"
CREDENTIALS="-"
GUEST="reactos"

RELEASES="latest"


function releases_() {
    echo latest
}

function get_() {
    local HASH=""
    local URL=""
    URL="$(web_redirect "https://sourceforge.net/projects/reactos/files/latest/download")"
    echo "${URL} ${HASH}"
}

function distro_specific() {
    if [[ ${ISO} = *".zip"* ]]; then
        unzip -qo "${VM_PATH}/${ISO}" -d "${VM_PATH}"
        rm -f "${VM_PATH}/${ISO}"
        ISO="$(ls -1 "${VM_PATH}/"*.iso)"
        ISO="$(basename "${ISO}")"
    fi
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
    echo "disk_size=\"12G\"" >> "${CONF_FILE}"
    echo "ram=\"2048M\"" >> "${CONF_FILE}"
}


rebornos

rebornos latest:                     

# Template file for 'rebornos'
OSNAME="rebornos"
PRETTY="RebornOS"
BASEDOF="Arch"
DESCRIPTION="Aiming to make Arch Linux as user friendly as possible by providing interface solutions to things you normally have to do in a terminal"
HOMEPAGE="https://rebornos.org"
CREDENTIALS="-"


RELEASES="latest"


function releases_() {
    echo latest
}

function get_() {
    local JSON ISO HASH
    JSON=$(web_pipe "https://meta.cdn.soulharsh007.dev/RebornOS-ISO?format=json")
    if ! echo "$JSON" | jq . > /dev/null 2>&1; then
      echo "JSON not valid!" >&2
      echo "DEBUG: JSON response:" >&2
      echo "$JSON" >&2
    fi
    URL=$(echo "$JSON" | jq -r ".url")
    ISO=$(echo "${URL}" | cut -d'/' -f3)
    HASH=$(echo "$JSON" | jq -r ".md5")
    echo "${URL} ${HASH}"
}


rhino

rhino 2025.1:                        https://sourceforge.net/projects/rhino-linux-builder/files/2025.1/Rhino-Linux-2025.1-amd64.iso

# Template file for 'rhino'
OSNAME="rhino"
PRETTY="Rhino Linux"
BASEDOF="Ubuntu"
DESCRIPTION="Re-invents the Ubuntu experience as a rolling-release distribution built on a stable desktop environment. With Pacstall & XFCE"
HOMEPAGE="https://rhinolinux.org/"
CREDENTIALS="-"


RELEASES="2025.1"


function releases_() {
    echo 2025.1
}

function get_() {
    local HASH=""
    local ISO="Rhino-Linux-${RELEASE}-amd64.iso"
    local URL="https://sourceforge.net/projects/rhino-linux-builder/files/${RELEASE}"
    HASH="$(web_pipe "${URL}/${ISO}.sha256/download" | grep "(${ISO}" | cut -d' ' -f1)"
    echo "${URL}/${ISO} ${HASH}"
}


rockylinux

rockylinux 9.5 minimal:              https://dl.rockylinux.org/vault/rocky/9.5/isos/x86_64/Rocky-9.5-x86_64-minimal.iso
rockylinux 9.5 dvd:                  https://dl.rockylinux.org/vault/rocky/9.5/isos/x86_64/Rocky-9.5-x86_64-dvd.iso
rockylinux 9.5 boot:                 https://dl.rockylinux.org/vault/rocky/9.5/isos/x86_64/Rocky-9.5-x86_64-boot.iso
rockylinux 9.4 minimal:              https://dl.rockylinux.org/vault/rocky/9.4/isos/x86_64/Rocky-9.4-x86_64-minimal.iso
rockylinux 9.4 dvd:                  https://dl.rockylinux.org/vault/rocky/9.4/isos/x86_64/Rocky-9.4-x86_64-dvd.iso
rockylinux 9.4 boot:                 https://dl.rockylinux.org/vault/rocky/9.4/isos/x86_64/Rocky-9.4-x86_64-boot.iso
rockylinux 9.3 minimal:              https://dl.rockylinux.org/vault/rocky/9.3/isos/x86_64/Rocky-9.3-x86_64-minimal.iso
rockylinux 9.3 dvd:                  https://dl.rockylinux.org/vault/rocky/9.3/isos/x86_64/Rocky-9.3-x86_64-dvd.iso
rockylinux 9.3 boot:                 https://dl.rockylinux.org/vault/rocky/9.3/isos/x86_64/Rocky-9.3-x86_64-boot.iso
rockylinux 9.2 minimal:              https://dl.rockylinux.org/vault/rocky/9.2/isos/x86_64/Rocky-9.2-x86_64-minimal.iso
rockylinux 9.2 dvd:                  https://dl.rockylinux.org/vault/rocky/9.2/isos/x86_64/Rocky-9.2-x86_64-dvd.iso
rockylinux 9.2 boot:                 https://dl.rockylinux.org/vault/rocky/9.2/isos/x86_64/Rocky-9.2-x86_64-boot.iso
rockylinux 9.1 minimal:              https://dl.rockylinux.org/vault/rocky/9.1/isos/x86_64/Rocky-9.1-x86_64-minimal.iso
rockylinux 9.1 dvd:                  https://dl.rockylinux.org/vault/rocky/9.1/isos/x86_64/Rocky-9.1-x86_64-dvd.iso
rockylinux 9.1 boot:                 https://dl.rockylinux.org/vault/rocky/9.1/isos/x86_64/Rocky-9.1-x86_64-boot.iso
rockylinux 9.0 minimal:              https://dl.rockylinux.org/vault/rocky/9.0/isos/x86_64/Rocky-9.0-x86_64-minimal.iso
rockylinux 9.0 dvd:                  https://dl.rockylinux.org/vault/rocky/9.0/isos/x86_64/Rocky-9.0-x86_64-dvd.iso
rockylinux 9.0 boot:                 https://dl.rockylinux.org/vault/rocky/9.0/isos/x86_64/Rocky-9.0-x86_64-boot.iso
rockylinux 8.9 minimal:              https://dl.rockylinux.org/vault/rocky/8.9/isos/x86_64/Rocky-8.9-x86_64-minimal.iso
rockylinux 8.9 dvd:                  https://dl.rockylinux.org/vault/rocky/8.9/isos/x86_64/Rocky-8.9-x86_64-dvd1.iso
rockylinux 8.9 boot:                 https://dl.rockylinux.org/vault/rocky/8.9/isos/x86_64/Rocky-8.9-x86_64-boot.iso
rockylinux 8.8 minimal:              https://dl.rockylinux.org/vault/rocky/8.8/isos/x86_64/Rocky-8.8-x86_64-minimal.iso
rockylinux 8.8 dvd:                  https://dl.rockylinux.org/vault/rocky/8.8/isos/x86_64/Rocky-8.8-x86_64-dvd1.iso
rockylinux 8.8 boot:                 https://dl.rockylinux.org/vault/rocky/8.8/isos/x86_64/Rocky-8.8-x86_64-boot.iso
rockylinux 8.7 minimal:              https://dl.rockylinux.org/vault/rocky/8.7/isos/x86_64/Rocky-8.7-x86_64-minimal.iso
rockylinux 8.7 dvd:                  https://dl.rockylinux.org/vault/rocky/8.7/isos/x86_64/Rocky-8.7-x86_64-dvd1.iso
rockylinux 8.7 boot:                 https://dl.rockylinux.org/vault/rocky/8.7/isos/x86_64/Rocky-8.7-x86_64-boot.iso
rockylinux 8.6 minimal:              https://dl.rockylinux.org/vault/rocky/8.6/isos/x86_64/Rocky-8.6-x86_64-minimal.iso
rockylinux 8.6 dvd:                  https://dl.rockylinux.org/vault/rocky/8.6/isos/x86_64/Rocky-8.6-x86_64-dvd1.iso
rockylinux 8.6 boot:                 https://dl.rockylinux.org/vault/rocky/8.6/isos/x86_64/Rocky-8.6-x86_64-boot.iso
rockylinux 8.5 minimal:              https://dl.rockylinux.org/vault/rocky/8.5/isos/x86_64/Rocky-8.5-x86_64-minimal.iso
rockylinux 8.5 dvd:                  https://dl.rockylinux.org/vault/rocky/8.5/isos/x86_64/Rocky-8.5-x86_64-dvd1.iso
rockylinux 8.5 boot:                 https://dl.rockylinux.org/vault/rocky/8.5/isos/x86_64/Rocky-8.5-x86_64-boot.iso
rockylinux 8.4 minimal:              https://dl.rockylinux.org/vault/rocky/8.4/isos/x86_64/Rocky-8.4-x86_64-minimal.iso
rockylinux 8.4 dvd:                  https://dl.rockylinux.org/vault/rocky/8.4/isos/x86_64/Rocky-8.4-x86_64-dvd1.iso
rockylinux 8.4 boot:                 https://dl.rockylinux.org/vault/rocky/8.4/isos/x86_64/Rocky-8.4-x86_64-boot.iso
rockylinux 8.3 minimal:              https://dl.rockylinux.org/vault/rocky/8.3/isos/x86_64/Rocky-8.3-x86_64-minimal.iso
rockylinux 8.3 dvd:                  https://dl.rockylinux.org/vault/rocky/8.3/isos/x86_64/Rocky-8.3-x86_64-dvd1.iso
rockylinux 8.3 boot:                 https://dl.rockylinux.org/vault/rocky/8.3/isos/x86_64/Rocky-8.3-x86_64-boot.iso

# Template file for 'rockylinux'
OSNAME="rockylinux"
PRETTY="Rocky Linux"
BASEDOF="RedHat"
DESCRIPTION="Open-source enterprise operating system designed to be 100% bug-for-bug compatible with Red Hat Enterprise Linux"
HOMEPAGE="https://rockylinux.org"
CREDENTIALS="-"


RELEASES="9.5 9.4 9.3 9.2 9.1 9.0 8.9 8.8 8.7 8.6 8.5 8.4 8.3"
EDITIONS="minimal dvd boot"

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "http://dl.rockylinux.org/vault/rocky/" | grep "^<a href" | grep -v full | grep -v RC | grep -v ISO | cut -d'"' -f2 | tr -d / | sort -ru)
}

function editions_() {
    echo minimal dvd boot
}

function get_() {
    if [[ "${RELEASE}" =~ ^8. ]] && [[ "${EDITION}" == "dvd" ]]; then
        EDITION="dvd1"
    fi
    local HASH=""
    local ISO="Rocky-${RELEASE}-x86_64-${EDITION}.iso"
    local URL=""
    URL="https://dl.rockylinux.org/vault/rocky/${RELEASE}/isos/x86_64"
    HASH=$(web_pipe "${URL}/CHECKSUM" | grep "SHA256" | grep "${ISO})" | cut -d' ' -f4)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
  echo "disk_size=\"32G\"" >> "${CONF_FILE}"
}


siduction

siduction latest kde:                https://mirrors.dotsrc.org/siduction/iso/Shine_on/kde/siduction-2025.1.0-Shine_on-kde-amd64-202503241412.iso
siduction latest lxqt:               https://mirrors.dotsrc.org/siduction/iso/Shine_on/lxqt/siduction-2024.1.0-Shine_on-lxqt-amd64-202412261736.iso
siduction latest nox:                https://mirrors.dotsrc.org/siduction/iso/Shine_on/nox/siduction-2024.1.0-Shine_on-nox-amd64-202412261752.iso
siduction latest xfce:               https://mirrors.dotsrc.org/siduction/iso/Shine_on/xfce/siduction-2024.1.0-Shine_on-xfce-amd64-202412261728.iso
siduction latest xorg:               https://mirrors.dotsrc.org/siduction/iso/Shine_on/xorg/siduction-2024.1.0-Shine_on-xorg-amd64-202412261745.iso

# Template file for 'siduction'
OSNAME="siduction"
PRETTY="siduction"
BASEDOF="Debian"
DESCRIPTION="Operating system based on the Linux kernel and the GNU project. In addition, there are applications and libraries from Debian"
HOMEPAGE="https://siduction.org"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="xorg xfce nox lxqt kde"

function releases_() {
    echo latest
}

function editions_() {
    #shellcheck disable=SC2046,SC2005
    NAME=$(web_pipe "https://mirror.math.princeton.edu/pub/siduction/iso/" | grep folder | cut -d'"' -f8 | tr -d '/')
    web_pipe "https://mirror.math.princeton.edu/pub/siduction/iso/${NAME}/" | grep folder | cut -d'"' -f8 | tr -d '/' | sort -u
}

function get_() {
    local HASH=""
    local DATE=""
    local ISO=""
    local NAME=""
    local URL=""
    NAME=$(web_pipe "https://mirror.math.princeton.edu/pub/siduction/iso/" | grep folder | cut -d'"' -f8 | tr -d '/')
    URL="https://mirrors.dotsrc.org/siduction/iso/${NAME}/${EDITION}"
    DATE=$(web_pipe "${URL}"| grep .iso.md5 | cut -d'-' -f6 | cut -d'.' -f1)
    HASH=$(web_pipe "${URL}/${ISO}.md5" | cut -d' ' -f1)
    VERSION=$(web_pipe "${URL}"| grep .iso.md5 | cut -d'-' -f2)
    ISO="siduction-${VERSION}-${NAME}-${EDITION}-amd64-${DATE}.iso"
    echo "${URL}/${ISO} ${HASH}"
}


slackware

slackware 15.0:                      https://slackware.nl/slackware/slackware-iso/slackware64-15.0-iso/slackware64-15.0-install-dvd.iso
slackware 14.2:                      https://slackware.nl/slackware/slackware-iso/slackware64-14.2-iso/slackware64-14.2-install-dvd.iso
slackware 14.1:                      https://slackware.nl/slackware/slackware-iso/slackware64-14.1-iso/slackware64-14.1-install-dvd.iso
slackware 14.0:                      https://slackware.nl/slackware/slackware-iso/slackware64-14.0-iso/slackware64-14.0-install-dvd.iso
slackware 13.37:                     https://slackware.nl/slackware/slackware-iso/slackware64-13.37-iso/slackware64-13.37-install-dvd.iso

# Template file for 'slackware'
OSNAME="slackware"
PRETTY="slackware"
BASEDOF="-"
DESCRIPTION="Advanced Linux operating system, designed with the twin goals of ease of use and stability as top priorities"
HOMEPAGE="http://www.slackware.com"
CREDENTIALS="-"


RELEASES="15.0 14.2 14.1 14.0 13.37"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://slackware.nl/slackware/slackware-iso/" | grep "slackware-" | cut -d'<' -f7 | cut -d'-' -f2 | sort -ru | head -n 5)
}

function get_() {
    local HASH=""
    local ISO="slackware64-${RELEASE}-install-dvd.iso"
    local URL="https://slackware.nl/slackware/slackware-iso/slackware64-${RELEASE}-iso"
    HASH=$(web_pipe "${URL}/${ISO}.md5" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
}


slax

slax latest debian:                  https://ftp.fi.muni.cz/pub/linux/slax/Slax-12.x/slax-64bit-debian-12.2.0.iso
slax latest slackware:               https://ftp.fi.muni.cz/pub/linux/slax/Slax-15.x/slax-64bit-slackware-15.0.4.iso

# Template file for 'slax'
OSNAME="slax"
PRETTY="Slax"
BASEDOF="Debian Slackware"
DESCRIPTION="Compact, fast, and modern Linux operating system that combines sleek design with modular approach. With the ability to run directly from a USB flash drive without the need for installation, Slax is truly portable and fits easily in your pocket"
HOMEPAGE="https://www.slax.org"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="slackware debian"

function releases_() {
    echo latest
}

function editions_() {
    echo debian slackware
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    case ${EDITION} in
        debian)
            URL="https://ftp.fi.muni.cz/pub/linux/slax/Slax-12.x"
            ISO=$(web_pipe "${URL}/md5.txt" | grep '64bit-' | cut -d' ' -f3 | tail -n1);;
        slackware)
            URL="https://ftp.fi.muni.cz/pub/linux/slax/Slax-15.x"
            ISO=$(web_pipe "${URL}/md5.txt" | grep '64bit-' | cut -d' ' -f3 | tail -n1);;
    esac
    HASH=$(web_pipe "${URL}/md5.txt" | grep '64bit-' | cut -d' ' -f1 | tail -n1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
}


slint

slint 15.0-5:                        https://slackware.uk/slint/x86_64/slint-15.0/iso/slint64-15.0-5.iso

# Template file for 'slint'
OSNAME="slint"
PRETTY="Slint"
BASEDOF="Slackware"
DESCRIPTION="Easy-to-use, versatile, blind-friendly Linux distribution for 64-bit computers. Slint is based on Slackware and borrows tools from Salix"
HOMEPAGE="https://slint.fr"
CREDENTIALS="-"


RELEASES="15.0-5"


function releases_() {
    echo "15.0-5"
}

function get_() {
    local HASH=""
    local MAJ_VER=""
    local ISO="slint64-${RELEASE}.iso"
    MAJ_VER="$(echo "${RELEASE}" | cut -d'-' -f 1)"
    local URL="https://slackware.uk/slint/x86_64/slint-${MAJ_VER}/iso"
    HASH=$(web_pipe "${URL}/${ISO}.sha256" | cut -d' ' -f4)
    echo "${URL}/${ISO}" "${HASH}"
}

function specific_tweaks() {
    echo "disk_size=\"50G\"" >> "${CONF_FILE}"
}


slitaz

slitaz core:                         http://mirror.slitaz.org/iso/rolling/slitaz-rolling-core.iso
slitaz core-5in1:                    http://mirror.slitaz.org/iso/rolling/slitaz-rolling-core-5in1.iso
slitaz core64:                       http://mirror.slitaz.org/iso/rolling/slitaz-rolling-core64.iso
slitaz loram:                        http://mirror.slitaz.org/iso/rolling/slitaz-rolling-loram.iso
slitaz preinit:                      http://mirror.slitaz.org/iso/rolling/slitaz-rolling-preinit.iso

# Template file for 'slitaz'
OSNAME="slitaz"
PRETTY="SliTaz"
BASEDOF="-"
DESCRIPTION="Simple, fast and low resource Linux OS for servers & desktops"
HOMEPAGE="https://www.slitaz.org"
CREDENTIALS="-"


RELEASES="preinit loram core64 core-5in1 core"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://mirror.slitaz.org/iso/rolling/" | grep "class='iso'" | cut -d"'" -f4 | cut -d'-' -f3- | grep iso | cut -d'.' -f1 | sort -u)
}

function get_() {
    local HASH=""
    local ISO="slitaz-rolling-${RELEASE}"
    local URL="http://mirror.slitaz.org/iso/rolling"
    HASH=$(web_pipe "${URL}/${ISO}.md5" | cut -d' ' -f1)
    echo "${URL}/${ISO}.iso ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
    echo "disk_size=\"4G\"" >> "${CONF_FILE}"
    echo "ram=\"512M\"" >> "${CONF_FILE}"
}


solus


# Template file for 'solus'
OSNAME="solus"
PRETTY="Solus"
BASEDOF="-"
DESCRIPTION="Designed for home computing. Every tweak enables us to deliver a cohesive computing experience"
HOMEPAGE="https://getsol.us"
CREDENTIALS="-"


RELEASES=""
EDITIONS=""

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe_json "https://downloads.getsol.us/isos/" | jq -r '.[].name[:-1]' | grep -E "^[0-9-]+$" | sort -u)
}

function editions_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe_json "https://downloads.getsol.us/isos/$(releases_ | tail -n1)/" | jq -r '.[].name | sub("Solus-(?<e>.*)-Release-.*"; "\(.e)")' | sort -u)
}

function get_() {
    local HASH=""
    local ISO="Solus-${EDITION}-Release-${RELEASE}.iso"
    local URL="https://downloads.getsol.us/isos/${RELEASE}"
    HASH=$(web_pipe "${URL}/${ISO}.sha256sum" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


sparkylinux


# Template file for 'sparkylinux'
OSNAME="sparkylinux"
PRETTY="SparkyLinux"
BASEDOF="Debian"
DESCRIPTION="Fast, lightweight and fully customizable operating system which offers several versions for different use cases"
HOMEPAGE="https://sparkylinux.org"
CREDENTIALS="-"


RELEASES=""
EDITIONS=""

function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://sparkylinux.org/download/stable/" |  grep -E -o "sparkylinux-.*\.iso\"" | cut -d'-' -f2 | sort -ru)
}

function editions_() {
    #shellcheck disable=SC2046,SC2005
    if [ -z "${RELEASE}" ]; then
        echo $(web_pipe "https://sparkylinux.org/download/stable/" | grep -E -o "sparkylinux-.*\.iso\"" | cut -d'-' -f4 | cut -d'.' -f1 | sort -u)
    else
        echo $(web_pipe "https://sparkylinux.org/download/stable/" | grep -E -o "sparkylinux-${RELEASE}-.*\.iso\"" | cut -d'-' -f4 | cut -d'.' -f1 | sort -u)
    fi
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    ISO="sparkylinux-${RELEASE}-x86_64-${EDITION}.iso"
    case ${EDITION} in
        minimalcli) URL="https://sourceforge.net/projects/sparkylinux/files/cli";;
        minimalgui) URL="https://sourceforge.net/projects/sparkylinux/files/base";;
        *) URL="https://sourceforge.net/projects/sparkylinux/files/${EDITION}";;
    esac
    HASH=$(web_pipe "${URL}/${ISO}.allsums.txt" | head -n 2 | grep 'iso' | cut -d' ' -f1)
    echo "${URL}/${ISO}" "${HASH}"
}


spirallinux

spirallinux latest Plasma:           https://sourceforge.net/projects/spirallinux/files/12.231005/SpiralLinux_Plasma_12.231005_x86-64.iso
spirallinux latest XFCE:             https://sourceforge.net/projects/spirallinux/files/12.231005/SpiralLinux_XFCE_12.231005_x86-64.iso
spirallinux latest Mate:             https://sourceforge.net/projects/spirallinux/files/12.231005/SpiralLinux_Mate_12.231005_x86-64.iso
spirallinux latest LXQt:             https://sourceforge.net/projects/spirallinux/files/12.231005/SpiralLinux_LXQt_12.231005_x86-64.iso
spirallinux latest Gnome:            https://sourceforge.net/projects/spirallinux/files/12.231005/SpiralLinux_Gnome_12.231005_x86-64.iso
spirallinux latest Budgie:           https://sourceforge.net/projects/spirallinux/files/12.231005/SpiralLinux_Budgie_12.231005_x86-64.iso
spirallinux latest Cinnamon:         https://sourceforge.net/projects/spirallinux/files/12.231005/SpiralLinux_Cinnamon_12.231005_x86-64.iso
spirallinux latest Builder:          https://sourceforge.net/projects/spirallinux/files/12.231005/SpiralLinux_Builder_12.231005_x86-64.iso

# Template file for 'spirallinux'
OSNAME="spirallinux"
PRETTY="Spiral Linux"
BASEDOF="Debian"
DESCRIPTION="Selection of Linux spins built from Debian GNU/Linux, with a focus on simplicity and out-of-the-box usability across all the major desktop environments"
HOMEPAGE="https://spirallinux.github.io"
CREDENTIALS="-"


RELEASES="latest"
EDITIONS="XFCE Plasma Mate LXQt Gnome Cinnamon Builder Budgie"

function releases_() {
    echo latest
}

function editions_() {
    echo Plasma XFCE Mate LXQt Gnome Budgie Cinnamon Builder
}

function get_() {
    local HASH=""
    local ISO="SpiralLinux_${EDITION}_12.231005_x86-64.iso"
    local URL="https://sourceforge.net/projects/spirallinux/files/12.231005"
    HASH=$(web_pipe 'https://sourceforge.net/projects/spirallinux/rss?path=/' | grep "${ISO}" | grep 'md5' | cut -d'<' -f3 | cut -d'>' -f2)
    echo "${URL}/${ISO}" "${HASH}"
}


tails

tails stable:                        https://download.tails.net/tails/stable/tails-amd64-6.14.1/tails-amd64-6.14.1.iso

# Template file for 'tails'
OSNAME="tails"
PRETTY="Tails"
BASEDOF="Debian"
DESCRIPTION="Portable operating system that protects against surveillance and censorship"
HOMEPAGE="https://tails.net"
CREDENTIALS="-"


RELEASES="stable"


function releases_() {
    echo stable
}

function get_() {
    local JSON=""
    local HASH=""
    local URL=""
    JSON="$(web_pipe "https://tails.boum.org/install/v2/Tails/amd64/${RELEASE}/latest.json")"
    URL=$(echo "${JSON}" | jq -r '.installations[0]."installation-paths"[]|select(.type=="iso")|."target-files"[0].url')
    HASH=$(echo "${JSON}" | jq -r '.installations[0]."installation-paths"[]|select(.type=="iso")|."target-files"[0].sha256')
    echo "${URL} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
}


tinycore

tinycore 15 Core:                    https://distro.ibiblio.org/tinycorelinux/15.x/x86/release/Core-15.0.iso
tinycore 15 TinyCore:                https://distro.ibiblio.org/tinycorelinux/15.x/x86/release/TinyCore-15.0.iso
tinycore 15 CorePlus:                https://distro.ibiblio.org/tinycorelinux/15.x/x86/release/CorePlus-15.0.iso
tinycore 15 CorePure64:              https://distro.ibiblio.org/tinycorelinux/15.x/x86_64/release/CorePure64-15.0.iso
tinycore 15 TinyCorePure64:          https://distro.ibiblio.org/tinycorelinux/15.x/x86_64/release/TinyCorePure64-15.0.iso
tinycore 14 Core:                    https://distro.ibiblio.org/tinycorelinux/14.x/x86/release/Core-14.0.iso
tinycore 14 TinyCore:                https://distro.ibiblio.org/tinycorelinux/14.x/x86/release/TinyCore-14.0.iso
tinycore 14 CorePlus:                https://distro.ibiblio.org/tinycorelinux/14.x/x86/release/CorePlus-14.0.iso
tinycore 14 CorePure64:              https://distro.ibiblio.org/tinycorelinux/14.x/x86_64/release/CorePure64-14.0.iso
tinycore 14 TinyCorePure64:          https://distro.ibiblio.org/tinycorelinux/14.x/x86_64/release/TinyCorePure64-14.0.iso

# Template file for 'tinycore'
OSNAME="tinycore"
PRETTY="Tiny Core Linux"
BASEDOF="-"
DESCRIPTION="Highly modular based system with community build extensions"
HOMEPAGE="http://www.tinycorelinux.net"
CREDENTIALS="-"


RELEASES="15 14"
EDITIONS="TinyCorePure64 TinyCore CorePure64 CorePlus Core"

function releases_() {
    echo 15 14
}

function editions_() {
    echo Core TinyCore CorePlus CorePure64 TinyCorePure64
}

function get_() {
    local ARCH="x86"
    local HASH=""
    local ISO="${EDITION}-${RELEASE}.0.iso"
    case "${EDITION}" in
        *Pure*) ARCH+="_64";;
    esac
    # tinycorelinux.net not stable enough
    #local URL="http://www.tinycorelinux.net/${RELEASE}.x/${ARCH}/release"
    local URL="https://distro.ibiblio.org/tinycorelinux/${RELEASE}.x/${ARCH}/release"
    HASH=$(web_pipe "${URL}/${ISO}.md5.txt" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
}


trisquel

trisquel 11.0 mate:                  https://mirrors.ocf.berkeley.edu/trisquel-images/trisquel_11.0_amd64.iso
trisquel 11.0 lxde:                  https://mirrors.ocf.berkeley.edu/trisquel-images/trisquel-mini_11.0_amd64.iso
trisquel 11.0 kde:                   https://mirrors.ocf.berkeley.edu/trisquel-images/triskel_11.0_amd64.iso
trisquel 11.0 sugar:                 https://mirrors.ocf.berkeley.edu/trisquel-images/trisquel-sugar_11.0_amd64.iso
trisquel 10.0.1 mate:                https://mirrors.ocf.berkeley.edu/trisquel-images/trisquel_10.0.1_amd64.iso
trisquel 10.0.1 lxde:                https://mirrors.ocf.berkeley.edu/trisquel-images/trisquel-mini_10.0.1_amd64.iso
trisquel 10.0.1 kde:                 https://mirrors.ocf.berkeley.edu/trisquel-images/triskel_10.0.1_amd64.iso
trisquel 10.0.1 sugar:               https://mirrors.ocf.berkeley.edu/trisquel-images/trisquel-sugar_10.0.1_amd64.iso

# Template file for 'trisquel'
OSNAME="trisquel"
PRETTY="Trisquel"
BASEDOF="Ubuntu"
DESCRIPTION="Fully free operating system for home users, small enterprises and educational centers"
HOMEPAGE="https://trisquel.info"
CREDENTIALS="-"


RELEASES="11.0 10.0.1"
EDITIONS="sugar mate lxde kde"

function releases_() {
    echo 11.0 10.0.1
}

function editions_() {
    echo mate lxde kde sugar
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://mirrors.ocf.berkeley.edu/trisquel-images"
    case ${EDITION} in
        mate) ISO="trisquel_${RELEASE}_amd64.iso";;
        lxde) ISO="trisquel-mini_${RELEASE}_amd64.iso";;
        kde) ISO="triskel_${RELEASE}_amd64.iso";;
        sugar) ISO="trisquel-sugar_${RELEASE}_amd64.iso";;
    esac
    HASH=$(web_pipe "${URL}/${ISO}.sha1" | grep "${ISO}" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


truenas-core

truenas-core 13:                     https://download-core.sys.truenas.net/13.0/STABLE/U6.7/x64/TrueNAS-13.0-U6.7.iso

# Template file for 'truenas-core'
OSNAME="truenas-core"
PRETTY="TrueNAS Core"
BASEDOF="FreeBSD"
DESCRIPTION="Worldâs most popular storage OS because it gives you the power to build your own professional-grade storage system to use in a variety of data-intensive applications without any software costs"
HOMEPAGE="https://www.truenas.com/truenas-core"
CREDENTIALS="-"
GUEST="truenas"

RELEASES="13"


function releases_() {
    echo 13
}

function get_() {
    local ISO=""
    local URL=""
    local DLINFO="https://www.truenas.com/download-truenas-core/"
    URL=$(web_pipe "${DLINFO}" | grep -o "\"https://.*${RELEASE}.*\.iso\"" | cut -d'"' -f 2)
    HASH=$(web_pipe "${URL}".sha256 | cut -d' ' -f1)
    echo "${URL} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
    # the rest is non-functional
    # echo "bootdrive_size=\"5G\"" >> "${CONF_FILE}" # boot drive
    # echo "1stdrive_size=\"20G\"" >> "${CONF_FILE}" # for testing
    # echo "2nddrive_size=\"20G\"" >> "${CONF_FILE}" # again, for testing
}


truenas-scale

truenas-scale 24:                    https://download.sys.truenas.net/TrueNAS-SCALE-ElectricEel/24.10.2.1/TrueNAS-SCALE-24.10.2.1.iso

# Template file for 'truenas-scale'
OSNAME="truenas-scale"
PRETTY="TrueNAS Scale"
BASEDOF="Debian"
DESCRIPTION="Open Source Hyperconverged Infrastructure (HCI) solution. In addition to powerful scale-out storage capabilities, SCALE adds Linux Containers and VMs (KVM) so apps run closer to data"
HOMEPAGE="https://www.truenas.com/truenas-scale"
CREDENTIALS="-"
GUEST="truenas"

RELEASES="24"


function releases_() {
    echo 24
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    local DLINFO="https://www.truenas.com/download-truenas-scale/"
    URL=$(web_pipe "${DLINFO}" | grep -o "\"https://.*${RELEASE}.*\.iso\"" | cut -d'"' -f 2)
    HASH=$(web_pipe "${URL}.sha256" | cut -d' ' -f1)
    echo "${URL} ${HASH}"
}

function specific_tweaks() {
    echo "boot=\"legacy\"" >> "${CONF_FILE}"
    # the rest is non-functional
    # echo "bootdrive_size=\"5G\"" >> "${CONF_FILE}" # boot drive
    # echo "1stdrive_size=\"20G\"" >> "${CONF_FILE}" # for testing
    # echo "2nddrive_size=\"20G\"" >> "${CONF_FILE}" # again, for testing
}


tuxedo-os

tuxedo-os current:                   https://os.tuxedocomputers.com/TUXEDO-OS_current.iso

# Template file for 'tuxedo-os'
OSNAME="tuxedo-os"
PRETTY="Tuxedo OS"
BASEDOF="Ubuntu"
DESCRIPTION="KDE Ubuntu LTS designed to go with their Linux hardware"
HOMEPAGE="https://www.tuxedocomputers.com"
CREDENTIALS="-"


RELEASES="current"


function releases_() {
    echo current
}

function get_() {
    local HASH=""
    local ISO=""
    local URL="https://os.tuxedocomputers.com"
    ISO="$(web_pipe "https://os.tuxedocomputers.com/" | grep -m 1 current.iso | cut -d '=' -f 4 | cut -d '"' -f 2)"
    HASH="$(web_pipe "https://os.tuxedocomputers.com/checksums/${ISO}.sha256" | cut -d ' ' -f 1)"
    echo "${URL}/${ISO} ${HASH}"
}


ubuntu-budgie

ubuntu-budgie 18.04:                 https://cdimage.ubuntu.com/ubuntu-budgie/releases/18.04/release/ubuntu-budgie-18.04.5-desktop-amd64.iso
ubuntu-budgie 20.04:                 https://cdimage.ubuntu.com/ubuntu-budgie/releases/20.04/release/ubuntu-budgie-20.04.6-desktop-amd64.iso
ubuntu-budgie 22.04:                 https://cdimage.ubuntu.com/ubuntu-budgie/releases/22.04/release/ubuntu-budgie-22.04.5-desktop-amd64.iso
ubuntu-budgie 24.04:                 https://cdimage.ubuntu.com/ubuntu-budgie/releases/24.04/release/ubuntu-budgie-24.04.2-desktop-amd64.iso
ubuntu-budgie 24.10:                 https://cdimage.ubuntu.com/ubuntu-budgie/releases/24.10/release/ubuntu-budgie-24.10-desktop-amd64.iso
ubuntu-budgie daily-live:            https://cdimage.ubuntu.com/ubuntu-budgie/daily-live/current/plucky-desktop-amd64.iso

# Template file for 'ubuntu-budgie'
OSNAME="ubuntu-budgie"
PRETTY="Ubuntu Budgie"
BASEDOF="Ubuntu"
DESCRIPTION="Community developed distribution, integrating the Budgie Desktop Environment with Ubuntu at its core"
HOMEPAGE="https://ubuntubudgie.org"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


ubuntu-cinnamon


# Template file for 'ubuntu-cinnamon'
OSNAME="ubuntu-cinnamon"
PRETTY="Ubuntu Cinnamon"
BASEDOF="Ubuntu"
DESCRIPTION="Community-driven, featuring Linux Mintâs Cinnamon Desktop with Ubuntu at the core, packed fast and full of features, here is the most traditionally modern desktop you will ever love"
HOMEPAGE="https://ubuntucinnamon.org"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


ubuntu-kylin


# Template file for 'ubuntu-kylin'
OSNAME="ubuntu-kylin"
PRETTY="Ubuntu Kylin"
BASEDOF="Ubuntu"
DESCRIPTION="Universal desktop operating system for personal computers, laptops, and embedded devices. It is dedicated to bringing a smarter user experience to users all over the world"
HOMEPAGE="https://ubuntukylin.com"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


ubuntu-mate

ubuntu-mate 16.04:                   https://cdimage.ubuntu.com/ubuntu-mate/releases/16.04/release/ubuntu-mate-16.04.6-desktop-amd64.iso
ubuntu-mate 18.04:                   https://cdimage.ubuntu.com/ubuntu-mate/releases/18.04/release/ubuntu-mate-18.04.5-desktop-amd64.iso
ubuntu-mate 20.04:                   https://cdimage.ubuntu.com/ubuntu-mate/releases/20.04/release/ubuntu-mate-20.04.6-desktop-amd64.iso
ubuntu-mate 22.04:                   https://cdimage.ubuntu.com/ubuntu-mate/releases/22.04/release/ubuntu-mate-22.04.5-desktop-amd64.iso
ubuntu-mate 24.04:                   https://cdimage.ubuntu.com/ubuntu-mate/releases/24.04/release/ubuntu-mate-24.04.2-desktop-amd64.iso
ubuntu-mate 24.10:                   https://cdimage.ubuntu.com/ubuntu-mate/releases/24.10/release/ubuntu-mate-24.10-desktop-amd64.iso
ubuntu-mate daily-live:              https://cdimage.ubuntu.com/ubuntu-mate/daily-live/current/plucky-desktop-amd64.iso

# Template file for 'ubuntu-mate'
OSNAME="ubuntu-mate"
PRETTY="Ubuntu Mate"
BASEDOF="Ubuntu"
DESCRIPTION="Stable, easy-to-use operating system with a configurable desktop environment. It is ideal for those who want the most out of their computers and prefer a traditional desktop metaphor. Using Mate desktop"
HOMEPAGE="https://ubuntu-mate.org"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


ubuntu-server

ubuntu-server daily-live:            https://cdimage.ubuntu.com/ubuntu-server/daily-live/current/plucky-live-server-amd64.iso
ubuntu-server 24.10:                 https://releases.ubuntu.com/24.10/ubuntu-24.10-live-server-amd64.iso
ubuntu-server 24.04:                 https://releases.ubuntu.com/24.04/ubuntu-24.04.2-live-server-amd64.iso
ubuntu-server 22.04:                 https://releases.ubuntu.com/22.04/ubuntu-22.04.5-live-server-amd64.iso
ubuntu-server 20.04:                 https://releases.ubuntu.com/20.04/ubuntu-20.04.6-live-server-amd64.iso
ubuntu-server 18.04:                 https://releases.ubuntu.com/18.04/ubuntu-18.04.6-live-server-amd64.iso
ubuntu-server 16.04:                 https://releases.ubuntu.com/16.04/ubuntu-16.04.7-server-amd64.iso
ubuntu-server 14.04:                 https://releases.ubuntu.com/14.04/ubuntu-14.04.6-server-amd64.iso

# Template file for 'ubuntu-server'
OSNAME="ubuntu-server"
PRETTY="Ubuntu Server"
BASEDOF="Debian"
DESCRIPTION="Brings economic and technical scalability to your datacentre, public or private. Whether you want to deploy an OpenStack cloud, a Kubernetes cluster or a 50,000-node render farm, Ubuntu Server delivers the best value scale-out performance available"
HOMEPAGE="https://ubuntu.com/server"
CREDENTIALS="-"


RELEASES=""


function releases_() {
    local ALL_VERSIONS=()
    # shellcheck disable=SC2207
    ALL_VERSIONS=($(IFS=$'\n' web_pipe http://releases.ubuntu.com/streams/v1/com.ubuntu.releases:ubuntu-server.json | jq -r '.products[] | select(.arch=="amd64") | .version' | sort -rV))
    echo daily-live "${ALL_VERSIONS[@]}"
}

function get_() {
    local HASH=""
    local ISO=""
    local NAME="live-server"
    local URL=""

    if [[ "${RELEASE}" == "daily"* ]]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
    else
        URL="https://releases.ubuntu.com/${RELEASE}"
    fi

    case "${RELEASE}" in
        14*|16*) NAME="server";;
    esac

    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep "${NAME}" | grep amd64 | grep iso)
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep "${NAME}" | grep amd64 | grep iso)
        ISO=$(cut -d' ' -f3 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}

function specific_tweaks() {
    # 22.04+ fails on LVM build if disk size is < 10G
    # 22.04.1 fails on auto-install if TPM is disabled
    echo "disk_size=\"10G\"" >> "${CONF_FILE}"
    echo "ram=\"4G\"" >> "${CONF_FILE}"
    if [[ "${RELEASE}" == *"22.04"* ]]; then
        echo "tpm=\"on\"" >> "${CONF_FILE}"
    fi
}


ubuntu-unity

ubuntu-unity 24.04:                  https://cdimage.ubuntu.com/ubuntu-unity/releases/24.04/release/ubuntu-unity-24.04.2-desktop-amd64.iso
ubuntu-unity 24.10:                  https://cdimage.ubuntu.com/ubuntu-unity/releases/24.10/release/ubuntu-unity-24.10-desktop-amd64.iso
ubuntu-unity daily-live:             https://cdimage.ubuntu.com/ubuntu-unity/daily-live/current/plucky-desktop-amd64.iso

# Template file for 'ubuntu-unity'
OSNAME="ubuntu-unity"
PRETTY="Ubuntu Unity"
BASEDOF="Ubuntu"
DESCRIPTION="Flavor of Ubuntu featuring the Unity7 desktop environment (the default desktop environment used by Ubuntu from 2010-2017)"
HOMEPAGE="https://ubuntuunity.org"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


ubuntu

ubuntu 14.04:                        https://releases.ubuntu.com/14.04/ubuntu-14.04.6-desktop-amd64.iso
ubuntu 16.04:                        https://releases.ubuntu.com/16.04/ubuntu-16.04.7-desktop-amd64.iso
ubuntu 18.04:                        https://releases.ubuntu.com/18.04/ubuntu-18.04.6-desktop-amd64.iso
ubuntu 20.04:                        https://releases.ubuntu.com/20.04/ubuntu-20.04.6-desktop-amd64.iso
ubuntu 22.04:                        https://releases.ubuntu.com/22.04/ubuntu-22.04.5-desktop-amd64.iso
ubuntu 24.04:                        https://releases.ubuntu.com/24.04/ubuntu-24.04.2-desktop-amd64.iso
ubuntu 24.10:                        https://releases.ubuntu.com/24.10/ubuntu-24.10-desktop-amd64.iso
ubuntu daily-live:                   https://cdimage.ubuntu.com/ubuntu/daily-live/current/plucky-desktop-amd64.iso

# Template file for 'ubuntu'
OSNAME="ubuntu"
PRETTY="Ubuntu"
BASEDOF="Debian"
DESCRIPTION="Complete desktop Linux operating system, freely available with both community and professional support"
HOMEPAGE="https://ubuntu.com"
CREDENTIALS="-"
GUEST="linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


ubuntustudio

ubuntustudio 16.04:                  https://cdimage.ubuntu.com/ubuntustudio/releases/16.04/release/ubuntustudio-16.04.5-dvd-amd64.iso
ubuntustudio 18.04:                  https://cdimage.ubuntu.com/ubuntustudio/releases/18.04/release/ubuntustudio-18.04-dvd-amd64.iso
ubuntustudio 20.04:                  https://cdimage.ubuntu.com/ubuntustudio/releases/20.04/release/ubuntustudio-20.04.5-dvd-amd64.iso
ubuntustudio 22.04:                  https://cdimage.ubuntu.com/ubuntustudio/releases/22.04/release/ubuntustudio-22.04.5-dvd-amd64.iso
ubuntustudio 24.04:                  https://cdimage.ubuntu.com/ubuntustudio/releases/24.04/release/ubuntustudio-24.04.2-dvd-amd64.iso
ubuntustudio 24.10:                  https://cdimage.ubuntu.com/ubuntustudio/releases/24.10/release/ubuntustudio-24.10-desktop-amd64.iso
UbuntuStudio dvd is currently unavailable. Please select other OS/Release combination

# Template file for 'ubuntustudio'
OSNAME="ubuntustudio"
PRETTY="UbuntuStudio"
BASEDOF="Ubuntu"
DESCRIPTION="Comes preinstalled with a selection of the most common free multimedia applications available, and is configured for best performance for various purposes: Audio, Graphics, Video, Photography and Publishing"
HOMEPAGE="https://ubuntustudio.org"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


vanillaos

vanillaos 22.10-r8:                  https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r8/VanillaOS-22.10-all.20230226.iso
vanillaos 22.10-r7.5:                https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r7.5/VanillaOS-22.10-all.20230214.iso
vanillaos 22.10-r7:                  https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r7.5/VanillaOS-22.10-all.20230214.iso
vanillaos 22.10-r6:                  https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r6/VanillaOS-22.10-all.20230123.iso
vanillaos 22.10-r5:                  https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r5/VanillaOS-22.10-all.20230116.iso
vanillaos 22.10-r4:                  https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r4/VanillaOS-22.10-all.20230115.iso
vanillaos 22.10-r3:                  https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r3/VanillaOS-22.10-all.20230105.iso
vanillaos 22.10-r2:                  https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r2/VanillaOS-22.10-all.20221231.iso
vanillaos 22.10-r1:                  https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r1/VanillaOS-22.10-all.20221230.iso
vanillaos 22.10:                     https://github.com/Vanilla-OS/live-iso/releases/download/22.10-r8/VanillaOS-22.10-all.20230226.iso
vanillaos 2.0:                       https://github.com/Vanilla-OS/live-iso/releases/download/2.0/VanillaOS-2-stable.20250220.iso

# Template file for 'vanillaos'
OSNAME="vanillaos"
PRETTY="Vanilla OS"
BASEDOF="Ubuntu"
DESCRIPTION="Designed to be a reliable and productive operating system for your daily work"
HOMEPAGE="https://vanillaos.org"
CREDENTIALS="-"


RELEASES="22.10-r8 22.10-r7.5 22.10-r7 22.10-r6 22.10-r5 22.10-r4 22.10-r3 22.10-r2 22.10-r1 22.10 2.0"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://api.github.com/repos/Vanilla-OS/live-iso/releases" | grep 'download_url' | cut -d'/' -f8 | sort -ru)
}

function get_() {
    local HASH=""
    local HASH_URL=""
    local ISO=""
    ISO=$(web_pipe "https://api.github.com/repos/Vanilla-OS/live-iso/releases" | grep 'download_url' | grep "${RELEASE}" | head -n 1 | cut -d'"' -f4)
    HASH_URL="${ISO//.iso/.sha256.txt}"
    HASH=$(web_pipe "${HASH_URL}" | cut -d' ' -f1)
    echo "${ISO} ${HASH}"
}

function specific_tweaks() {
    ## Minimum is 50G for abroot, but a 64GB is allocated to give some headroom
    echo "disk_size=\"64G\"" >> "${CONF_FILE}"
}


ventoy

ventoy 1.1.05:                       https://github.com/ventoy/Ventoy/releases/download/v1.1.05/ventoy-1.1.05-livecd.iso
ventoy 1.1.04:                       https://github.com/ventoy/Ventoy/releases/download/v1.1.04/ventoy-1.1.04-livecd.iso
ventoy 1.1.02:                       https://github.com/ventoy/Ventoy/releases/download/v1.1.02/ventoy-1.1.02-livecd.iso
ventoy 1.1.01:                       https://github.com/ventoy/Ventoy/releases/download/v1.1.01/ventoy-1.1.01-livecd.iso
ventoy 1.1.00:                       https://github.com/ventoy/Ventoy/releases/download/v1.1.00/ventoy-1.1.00-livecd.iso
ventoy 1.0.99:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.99/ventoy-1.0.99-livecd.iso
ventoy 1.0.98:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.98/ventoy-1.0.98-livecd.iso
ventoy 1.0.97:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.97/ventoy-1.0.97-livecd.iso
ventoy 1.0.96:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.96/ventoy-1.0.96-livecd.iso
ventoy 1.0.95:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.95/ventoy-1.0.95-livecd.iso
ventoy 1.0.94:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.94/ventoy-1.0.94-livecd.iso
ventoy 1.0.93:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.93/ventoy-1.0.93-livecd.iso
ventoy 1.0.91:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.91/ventoy-1.0.91-livecd.iso
ventoy 1.0.90:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.90/ventoy-1.0.90-livecd.iso
ventoy 1.0.89:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.89/ventoy-1.0.89-livecd.iso
ventoy 1.0.88:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.88/ventoy-1.0.88-livecd.iso
ventoy 1.0.87:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.87/ventoy-1.0.87-livecd.iso
ventoy 1.0.86:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.86/ventoy-1.0.86-livecd.iso
ventoy 1.0.85:                       https://github.com/ventoy/Ventoy/releases/download/v1.0.85/ventoy-1.0.85-livecd.iso

# Template file for 'ventoy'
OSNAME="ventoy"
PRETTY="Ventoy"
BASEDOF="Void"
DESCRIPTION="Tool to create bootable USB drive for ISO/WIM/IMG/VHD(x)/EFI files. "
HOMEPAGE="https://www.ventoy.net"
CREDENTIALS="-"


RELEASES="1.1.05 1.1.04 1.1.02 1.1.01 1.1.00 1.0.99 1.0.98 1.0.97 1.0.96 1.0.95 1.0.94 1.0.93 1.0.91 1.0.90 1.0.89 1.0.88 1.0.87 1.0.86 1.0.85"


function releases_() {
    echo $(web_pipe "https://sourceforge.net/projects/ventoy/rss?path=/" | grep 'title><!\[CDATA' | cut -d'[' -f3 | cut -d']' -f1 | grep '.iso' | cut -d'-' -f2)
}

function get_() {
    local HASH=""
    local ISO="ventoy-${RELEASE}-livecd.iso"
    local URL="https://github.com/ventoy/Ventoy/releases/download/v${RELEASE}"
    HASH="$(wget -q -O- "${URL}/sha256.txt" | grep "${ISO}" | cut -d' ' -f4)"
    echo "${URL}/${ISO} ${HASH}"
}


void

void current glibc:                  https://repo-default.voidlinux.org/live/current/void-live-x86_64-20250202-base.iso
void current musl:                   https://repo-default.voidlinux.org/live/current/void-live-x86_64-musl-20250202-base.iso
void current xfce-glibc:             https://repo-default.voidlinux.org/live/current/void-live-x86_64-20250202-xfce.iso
void current xfce-musl:              https://repo-default.voidlinux.org/live/current/void-live-x86_64-musl-20250202-xfce.iso

# Template file for 'void'
OSNAME="void"
PRETTY="Void Linux"
BASEDOF="-"
DESCRIPTION="General purpose operating system. Its package system allows you to quickly install, update and remove software; software is provided in binary packages or can be built directly from sources"
HOMEPAGE="https://voidlinux.org"
CREDENTIALS="anon:voidlinux root:voidlinux"


RELEASES="current"
EDITIONS="xfce-musl xfce-glibc musl glibc"

function releases_() {
    echo current
}

function editions_() {
    echo glibc musl xfce-glibc xfce-musl
}

function get_() {
    local DATE=""
    local HASH=""
    local ISO=""
    local URL="https://repo-default.voidlinux.org/live/current"
    DATE=$(web_pipe "$URL" | grep "^<a href=\"void-live-x86_64-" | cut -d'-' -f5 | tail -1)
    case ${EDITION} in
        glibc) ISO="void-live-x86_64-${DATE}-base.iso";;
        musl) ISO="void-live-x86_64-musl-${DATE}-base.iso";;
        xfce-glibc) ISO="void-live-x86_64-${DATE}-xfce.iso";;
        xfce-musl) ISO="void-live-x86_64-musl-${DATE}-xfce.iso";;
    esac
    HASH="$(web_pipe "${URL}/sha256sum.txt" | grep "${ISO}" | cut -d' ' -f4)"
    echo "${URL}/${ISO} ${HASH}"
}


vxlinux

vxlinux 6.1.5:                       https://github.com/VX-Linux/main/releases/download/6.1.5/vx-6.1.5.iso

# Template file for 'vxlinux'
OSNAME="vxlinux"
PRETTY="VX Linux"
BASEDOF="Void"
DESCRIPTION="Pre-configured, secure systemd-free Plasma desktop with focus on convenience, performance and simplicity. Based on the excellent Void Linux"
HOMEPAGE="https://vxlinux.org"
CREDENTIALS="-"


RELEASES="6.1.5"


function releases_() {
    #shellcheck disable=SC2046,SC2005
    echo $(web_pipe "https://github.com/VX-Linux/main/releases/latest" | grep -o -e 'releases/tag/[[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]' | sort -u | cut -d'/' -f 3)
}

function get_() {
    local HASH=""
    local ISO="vx-${RELEASE}.iso"
    # Newer ISOs are only on mega.nz
    # TODO Needs to be checked manually? without mega client?
    # local URL="https://mega.nz/folder/SxwFTCTZ#s_qwDWrSWr7ZSTBVJC9Q_g/file"
    local URL="https://github.com/VX-Linux/main/releases/download/${RELEASE}"
    HASH=$(web_pipe "${URL}/vx-${RELEASE}.md5" | cut -d' ' -f1)
    echo "${URL}/${ISO} ${HASH}"
}


windows-server


# Template file for 'windows-server'
OSNAME="windows-server"
PRETTY="Windows Server"
BASEDOF="-"
DESCRIPTION="Platform for building an infrastructure of connected applications, networks, and web services"
HOMEPAGE="https://www.microsoft.com/en-us/windows-server"
CREDENTIALS="-"
GUEST="windows-server"

RELEASES=""


function releases_() {
    echo 2022 2019 2016
}

function languages_() {
    I18NS=("English (United States)" "Chinese (Simplified)" "French" "German" "Italian" "Japanese" "Russian" "Spanish")
}

function unattended_windows() {
    mkdir -p "${1}/unattended" 2>/dev/null

    cat << 'EOF' > "${1}/unattended/autounattend.xml"
<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend"
  xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!--
       For documentation on components:
       https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/
  -->
  <settings pass="offlineServicing">
    <component name="Microsoft-Windows-LUA-Settings" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <EnableLUA>false</EnableLUA>
    </component>
    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <ComputerName>*</ComputerName>
    </component>
  </settings>

  <settings pass="generalize">
    <component name="Microsoft-Windows-PnPSysprep" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
      <PersistAllDeviceInstalls>true</PersistAllDeviceInstalls>
    </component>
    <component name="Microsoft-Windows-Security-SPP" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <SkipRearm>1</SkipRearm>
    </component>
  </settings>

  <settings pass="specialize">
    <component name="Microsoft-Windows-Security-SPP-UX" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <SkipAutoActivation>true</SkipAutoActivation>
    </component>
    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <ComputerName>*</ComputerName>
      <OEMInformation>
        <Manufacturer>Quickemu Project</Manufacturer>
        <Model>Quickemu</Model>
        <SupportHours>24/7</SupportHours>
        <SupportPhone></SupportPhone>
        <SupportProvider>Quickemu Project</SupportProvider>
        <SupportURL>https://github.com/quickemu-project/quickemu/issues</SupportURL>
      </OEMInformation>
      <OEMName>Quickemu Project</OEMName>
      <ProductKey>W269N-WFGWX-YVC9B-4J6C9-T83GX</ProductKey>
    </component>
    <component name="Microsoft-Windows-SQMApi" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <CEIPEnabled>0</CEIPEnabled>
    </component>
  </settings>

  <settings pass="windowsPE">
    <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Diagnostics>
        <OptIn>false</OptIn>
      </Diagnostics>
      <DiskConfiguration>
        <Disk wcm:action="add">
          <DiskID>0</DiskID>
          <WillWipeDisk>true</WillWipeDisk>
          <CreatePartitions>
            <!-- Windows RE Tools partition -->
            <CreatePartition wcm:action="add">
              <Order>1</Order>
              <Type>Primary</Type>
              <Size>256</Size>
            </CreatePartition>
            <!-- System partition (ESP) -->
            <CreatePartition wcm:action="add">
              <Order>2</Order>
              <Type>EFI</Type>
              <Size>128</Size>
            </CreatePartition>
            <!-- Microsoft reserved partition (MSR) -->
            <CreatePartition wcm:action="add">
              <Order>3</Order>
              <Type>MSR</Type>
              <Size>128</Size>
            </CreatePartition>
            <!-- Windows partition -->
            <CreatePartition wcm:action="add">
              <Order>4</Order>
              <Type>Primary</Type>
              <Extend>true</Extend>
            </CreatePartition>
          </CreatePartitions>
          <ModifyPartitions>
            <!-- Windows RE Tools partition -->
            <ModifyPartition wcm:action="add">
              <Order>1</Order>
              <PartitionID>1</PartitionID>
              <Label>WINRE</Label>
              <Format>NTFS</Format>
              <TypeID>DE94BBA4-06D1-4D40-A16A-BFD50179D6AC</TypeID>
            </ModifyPartition>
            <!-- System partition (ESP) -->
            <ModifyPartition wcm:action="add">
              <Order>2</Order>
              <PartitionID>2</PartitionID>
              <Label>System</Label>
              <Format>FAT32</Format>
            </ModifyPartition>
            <!-- MSR partition does not need to be modified -->
            <ModifyPartition wcm:action="add">
              <Order>3</Order>
              <PartitionID>3</PartitionID>
            </ModifyPartition>
            <!-- Windows partition -->
              <ModifyPartition wcm:action="add">
              <Order>4</Order>
              <PartitionID>4</PartitionID>
              <Label>Windows</Label>
              <Letter>C</Letter>
              <Format>NTFS</Format>
            </ModifyPartition>
          </ModifyPartitions>
        </Disk>
      </DiskConfiguration>
      <DynamicUpdate>
        <Enable>true</Enable>
        <WillShowUI>Never</WillShowUI>
      </DynamicUpdate>
      <ImageInstall>
        <OSImage>
          <InstallTo>
            <DiskID>0</DiskID>
            <PartitionID>4</PartitionID>
          </InstallTo>
          <InstallToAvailablePartition>false</InstallToAvailablePartition>
        </OSImage>
      </ImageInstall>
      <RunSynchronous>
        <RunSynchronousCommand wcm:action="add">
          <Order>1</Order>
          <Path>reg add HKLM\System\Setup\LabConfig /v BypassCPUCheck /t REG_DWORD /d 0x00000001 /f</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>2</Order>
          <Path>reg add HKLM\System\Setup\LabConfig /v BypassRAMCheck /t REG_DWORD /d 0x00000001 /f</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>3</Order>
          <Path>reg add HKLM\System\Setup\LabConfig /v BypassSecureBootCheck /t REG_DWORD /d 0x00000001 /f</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>4</Order>
          <Path>reg add HKLM\System\Setup\LabConfig /v BypassTPMCheck /t REG_DWORD /d 0x00000001 /f</Path>
        </RunSynchronousCommand>
      </RunSynchronous>
      <UpgradeData>
        <Upgrade>false</Upgrade>
        <WillShowUI>Never</WillShowUI>
      </UpgradeData>
      <UserData>
        <AcceptEula>true</AcceptEula>
        <FullName>Quickemu</FullName>
        <Organization>Quickemu Project</Organization>
        <!-- https://docs.microsoft.com/en-us/windows-server/get-started/kms-client-activation-keys -->
        <ProductKey>
          <Key>W269N-WFGWX-YVC9B-4J6C9-T83GX</Key>
          <WillShowUI>Never</WillShowUI>
        </ProductKey>
      </UserData>
    </component>

    <component name="Microsoft-Windows-PnpCustomizationsWinPE" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" processorArchitecture="amd64" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <!--
           This makes the VirtIO drivers available to Windows, assuming that
           the VirtIO driver disk is available as drive E:
           https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md
      -->
      <DriverPaths>
        <PathAndCredentials wcm:action="add" wcm:keyValue="1">
          <Path>E:\qemufwcfg\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="2">
          <Path>E:\vioinput\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="3">
          <Path>E:\vioscsi\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="4">
          <Path>E:\viostor\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="5">
          <Path>E:\vioserial\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="6">
          <Path>E:\qxldod\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="7">
          <Path>E:\amd64\w10</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="8">
          <Path>E:\viogpudo\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="9">
          <Path>E:\viorng\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="10">
          <Path>E:\NetKVM\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="11">
          <Path>E:\viofs\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="12">
          <Path>E:\Balloon\w10\amd64</Path>
        </PathAndCredentials>
      </DriverPaths>
    </component>
  </settings>

  <settings pass="oobeSystem">
    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <AutoLogon>
        <Password>
          <Value>quickemu</Value>
          <PlainText>true</PlainText>
        </Password>
        <Enabled>true</Enabled>
        <Username>Quickemu</Username>
      </AutoLogon>
      <DisableAutoDaylightTimeSet>false</DisableAutoDaylightTimeSet>
      <OOBE>
        <HideEULAPage>true</HideEULAPage>
        <HideLocalAccountScreen>true</HideLocalAccountScreen>
        <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>
        <HideOnlineAccountScreens>true</HideOnlineAccountScreens>
        <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
        <NetworkLocation>Home</NetworkLocation>
        <ProtectYourPC>3</ProtectYourPC>
        <SkipUserOOBE>true</SkipUserOOBE>
        <SkipMachineOOBE>true</SkipMachineOOBE>
        <VMModeOptimizations>
          <SkipWinREInitialization>true</SkipWinREInitialization>
        </VMModeOptimizations>
      </OOBE>
      <UserAccounts>
        <LocalAccounts>
          <LocalAccount wcm:action="add">
            <Password>
              <Value>quickemu</Value>
              <PlainText>true</PlainText>
            </Password>
            <Description>Quickemu</Description>
            <DisplayName>Quickemu</DisplayName>
            <Group>Administrators</Group>
            <Name>Quickemu</Name>
          </LocalAccount>
        </LocalAccounts>
      </UserAccounts>
      <RegisteredOrganization>Quickemu Project</RegisteredOrganization>
      <RegisteredOwner>Quickemu</RegisteredOwner>
      <FirstLogonCommands>
        <SynchronousCommand wcm:action="add">
          <CommandLine>msiexec /i E:\guest-agent\qemu-ga-x86_64.msi /quiet /passive /qn</CommandLine>
          <Description>Install Virtio Guest Agent</Description>
          <Order>1</Order>
        </SynchronousCommand>
        <SynchronousCommand wcm:action="add">
          <CommandLine>msiexec /i F:\spice-webdavd-x64-latest.msi /quiet /passive /qn</CommandLine>
          <Description>Install spice-webdavd file sharing agent</Description>
          <Order>2</Order>
        </SynchronousCommand>
        <SynchronousCommand wcm:action="add">
          <CommandLine>msiexec /i F:\UsbDk_1.0.22_x64.msi /quiet /passive /qn</CommandLine>
          <Description>Install usbdk USB sharing agent</Description>
          <Order>3</Order>
        </SynchronousCommand>
        <SynchronousCommand wcm:action="add">
          <CommandLine>msiexec /i F:\spice-vdagent-x64-0.10.0.msi /quiet /passive /qn</CommandLine>
          <Description>Install spice-vdagent SPICE agent</Description>
          <Order>4</Order>
        </SynchronousCommand>
        <SynchronousCommand wcm:action="add">
          <CommandLine>Cmd /c POWERCFG -H OFF</CommandLine>
          <Description>Disable Hibernation</Description>
          <Order>5</Order>
        </SynchronousCommand>
      </FirstLogonCommands>
    </component>
  </settings>
</unattend>
EOF


echo "Downloading Spice drivers..."
web_get https://www.spice-space.org/download/windows/spice-webdavd/spice-webdavd-x64-latest.msi "${VM_PATH}/unattended"
web_get https://www.spice-space.org/download/windows/vdagent/vdagent-win-0.10.0/spice-vdagent-x64-0.10.0.msi "${VM_PATH}/unattended"
web_get https://www.spice-space.org/download/windows/usbdk/UsbDk_1.0.22_x64.msi "${VM_PATH}/unattended"

echo "Making unattended.iso"
mkisofs -quiet -l -o "${VM_PATH}/unattended.iso" "${VM_PATH}/unattended/"
}

function handle_curl_error() {
    local error_code="$1"
    local fatal_error_action=2
    case "$error_code" in
        6)
            echo "Failed to resolve Microsoft servers! Is there an Internet connection? Exiting..."
            return "$fatal_error_action"
            ;;
        7)
            echo "Failed to contact Microsoft servers! Is there an Internet connection or is the server down?"
            ;;
        8)
            echo "Microsoft servers returned a malformed HTTP response!"
            ;;
        22)
            echo "Microsoft servers returned a failing HTTP status code!"
            ;;
        23)
            echo "Failed at writing Windows media to disk! Out of disk space or permission error? Exiting..."
            return "$fatal_error_action"
            ;;
        26)
            echo "Ran out of memory during download! Exiting..."
            return "$fatal_error_action"
            ;;
        36)
            echo "Failed to continue earlier download!"
            ;;
        63)
            echo "Microsoft servers returned an unexpectedly large response!"
            ;;
            # POSIX defines exit statuses 1-125 as usable by us
            # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_08_02
            $((error_code <= 125)))
            # Must be some other server or network error (possibly with this specific request/file)
            # This is when accounting for all possible errors in the curl manual assuming a correctly formed curl command and an HTTP(S) request, using only the curl features we're using, and a sane build
            echo "Miscellaneous server or network error!"
            ;;
        126 | 127 )
            echo "Curl command not found! Please install curl and try again. Exiting..."
            return "$fatal_error_action"
            ;;
        # Exit statuses are undefined by POSIX beyond this point
        *)
            case "$(kill -l "$error_code")" in
            # Signals defined to exist by POSIX:
            # https://pubs.opengroup.org/onlinepubs/009695399/basedefs/signal.h.html
            INT)
                echo "Curl was interrupted!"
                ;;
            # There could be other signals but these are most common
            SEGV | ABRT )
                echo "Curl crashed! Failed exploitation attempt? Please report any core dumps to curl developers. Exiting..."
                return "$fatal_error_action"
                ;;
            *)
                echo "Curl terminated due to a fatal signal!"
                ;;
            esac
    esac
    return 1
}

function download_windows_server() {
    local iso_download_page_html=""
    # Copyright (C) 2024 Elliot Killick <contact@elliotkillick.com>
    # This function is adapted from the Mido project:
    # https://github.com/ElliotKillick/Mido

    # Download enterprise evaluation Windows versions
    local windows_version="$1"
    local enterprise_type="$2"
    local PRETTY_RELEASE=""

    case "${RELEASE}" in
        *) PRETTY_RELEASE="${RELEASE}";;
    esac

    echo "Downloading $(pretty_name "${OS}") ${PRETTY_RELEASE} (${I18N})"

    local url="https://www.microsoft.com/en-us/evalcenter/download-$windows_version"

    echo " - Parsing download page: ${url}"
    iso_download_page_html="$(curl --disable --silent --location --max-filesize 1M --fail --proto =https --tlsv1.2 --http1.1 -- "$url")" || {
        handle_curl_error $?
        return $?
    }

    if ! [ "$iso_download_page_html" ]; then
        # This should only happen if there's been some change to where this download page is located
        echo " - Windows server download page gave us an empty response"
        return 1
    fi

    local CULTURE=""
    local COUNTRY=""
    case "${I18N}" in
        "English (Great Britain)")
            CULTURE="en-gb"
            COUNTRY="GB";;
        "Chinese (Simplified)")
            CULTURE="zh-cn"
            COUNTRY="CN";;
        "Chinese (Traditional)")
            CULTURE="zh-tw"
            COUNTRY="TW";;
        "French")
            CULTURE="fr-fr"
            COUNTRY="FR";;
        "German")
            CULTURE="de-de"
            COUNTRY="DE";;
        "Italian")
            CULTURE="it-it"
            COUNTRY="IT";;
        "Japanese")
            CULTURE="ja-jp"
            COUNTRY="JP";;
        "Korean")
            CULTURE="ko-kr"
            COUNTRY="KR";;
        "Portuguese (Brazil)")
            CULTURE="pt-br"
            COUNTRY="BR";;
        "Spanish")
            CULTURE="es-es"
            COUNTRY="ES";;
        "Russian")
            CULTURE="ru-ru"
            COUNTRY="RU";;
        *)
            CULTURE="en-us"
            COUNTRY="US";;
    esac

    echo " - Getting download link.."
    iso_download_links="$(echo "$iso_download_page_html" | grep -o "https://go.microsoft.com/fwlink/p/?LinkID=[0-9]\+&clcid=0x[0-9a-z]\+&culture=${CULTURE}&country=${COUNTRY}")" || {
        # This should only happen if there's been some change to the download endpoint web address
        echo " - Windows server download page gave us no download link"
        return 1
    }

    # Limit untrusted size for input validation
    iso_download_links="$(echo "$iso_download_links" | head -c 1024)"

    case "$enterprise_type" in
        # Select x64 download link
        "enterprise") iso_download_link=$(echo "$iso_download_links" | head -n 2 | tail -n 1) ;;
        # Select x64 LTSC download link
        "ltsc") iso_download_link=$(echo "$iso_download_links" | head -n 4 | tail -n 1) ;;
        *) iso_download_link="$iso_download_links" ;;
    esac

    # Follow redirect so proceeding log message is useful
    # This is a request we make this Fido doesn't
    # We don't need to set "--max-filesize" here because this is a HEAD request and the output is to /dev/null anyway
    iso_download_link="$(curl --disable --silent --location --output /dev/null --silent --write-out "%{url_effective}" --head --fail --proto =https --tlsv1.2 --http1.1 -- "$iso_download_link")" || {
        # This should only happen if the Microsoft servers are down
        handle_curl_error $?
        return $?
    }

    # Limit untrusted size for input validation
    iso_download_link="$(echo "$iso_download_link" | head -c 1024)"

    echo " - URL: $iso_download_link"

    # Download ISO
    FILE_NAME="${iso_download_link##*/}"
    web_get "${iso_download_link}" "${VM_PATH}" "${FILE_NAME}"
    OS="windows-server"
}

function download_windows_workstation() {
    local HASH=""
    local session_id=""
    local iso_download_page_html=""
    local product_edition_id=""
    local language_skuid_table_json=""
    local sku_id=""
    local iso_download_link_json=""
    local iso_download_link=""

    echo "Downloading Windows ${RELEASE} (${I18N})"
    # This function is adapted from the Mido project:
    # https://github.com/ElliotKillick/Mido
    # Download newer consumer Windows versions from behind gated Microsoft API

    # Either 10, or 11
    local windows_version="$1"

    local url="https://www.microsoft.com/en-us/software-download/windows$windows_version"
    case "$windows_version" in
        10) url="${url}ISO";;
    esac

    local user_agent="Mozilla/5.0 (X11; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0"
    session_id="$(uuidgen)"

    # Get product edition ID for latest release of given Windows version
    # Product edition ID: This specifies both the Windows release (e.g. 22H2) and edition ("multi-edition" is default, either Home/Pro/Edu/etc., we select "Pro" in the answer files) in one number
    # This is the *only* request we make that Fido doesn't. Fido manually maintains a list of all the Windows release/edition product edition IDs in its script (see: $WindowsVersions array). This is helpful for downloading older releases (e.g. Windows 10 1909, 21H1, etc.) but we always want to get the newest release which is why we get this value dynamically
    # Also, keeping a "$WindowsVersions" array like Fido does would be way too much of a maintenance burden
    # Remove "Accept" header that curl sends by default
    echo " - Parsing download page: ${url}"
    iso_download_page_html="$(curl --disable --silent --user-agent "$user_agent" --header "Accept:" --max-filesize 1M --fail --proto =https --tlsv1.2 --http1.1 -- "$url")" || {
        handle_curl_error $?
        return $?
    }

    echo -n " - Getting Product edition ID: "
    # tr: Filter for only numerics to prevent HTTP parameter injection
    # head -c was recently added to POSIX: https://austingroupbugs.net/view.php?id=407
    product_edition_id="$(echo "$iso_download_page_html" | grep -Eo '<option value="[0-9]+">Windows' | cut -d '"' -f 2 | head -n 1 | tr -cd '0-9' | head -c 16)"
    echo "$product_edition_id"

    echo " - Permit Session ID: $session_id"
    # Permit Session ID
    # "org_id" is always the same value
    curl --disable --silent --output /dev/null --user-agent "$user_agent" --header "Accept:" --max-filesize 100K --fail --proto =https --tlsv1.2 --http1.1 -- "https://vlscppe.microsoft.com/tags?org_id=y6jn8c31&session_id=$session_id" || {
        # This should only happen if there's been some change to how this API works
        handle_curl_error $?
        return $?
    }

    local profile="606624d44113"

    echo -n " - Getting language SKU ID: "
    # Get language -> skuID association table
    language_skuid_table_json="$(curl --disable -s --fail --max-filesize 100K --proto =https --tlsv1.2 --http1.1 "https://www.microsoft.com/software-download-connector/api/getskuinformationbyproductedition?profile=${profile}&ProductEditionId=${product_edition_id}&SKU=undefined&friendlyFileName=undefined&Locale=en-US&sessionID=${session_id}")" || {
        handle_curl_error $?
        return $?
    }

    sku_id="$(echo "${language_skuid_table_json}" | jq -r '.Skus[] | select(.LocalizedLanguage=="'"${I18N}"'" or .Language=="'"${I18N}"'").Id')"
    echo "$sku_id"

    echo " - Getting ISO download link..."
    # Get ISO download link
    # If any request is going to be blocked by Microsoft it's always this last one (the previous requests always seem to succeed)
    # --referer: Required by Microsoft servers to allow request
    iso_download_link_json="$(curl --disable -s --fail --referer "$url" "https://www.microsoft.com/software-download-connector/api/GetProductDownloadLinksBySku?profile=${profile}&productEditionId=undefined&SKU=${sku_id}&friendlyFileName=undefined&Locale=en-US&sessionID=${session_id}")"

    local failed=0

    if ! [ "$iso_download_link_json" ]; then
        # This should only happen if there's been some change to how this API works
        echo " - Microsoft servers gave us an empty response to our request for an automated download."
        failed=1
    fi

    if echo "$iso_download_link_json" | grep -q "Sentinel marked this request as rejected."; then
        echo " - WARNING! Microsoft blocked the automated download request based on your IP address."
        failed=1
    fi

    if [ ${failed} -eq 1 ]; then
        echo "   Manually download the Windows ${windows_version} ISO using a web browser from: ${url}"
        echo "   Save the downloaded ISO to: $(realpath "${VM_PATH}")"
        echo "   Update the config file to reference the downloaded ISO: ./${VM_PATH}.conf"
        echo "   Continuing with the VM creation process..."
        return 1
    fi

    # Filter for 64-bit ISO download URL
    iso_download_link="$(echo "${iso_download_link_json}" | jq -r '.ProductDownloadOptions[].Uri' | grep x64)"

    if ! [ "$iso_download_link" ]; then
        # This should only happen if there's been some change to the download endpoint web address
        echo " - Microsoft servers gave us no download link to our request for an automated download. Please manually download this ISO in a web browser: $url"
        return 1
    fi

    echo " - URL: ${iso_download_link%%\?*}"

    # Download ISO
    FILE_NAME="$(echo "$iso_download_link" | cut -d'?' -f1 | cut -d'/' -f5)"
    web_get "${iso_download_link}" "${VM_PATH}" "${FILE_NAME}"
}

function get_() {
    if [ "${OS}" == "windows-server" ]; then
        download_windows_server "windows-server-${RELEASE}"
    else
        download_windows_workstation "${RELEASE}"
    fi

    if [ "${OPERATION}" == "download" ]; then
        exit 0
    fi

    echo "Downloading VirtIO drivers..."
    web_get "https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso" "${VM_PATH}"

    rm -f "${VM_PATH}/unattended.iso"
    case ${RELEASE} in
        10|11)
            unattended_windows "${VM_PATH}"
            ;;
    esac

    if [ -n "${FILE_NAME}" ]; then
        make_vm_config "${FILE_NAME}" "virtio-win.iso"
    else
        make_vm_config "windows-${RELEASE}.iso" "virtio-win.iso"
    fi
}


windows


# Template file for 'windows'
OSNAME="windows"
PRETTY="Windows"
BASEDOF="-"
DESCRIPTION="Whether youâre gaming, studying, running a business, or running a household, Windows helps you get it done"
HOMEPAGE="https://www.microsoft.com/en-us/windows"
CREDENTIALS="-"
GUEST="windows"

RELEASES=""


function releases_() {
    echo 11 10
}

function languages_() {
    I18NS=("Arabic" "Brazilian Portuguese" "Bulgarian" "Chinese (Simplified)" "Chinese (Traditional)" "Croatian" "Czech" "Danish" "Dutch" \
    "English (United States)" "English International" "Estonian" "Finnish" "French" "French Canadian" "German" "Greek" "Hebrew" "Hungarian" \
    "Italian" "Japanese" "Korean" "Latvian" "Lithuanian" "Norwegian" "Polish" "Portuguese" "Romanian" "Russian" "Serbian Latin" "Slovak" \
    "Slovenian" "Spanish" "Spanish (Mexico)" "Swedish" "Thai" "Turkish" "Ukrainian")
}

function unattended_windows() {
    mkdir -p "${1}/unattended" 2>/dev/null

    cat << 'EOF' > "${1}/unattended/autounattend.xml"
<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend"
  xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <!--
       For documentation on components:
       https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/
  -->
  <settings pass="offlineServicing">
    <component name="Microsoft-Windows-LUA-Settings" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <EnableLUA>false</EnableLUA>
    </component>
    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <ComputerName>*</ComputerName>
    </component>
  </settings>

  <settings pass="generalize">
    <component name="Microsoft-Windows-PnPSysprep" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
      <PersistAllDeviceInstalls>true</PersistAllDeviceInstalls>
    </component>
    <component name="Microsoft-Windows-Security-SPP" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <SkipRearm>1</SkipRearm>
    </component>
  </settings>

  <settings pass="specialize">
    <component name="Microsoft-Windows-Security-SPP-UX" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <SkipAutoActivation>true</SkipAutoActivation>
    </component>
    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <ComputerName>*</ComputerName>
      <OEMInformation>
        <Manufacturer>Quickemu Project</Manufacturer>
        <Model>Quickemu</Model>
        <SupportHours>24/7</SupportHours>
        <SupportPhone></SupportPhone>
        <SupportProvider>Quickemu Project</SupportProvider>
        <SupportURL>https://github.com/quickemu-project/quickemu/issues</SupportURL>
      </OEMInformation>
      <OEMName>Quickemu Project</OEMName>
      <ProductKey>W269N-WFGWX-YVC9B-4J6C9-T83GX</ProductKey>
    </component>
    <component name="Microsoft-Windows-SQMApi" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <CEIPEnabled>0</CEIPEnabled>
    </component>
  </settings>

  <settings pass="windowsPE">
    <component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <Diagnostics>
        <OptIn>false</OptIn>
      </Diagnostics>
      <DiskConfiguration>
        <Disk wcm:action="add">
          <DiskID>0</DiskID>
          <WillWipeDisk>true</WillWipeDisk>
          <CreatePartitions>
            <!-- Windows RE Tools partition -->
            <CreatePartition wcm:action="add">
              <Order>1</Order>
              <Type>Primary</Type>
              <Size>256</Size>
            </CreatePartition>
            <!-- System partition (ESP) -->
            <CreatePartition wcm:action="add">
              <Order>2</Order>
              <Type>EFI</Type>
              <Size>128</Size>
            </CreatePartition>
            <!-- Microsoft reserved partition (MSR) -->
            <CreatePartition wcm:action="add">
              <Order>3</Order>
              <Type>MSR</Type>
              <Size>128</Size>
            </CreatePartition>
            <!-- Windows partition -->
            <CreatePartition wcm:action="add">
              <Order>4</Order>
              <Type>Primary</Type>
              <Extend>true</Extend>
            </CreatePartition>
          </CreatePartitions>
          <ModifyPartitions>
            <!-- Windows RE Tools partition -->
            <ModifyPartition wcm:action="add">
              <Order>1</Order>
              <PartitionID>1</PartitionID>
              <Label>WINRE</Label>
              <Format>NTFS</Format>
              <TypeID>DE94BBA4-06D1-4D40-A16A-BFD50179D6AC</TypeID>
            </ModifyPartition>
            <!-- System partition (ESP) -->
            <ModifyPartition wcm:action="add">
              <Order>2</Order>
              <PartitionID>2</PartitionID>
              <Label>System</Label>
              <Format>FAT32</Format>
            </ModifyPartition>
            <!-- MSR partition does not need to be modified -->
            <ModifyPartition wcm:action="add">
              <Order>3</Order>
              <PartitionID>3</PartitionID>
            </ModifyPartition>
            <!-- Windows partition -->
              <ModifyPartition wcm:action="add">
              <Order>4</Order>
              <PartitionID>4</PartitionID>
              <Label>Windows</Label>
              <Letter>C</Letter>
              <Format>NTFS</Format>
            </ModifyPartition>
          </ModifyPartitions>
        </Disk>
      </DiskConfiguration>
      <DynamicUpdate>
        <Enable>true</Enable>
        <WillShowUI>Never</WillShowUI>
      </DynamicUpdate>
      <ImageInstall>
        <OSImage>
          <InstallTo>
            <DiskID>0</DiskID>
            <PartitionID>4</PartitionID>
          </InstallTo>
          <InstallToAvailablePartition>false</InstallToAvailablePartition>
        </OSImage>
      </ImageInstall>
      <RunSynchronous>
        <RunSynchronousCommand wcm:action="add">
          <Order>1</Order>
          <Path>reg add HKLM\System\Setup\LabConfig /v BypassCPUCheck /t REG_DWORD /d 0x00000001 /f</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>2</Order>
          <Path>reg add HKLM\System\Setup\LabConfig /v BypassRAMCheck /t REG_DWORD /d 0x00000001 /f</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>3</Order>
          <Path>reg add HKLM\System\Setup\LabConfig /v BypassSecureBootCheck /t REG_DWORD /d 0x00000001 /f</Path>
        </RunSynchronousCommand>
        <RunSynchronousCommand wcm:action="add">
          <Order>4</Order>
          <Path>reg add HKLM\System\Setup\LabConfig /v BypassTPMCheck /t REG_DWORD /d 0x00000001 /f</Path>
        </RunSynchronousCommand>
      </RunSynchronous>
      <UpgradeData>
        <Upgrade>false</Upgrade>
        <WillShowUI>Never</WillShowUI>
      </UpgradeData>
      <UserData>
        <AcceptEula>true</AcceptEula>
        <FullName>Quickemu</FullName>
        <Organization>Quickemu Project</Organization>
        <!-- https://docs.microsoft.com/en-us/windows-server/get-started/kms-client-activation-keys -->
        <ProductKey>
          <Key>W269N-WFGWX-YVC9B-4J6C9-T83GX</Key>
          <WillShowUI>Never</WillShowUI>
        </ProductKey>
      </UserData>
    </component>

    <component name="Microsoft-Windows-PnpCustomizationsWinPE" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" processorArchitecture="amd64" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <!--
           This makes the VirtIO drivers available to Windows, assuming that
           the VirtIO driver disk is available as drive E:
           https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md
      -->
      <DriverPaths>
        <PathAndCredentials wcm:action="add" wcm:keyValue="1">
          <Path>E:\qemufwcfg\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="2">
          <Path>E:\vioinput\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="3">
          <Path>E:\vioscsi\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="4">
          <Path>E:\viostor\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="5">
          <Path>E:\vioserial\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="6">
          <Path>E:\qxldod\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="7">
          <Path>E:\amd64\w10</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="8">
          <Path>E:\viogpudo\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="9">
          <Path>E:\viorng\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="10">
          <Path>E:\NetKVM\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="11">
          <Path>E:\viofs\w10\amd64</Path>
        </PathAndCredentials>
        <PathAndCredentials wcm:action="add" wcm:keyValue="12">
          <Path>E:\Balloon\w10\amd64</Path>
        </PathAndCredentials>
      </DriverPaths>
    </component>
  </settings>

  <settings pass="oobeSystem">
    <component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <AutoLogon>
        <Password>
          <Value>quickemu</Value>
          <PlainText>true</PlainText>
        </Password>
        <Enabled>true</Enabled>
        <Username>Quickemu</Username>
      </AutoLogon>
      <DisableAutoDaylightTimeSet>false</DisableAutoDaylightTimeSet>
      <OOBE>
        <HideEULAPage>true</HideEULAPage>
        <HideLocalAccountScreen>true</HideLocalAccountScreen>
        <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>
        <HideOnlineAccountScreens>true</HideOnlineAccountScreens>
        <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
        <NetworkLocation>Home</NetworkLocation>
        <ProtectYourPC>3</ProtectYourPC>
        <SkipUserOOBE>true</SkipUserOOBE>
        <SkipMachineOOBE>true</SkipMachineOOBE>
        <VMModeOptimizations>
          <SkipWinREInitialization>true</SkipWinREInitialization>
        </VMModeOptimizations>
      </OOBE>
      <UserAccounts>
        <LocalAccounts>
          <LocalAccount wcm:action="add">
            <Password>
              <Value>quickemu</Value>
              <PlainText>true</PlainText>
            </Password>
            <Description>Quickemu</Description>
            <DisplayName>Quickemu</DisplayName>
            <Group>Administrators</Group>
            <Name>Quickemu</Name>
          </LocalAccount>
        </LocalAccounts>
      </UserAccounts>
      <RegisteredOrganization>Quickemu Project</RegisteredOrganization>
      <RegisteredOwner>Quickemu</RegisteredOwner>
      <FirstLogonCommands>
        <SynchronousCommand wcm:action="add">
          <CommandLine>msiexec /i E:\guest-agent\qemu-ga-x86_64.msi /quiet /passive /qn</CommandLine>
          <Description>Install Virtio Guest Agent</Description>
          <Order>1</Order>
        </SynchronousCommand>
        <SynchronousCommand wcm:action="add">
          <CommandLine>msiexec /i F:\spice-webdavd-x64-latest.msi /quiet /passive /qn</CommandLine>
          <Description>Install spice-webdavd file sharing agent</Description>
          <Order>2</Order>
        </SynchronousCommand>
        <SynchronousCommand wcm:action="add">
          <CommandLine>msiexec /i F:\UsbDk_1.0.22_x64.msi /quiet /passive /qn</CommandLine>
          <Description>Install usbdk USB sharing agent</Description>
          <Order>3</Order>
        </SynchronousCommand>
        <SynchronousCommand wcm:action="add">
          <CommandLine>msiexec /i F:\spice-vdagent-x64-0.10.0.msi /quiet /passive /qn</CommandLine>
          <Description>Install spice-vdagent SPICE agent</Description>
          <Order>4</Order>
        </SynchronousCommand>
        <SynchronousCommand wcm:action="add">
          <CommandLine>Cmd /c POWERCFG -H OFF</CommandLine>
          <Description>Disable Hibernation</Description>
          <Order>5</Order>
        </SynchronousCommand>
      </FirstLogonCommands>
    </component>
  </settings>
</unattend>
EOF


echo "Downloading Spice drivers..."
web_get https://www.spice-space.org/download/windows/spice-webdavd/spice-webdavd-x64-latest.msi "${VM_PATH}/unattended"
web_get https://www.spice-space.org/download/windows/vdagent/vdagent-win-0.10.0/spice-vdagent-x64-0.10.0.msi "${VM_PATH}/unattended"
web_get https://www.spice-space.org/download/windows/usbdk/UsbDk_1.0.22_x64.msi "${VM_PATH}/unattended"

echo "Making unattended.iso"
mkisofs -quiet -l -o "${VM_PATH}/unattended.iso" "${VM_PATH}/unattended/"
}

function handle_curl_error() {
    local error_code="$1"
    local fatal_error_action=2
    case "$error_code" in
        6)
            echo "Failed to resolve Microsoft servers! Is there an Internet connection? Exiting..."
            return "$fatal_error_action"
            ;;
        7)
            echo "Failed to contact Microsoft servers! Is there an Internet connection or is the server down?"
            ;;
        8)
            echo "Microsoft servers returned a malformed HTTP response!"
            ;;
        22)
            echo "Microsoft servers returned a failing HTTP status code!"
            ;;
        23)
            echo "Failed at writing Windows media to disk! Out of disk space or permission error? Exiting..."
            return "$fatal_error_action"
            ;;
        26)
            echo "Ran out of memory during download! Exiting..."
            return "$fatal_error_action"
            ;;
        36)
            echo "Failed to continue earlier download!"
            ;;
        63)
            echo "Microsoft servers returned an unexpectedly large response!"
            ;;
            # POSIX defines exit statuses 1-125 as usable by us
            # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_08_02
            $((error_code <= 125)))
            # Must be some other server or network error (possibly with this specific request/file)
            # This is when accounting for all possible errors in the curl manual assuming a correctly formed curl command and an HTTP(S) request, using only the curl features we're using, and a sane build
            echo "Miscellaneous server or network error!"
            ;;
        126 | 127 )
            echo "Curl command not found! Please install curl and try again. Exiting..."
            return "$fatal_error_action"
            ;;
        # Exit statuses are undefined by POSIX beyond this point
        *)
            case "$(kill -l "$error_code")" in
            # Signals defined to exist by POSIX:
            # https://pubs.opengroup.org/onlinepubs/009695399/basedefs/signal.h.html
            INT)
                echo "Curl was interrupted!"
                ;;
            # There could be other signals but these are most common
            SEGV | ABRT )
                echo "Curl crashed! Failed exploitation attempt? Please report any core dumps to curl developers. Exiting..."
                return "$fatal_error_action"
                ;;
            *)
                echo "Curl terminated due to a fatal signal!"
                ;;
            esac
    esac
    return 1
}

function download_windows_server() {
    local iso_download_page_html=""
    # Copyright (C) 2024 Elliot Killick <contact@elliotkillick.com>
    # This function is adapted from the Mido project:
    # https://github.com/ElliotKillick/Mido

    # Download enterprise evaluation Windows versions
    local windows_version="$1"
    local enterprise_type="$2"
    local PRETTY_RELEASE=""

    case "${RELEASE}" in
        *) PRETTY_RELEASE="${RELEASE}";;
    esac

    echo "Downloading $(pretty_name "${OS}") ${PRETTY_RELEASE} (${I18N})"

    local url="https://www.microsoft.com/en-us/evalcenter/download-$windows_version"

    echo " - Parsing download page: ${url}"
    iso_download_page_html="$(curl --disable --silent --location --max-filesize 1M --fail --proto =https --tlsv1.2 --http1.1 -- "$url")" || {
        handle_curl_error $?
        return $?
    }

    if ! [ "$iso_download_page_html" ]; then
        # This should only happen if there's been some change to where this download page is located
        echo " - Windows server download page gave us an empty response"
        return 1
    fi

    local CULTURE=""
    local COUNTRY=""
    case "${I18N}" in
        "English (Great Britain)")
            CULTURE="en-gb"
            COUNTRY="GB";;
        "Chinese (Simplified)")
            CULTURE="zh-cn"
            COUNTRY="CN";;
        "Chinese (Traditional)")
            CULTURE="zh-tw"
            COUNTRY="TW";;
        "French")
            CULTURE="fr-fr"
            COUNTRY="FR";;
        "German")
            CULTURE="de-de"
            COUNTRY="DE";;
        "Italian")
            CULTURE="it-it"
            COUNTRY="IT";;
        "Japanese")
            CULTURE="ja-jp"
            COUNTRY="JP";;
        "Korean")
            CULTURE="ko-kr"
            COUNTRY="KR";;
        "Portuguese (Brazil)")
            CULTURE="pt-br"
            COUNTRY="BR";;
        "Spanish")
            CULTURE="es-es"
            COUNTRY="ES";;
        "Russian")
            CULTURE="ru-ru"
            COUNTRY="RU";;
        *)
            CULTURE="en-us"
            COUNTRY="US";;
    esac

    echo " - Getting download link.."
    iso_download_links="$(echo "$iso_download_page_html" | grep -o "https://go.microsoft.com/fwlink/p/?LinkID=[0-9]\+&clcid=0x[0-9a-z]\+&culture=${CULTURE}&country=${COUNTRY}")" || {
        # This should only happen if there's been some change to the download endpoint web address
        echo " - Windows server download page gave us no download link"
        return 1
    }

    # Limit untrusted size for input validation
    iso_download_links="$(echo "$iso_download_links" | head -c 1024)"

    case "$enterprise_type" in
        # Select x64 download link
        "enterprise") iso_download_link=$(echo "$iso_download_links" | head -n 2 | tail -n 1) ;;
        # Select x64 LTSC download link
        "ltsc") iso_download_link=$(echo "$iso_download_links" | head -n 4 | tail -n 1) ;;
        *) iso_download_link="$iso_download_links" ;;
    esac

    # Follow redirect so proceeding log message is useful
    # This is a request we make this Fido doesn't
    # We don't need to set "--max-filesize" here because this is a HEAD request and the output is to /dev/null anyway
    iso_download_link="$(curl --disable --silent --location --output /dev/null --silent --write-out "%{url_effective}" --head --fail --proto =https --tlsv1.2 --http1.1 -- "$iso_download_link")" || {
        # This should only happen if the Microsoft servers are down
        handle_curl_error $?
        return $?
    }

    # Limit untrusted size for input validation
    iso_download_link="$(echo "$iso_download_link" | head -c 1024)"

    echo " - URL: $iso_download_link"

    # Download ISO
    FILE_NAME="${iso_download_link##*/}"
    web_get "${iso_download_link}" "${VM_PATH}" "${FILE_NAME}"
    OS="windows-server"
}

function download_windows_workstation() {
    local HASH=""
    local session_id=""
    local iso_download_page_html=""
    local product_edition_id=""
    local language_skuid_table_json=""
    local sku_id=""
    local iso_download_link_json=""
    local iso_download_link=""

    echo "Downloading Windows ${RELEASE} (${I18N})"
    # This function is adapted from the Mido project:
    # https://github.com/ElliotKillick/Mido
    # Download newer consumer Windows versions from behind gated Microsoft API

    # Either 10, or 11
    local windows_version="$1"

    local url="https://www.microsoft.com/en-us/software-download/windows$windows_version"
    case "$windows_version" in
        10) url="${url}ISO";;
    esac

    local user_agent="Mozilla/5.0 (X11; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0"
    session_id="$(uuidgen)"

    # Get product edition ID for latest release of given Windows version
    # Product edition ID: This specifies both the Windows release (e.g. 22H2) and edition ("multi-edition" is default, either Home/Pro/Edu/etc., we select "Pro" in the answer files) in one number
    # This is the *only* request we make that Fido doesn't. Fido manually maintains a list of all the Windows release/edition product edition IDs in its script (see: $WindowsVersions array). This is helpful for downloading older releases (e.g. Windows 10 1909, 21H1, etc.) but we always want to get the newest release which is why we get this value dynamically
    # Also, keeping a "$WindowsVersions" array like Fido does would be way too much of a maintenance burden
    # Remove "Accept" header that curl sends by default
    echo " - Parsing download page: ${url}"
    iso_download_page_html="$(curl --disable --silent --user-agent "$user_agent" --header "Accept:" --max-filesize 1M --fail --proto =https --tlsv1.2 --http1.1 -- "$url")" || {
        handle_curl_error $?
        return $?
    }

    echo -n " - Getting Product edition ID: "
    # tr: Filter for only numerics to prevent HTTP parameter injection
    # head -c was recently added to POSIX: https://austingroupbugs.net/view.php?id=407
    product_edition_id="$(echo "$iso_download_page_html" | grep -Eo '<option value="[0-9]+">Windows' | cut -d '"' -f 2 | head -n 1 | tr -cd '0-9' | head -c 16)"
    echo "$product_edition_id"

    echo " - Permit Session ID: $session_id"
    # Permit Session ID
    # "org_id" is always the same value
    curl --disable --silent --output /dev/null --user-agent "$user_agent" --header "Accept:" --max-filesize 100K --fail --proto =https --tlsv1.2 --http1.1 -- "https://vlscppe.microsoft.com/tags?org_id=y6jn8c31&session_id=$session_id" || {
        # This should only happen if there's been some change to how this API works
        handle_curl_error $?
        return $?
    }

    local profile="606624d44113"

    echo -n " - Getting language SKU ID: "
    # Get language -> skuID association table
    language_skuid_table_json="$(curl --disable -s --fail --max-filesize 100K --proto =https --tlsv1.2 --http1.1 "https://www.microsoft.com/software-download-connector/api/getskuinformationbyproductedition?profile=${profile}&ProductEditionId=${product_edition_id}&SKU=undefined&friendlyFileName=undefined&Locale=en-US&sessionID=${session_id}")" || {
        handle_curl_error $?
        return $?
    }

    sku_id="$(echo "${language_skuid_table_json}" | jq -r '.Skus[] | select(.LocalizedLanguage=="'"${I18N}"'" or .Language=="'"${I18N}"'").Id')"
    echo "$sku_id"

    echo " - Getting ISO download link..."
    # Get ISO download link
    # If any request is going to be blocked by Microsoft it's always this last one (the previous requests always seem to succeed)
    # --referer: Required by Microsoft servers to allow request
    iso_download_link_json="$(curl --disable -s --fail --referer "$url" "https://www.microsoft.com/software-download-connector/api/GetProductDownloadLinksBySku?profile=${profile}&productEditionId=undefined&SKU=${sku_id}&friendlyFileName=undefined&Locale=en-US&sessionID=${session_id}")"

    local failed=0

    if ! [ "$iso_download_link_json" ]; then
        # This should only happen if there's been some change to how this API works
        echo " - Microsoft servers gave us an empty response to our request for an automated download."
        failed=1
    fi

    if echo "$iso_download_link_json" | grep -q "Sentinel marked this request as rejected."; then
        echo " - WARNING! Microsoft blocked the automated download request based on your IP address."
        failed=1
    fi

    if [ ${failed} -eq 1 ]; then
        echo "   Manually download the Windows ${windows_version} ISO using a web browser from: ${url}"
        echo "   Save the downloaded ISO to: $(realpath "${VM_PATH}")"
        echo "   Update the config file to reference the downloaded ISO: ./${VM_PATH}.conf"
        echo "   Continuing with the VM creation process..."
        return 1
    fi

    # Filter for 64-bit ISO download URL
    iso_download_link="$(echo "${iso_download_link_json}" | jq -r '.ProductDownloadOptions[].Uri' | grep x64)"

    if ! [ "$iso_download_link" ]; then
        # This should only happen if there's been some change to the download endpoint web address
        echo " - Microsoft servers gave us no download link to our request for an automated download. Please manually download this ISO in a web browser: $url"
        return 1
    fi

    echo " - URL: ${iso_download_link%%\?*}"

    # Download ISO
    FILE_NAME="$(echo "$iso_download_link" | cut -d'?' -f1 | cut -d'/' -f5)"
    web_get "${iso_download_link}" "${VM_PATH}" "${FILE_NAME}"
}

function get_windows() {
    if [ "${OS}" == "windows-server" ]; then
        download_windows_server "windows-server-${RELEASE}"
    else
        download_windows_workstation "${RELEASE}"
    fi

    if [ "${OPERATION}" == "download" ]; then
        exit 0
    fi

    echo "Downloading VirtIO drivers..."
    web_get "https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso" "${VM_PATH}"

    rm -f "${VM_PATH}/unattended.iso"
    case ${RELEASE} in
        10|11)
            unattended_windows "${VM_PATH}"
            ;;
    esac

    if [ -n "${FILE_NAME}" ]; then
        make_vm_config "${FILE_NAME}" "virtio-win.iso"
    else
        make_vm_config "windows-${RELEASE}.iso" "virtio-win.iso"
    fi
}


xubuntu

xubuntu 16.04:                       https://cdimage.ubuntu.com/xubuntu/releases/16.04/release/xubuntu-16.04.6-desktop-amd64.iso
xubuntu 18.04:                       https://cdimage.ubuntu.com/xubuntu/releases/18.04/release/xubuntu-18.04.5-desktop-amd64.iso
xubuntu 20.04:                       https://cdimage.ubuntu.com/xubuntu/releases/20.04/release/xubuntu-20.04.6-desktop-amd64.iso
xubuntu 22.04:                       https://cdimage.ubuntu.com/xubuntu/releases/22.04/release/xubuntu-22.04.5-desktop-amd64.iso
xubuntu 24.04:                       https://cdimage.ubuntu.com/xubuntu/releases/24.04/release/xubuntu-24.04.2-desktop-amd64.iso
xubuntu 24.10:                       https://cdimage.ubuntu.com/xubuntu/releases/24.10/release/xubuntu-24.10-desktop-amd64.iso
xubuntu daily-live:                  https://cdimage.ubuntu.com/xubuntu/daily-live/current/plucky-desktop-amd64.iso

# Template file for 'xubuntu'
OSNAME="xubuntu"
PRETTY="Xubuntu"
BASEDOF="Ubuntu"
DESCRIPTION="Elegant and easy to use operating system. Xubuntu comes with Xfce, which is a stable, light and configurable desktop environment"
HOMEPAGE="https://xubuntu.org"
CREDENTIALS="-"
GUEST="linux_old
linux_old"

RELEASES=""


function releases_() {
    local VERSION_DATA=""
    local SUPPORTED_VERSIONS=()
    VERSION_DATA="$(IFS=$'\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')"
    # shellcheck disable=SC2207
    SUPPORTED_VERSIONS=($(IFS=$'\n' jq -r 'select(.status=="Supported" or .status=="Current Stable Release") | .version' <<<"${VERSION_DATA}" | sort))
    case "${OS}" in
        ubuntu)
            echo "${SUPPORTED_VERSIONS[@]}" daily-live;;
        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)
            # after 16.04
            echo "${SUPPORTED_VERSIONS[@]:1}" daily-live;;
        ubuntu-budgie)
            # after 18.04
            echo "${SUPPORTED_VERSIONS[@]:2}" daily-live;;
        edubuntu|ubuntu-unity|ubuntucinnamon)
            # after 23.10
            echo "${SUPPORTED_VERSIONS[@]:5}" daily-live;;
    esac
}

function get_() {
    local ISO=""
    local HASH=""
    local URL=""
    local DATA=""

    if [[ "${RELEASE}" == "daily"* ]] && [ "${OS}" == "ubuntustudio" ]; then
        # Ubuntu Studio daily-live images are in the dvd directory
        RELEASE="dvd"
    fi
    if [[ "${RELEASE}" == "jammy-daily" ]]; then
        if [[ "${OS}" == "ubuntustudio" ]]; then
            URL="https://cdimage.ubuntu.com/${OS}/jammy/dvd/current"
        else
            URL="https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current"
        fi
        VM_PATH="${OS}-jammy-live"
    elif [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        URL="https://cdimage.ubuntu.com/${OS}/${RELEASE}/current"
        VM_PATH="${OS}-${RELEASE}"
    elif [ "${OS}" == "ubuntu" ]; then
        URL="https://releases.ubuntu.com/${RELEASE}"
    else
        URL="https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release"
    fi
    if web_check "${URL}/SHA256SUMS"; then
        DATA=$(web_pipe "${URL}/SHA256SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}" | sed '1q;d')
        HASH=$(cut -d' ' -f1 <<<"${DATA}" | sed '1q;d')
    else
        DATA=$(web_pipe "${URL}/MD5SUMS" | grep 'desktop\|dvd\|install' | grep amd64 | grep iso | grep -v "+mac")
        ISO=$(cut -d'*' -f2 <<<"${DATA}")
        HASH=$(cut -d' ' -f1 <<<"${DATA}")
    fi
    if [ -z "${ISO}" ] || [ -z "${HASH}" ]; then
        echo "${PRETTY} ${RELEASE} is currently unavailable. Please select other OS/Release combination"
        exit 1
    fi
    if [[ "${RELEASE}" == "daily"* ]] || [ "${RELEASE}" == "dvd" ]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-devel.iso"
        make_vm_config "${OS}-devel.iso"
    elif [[ "${RELEASE}" == "jammy-daily" ]]; then
        zsync_get "${URL}/${ISO}" "${VM_PATH}" "${OS}-jammy-live.iso"
        make_vm_config "${OS}-jammy-live.iso"
    else
        web_get "${URL}/${ISO}" "${VM_PATH}"
        check_hash "${ISO}" "${HASH}"
        make_vm_config "${ISO}"
    fi
}


zorin

zorin 17 core64:                     https://distro.ibiblio.org/zorinos/17/Zorin-OS-17.3-Core-64-bit.iso
zorin 17 lite64:                     https://distro.ibiblio.org/zorinos/17/Zorin-OS-17.3-Lite-64-bit.iso
zorin 17 education64:                https://distro.ibiblio.org/zorinos/17/Zorin-OS-17.3-Education-64-bit.iso
zorin 16 core64:                     https://distro.ibiblio.org/zorinos/16/Zorin-OS-16.3-Core-64-bit.iso
zorin 16 lite64:                     https://distro.ibiblio.org/zorinos/16/Zorin-OS-16.3-Lite-64-bit.iso
zorin 16 education64:                https://distro.ibiblio.org/zorinos/16/Zorin-OS-16.3-Education-64-bit.iso

# Template file for 'zorin'
OSNAME="zorin"
PRETTY="Zorin OS"
BASEDOF="Ubuntu"
DESCRIPTION="Alternative to Windows and macOS designed to make your computer faster, more powerful, secure, and privacy-respecting"
HOMEPAGE="https://zorin.com/os"
CREDENTIALS="-"


RELEASES="17 16"
EDITIONS="lite64 education64 core64"

function releases_() {
    echo 17 16
}

function editions_() {
    echo core64 lite64 education64
}

function get_() {
    local HASH=""
    local ISO=""
    local URL=""
    # Process the URL redirections; required for Zorin
    URL=$(web_redirect "https://zrn.co/${RELEASE}${EDITION}")
    echo "${URL} ${HASH}"
}

function specific_tweaks() {
    case ${EDITION} in
        education64|edulite64) echo "disk_size=\"32G\"" >> "${CONF_FILE}"
    esac
}


